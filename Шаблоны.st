{1,
{88,
{"Мой",1,0,"",""},
{0,
{"Коммент",0,1,"Ком[мент]","//+ Иванов А.Б. 2016-09-15
<?>
//- Иванов А.Б. 2016-09-15
"}
},
{9,
{"СКД",1,0,"",""},
{0,
{"СКД_ПриКомпановкеРезультата",0,0,"","Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Схема=ЭтотОбъект.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	//Настройки=Схема.НастройкиПоУмолчанию;
	Настройки = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки=Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ДатаНач""));
	Если Параметр<>Неопределено тогда
		Параметр.Значение=НачалоДня(ДатаНач);
		Параметр.Использование=Истина;
	конецесли;
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ДатаКон""));
	Если Параметр<>Неопределено тогда
		Параметр.Значение=Новый Граница(КонецДня(ДатаКон),ВидГраницы.Включая);
		//Параметр.Значение=КонецДня(ДатаКон);
		Параметр.Использование=Истина;
	конецесли;
	
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ТипЦен""));
	Если ТипЦен.БазовыйТипЦен<>Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() тогда
		Параметр.Значение=ТипЦен.БазовыйТипЦен;
	иначе
		Параметр.Значение=ТипЦен;
	конецесли;
	Параметр.Использование=Истина;
	
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ПроцентСкидки""));
	Если ТипЦен.БазовыйТипЦен<>Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() тогда
		Параметр.Значение=-ТипЦен.ПроцентСкидкиНаценки/100;
		Параметр.Использование=Истина;
	Иначе
		Параметр.Значение=0;
		Параметр.Использование=Истина;			
	конецесли;
	
	
	
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""СписокСкладов""));
	//СписокСкладов=Новый СписокЗначений();
	//СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду(""000000020""));  //Склад ГП №1
	//СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду(""000000021""));  //Склад ГП №5
	СписокСкладов=новый Массив();
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду(""000000020""));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду(""000000021""));
	Параметр.Значение=СписокСкладов;
	Параметр.Использование=Истина;
	
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ДатаЦены""));
	Параметр.Значение=ДатаКон;
	Параметр.Использование=Истина;
	
	
	Параметр=Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""Организация""));
	Параметр.Значение=Справочники.Организации.НайтиПоКоду(""000000001"");
	Параметр.Использование=Истина;
	
	//Заголовок
	Заголовок=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""Заголовок""));
	Заголовок.Значение=""Выпущено и перемещено на Склады ГП с ""+Формат(ДатаНач,""ДФ=dd.MM.yyyy"") + "" по "" +Формат(ДатаКон,""ДФ=dd.MM.yyyy"")+Символы.ПС+""Тип цен: ""+ ТипЦен;
	
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;	
	Макет=КомпоновщикМакета.Выполнить(Схема,Настройки,ДанныеРасшифровки);
	ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет,,ДанныеРасшифровки);
	
	
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ТабДок=Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ТабДок.Показать();
КонецПроцедуры"}
},
{0,
{"РасшифровкаСКД",0,0,"","Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//(Антон 
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ЭтаФорма.ДанныеРасшифровки);		
	//Антон)	
КонецПроцедуры

//(Антон 
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип(""ИдентификаторРасшифровкиКомпоновкиДанных"") 
		И ТипЗнч(Расшифровка) <> Тип(""ДанныеРасшифровкиКомпоновкиДанных"") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции
Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип(""ЭлементРасшифровкиКомпоновкиДанныхПоля"") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип(""Строка"") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип(""КомпоновщикНастроекКомпоновкиДанных"")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип(""ДанныеРасшифровкиКомпоновкиДанных"")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип(""НастройкиВложенногоОбъектаКомпоновкиДанных"") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции
//Антон)


//Второй вариант
Процедура ПолеРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
	СтандартнаяОбработка=Ложь;	
	СтруктураРасшифровки=Новый Структура();
	//Для тонкого клиента надо получать ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	//где ДанныеРасшифровки это строковый реквизит на форме отчета
	СтрокаРасшифровки=ДанныеРасшифровки.Элементы[Расшифровка];
	ПолучитьСтруктуруРасшифровки(СтрокаРасшифровки,СтруктураРасшифровки);
	Для каждого ЭлементыСтруктуры из СтруктураРасшифровки цикл
		Сообщить(""""+ЭлементыСтруктуры.Ключ+""=""+ЭлементыСтруктуры.Значение);
	Конеццикла;
КонецПроцедуры
Процедура ПолучитьСтруктуруРасшифровки(СтрокаРодительРасшифровки,СтруктураРасшифровки)
	Если ТипЗнч(СтрокаРодительРасшифровки) = Тип(""ЭлементРасшифровкиКомпоновкиДанныхГруппировка"") Тогда
		РасшифровкиРодитель=СтрокаРодительРасшифровки.ПолучитьРодителей();	
		Для каждого СтрокаРасшифровкиРодитель из РасшифровкиРодитель  цикл
			ПолучитьСтруктуруРасшифровки(СтрокаРасшифровкиРодитель,СтруктураРасшифровки);	
	    Конеццикла;
	ИначеЕсли ТипЗнч(СтрокаРодительРасшифровки) = Тип(""ЭлементРасшифровкиКомпоновкиДанныхПоля"") Тогда
		РасшифровкиРодитель=СтрокаРодительРасшифровки.ПолучитьРодителей();	
		Для каждого СтрокаРасшифровкиРодитель из РасшифровкиРодитель  цикл
			ПолучитьСтруктуруРасшифровки(СтрокаРасшифровкиРодитель,СтруктураРасшифровки);	
	    Конеццикла;
		
		ПолеЗначение=СтрокаРодительРасшифровки.ПолучитьПоля();
		Для каждого СтрокаПолеЗначение из ПолеЗначение цикл
			СтруктураРасшифровки.Вставить(СтрокаПолеЗначение.Поле,СтрокаПолеЗначение.Значение);							
		Конеццикла;		
	Конецесли;
КонецПроцедуры
"}
},
{0,
{"СКД_ЗначениеПараметра",0,0,"СКД[ЗначениеПараметра]","ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""мСтатусЗаказаПокупателя_Подтвержден""));
Если ЗначениеПараметра <> Неопределено Тогда
	ЗначениеПараметра.Значение=мСтатусЗаказаПокупателя_Подтвержден;
	ЗначениеПараметра.Использование=Истина;	
Конецесли;
"}
},
{0,
{"ГруппировкаСКД",0,0,"","

ПоследняяГруппировка=Неопределено;
ПоследняяГруппировка=ПолучитьПоследнююГруппировку(НастройкиРасшифровки.Структура,ПоследняяГруппировка);
//ГруппировкаРасшифровки=НастройкиРасшифровки.Структура.Добавить(Тип(""ГруппировкаКомпоновкиДанных""));
//ГруппировкаРасшифровки=ПоследняяГруппировка;
ГруппировкаРасшифровки=ПоследняяГруппировка.Структура.Добавить(Тип(""ГруппировкаКомпоновкиДанных""));
ГруппировкаРасшифровки.Использование=Истина;
ПолеГруппировкиРасшифровки=ГруппировкаРасшифровки.ПоляГруппировки.Элементы.Добавить(Тип(""ПолеГруппировкиКомпоновкиДанных""));
ПолеГруппировкиРасшифровки.Использование=Истина;
ПолеГруппировкиРасшифровки.Поле=Новый ПолеКомпоновкиДанных(ВыбранноеПолеРасшифровки);
АвтоПоле=ГруппировкаРасшифровки.Выбор.Элементы.Добавить(Тип(""АвтоВыбранноеПолеКомпоновкиДанных""));
АвтоПоле.Использование=Истина;
НастройкиРасшифровки.Отбор.Элементы.Очистить();
Для каждого ЭлементОтбора из ОтборНастройки.Элементы цикл
	ЭлементНастройкиОтбор=НастройкиРасшифровки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЗаполнитьЗначенияСвойств(ЭлементНастройкиОтбор,ЭлементОтбора);
конеццикла;

//(Антон
Функция ПолучитьПоследнююГруппировку(СтруктураНастроек,ПоследняяГруппировка)
	//НастройкиРасшифровки.Структура.Количество()
	НС=0;
	Пока НС<=СтруктураНастроек.Количество() и ПоследняяГруппировка = Неопределено цикл		
		ЭлементСтруктурыНастроек=СтруктураНастроек[НС];
		Если ЭлементСтруктурыНастроек.Структура.Количество()>0 тогда
			ПолучитьПоследнююГруппировку(ЭлементСтруктурыНастроек.Структура,ПоследняяГруппировка)
		иначе
			ПоследняяГруппировка=ЭлементСтруктурыНастроек;
			//Возврат ЭлементСтруктурыНастроек.Структура; 
		конецесли;		
		НС=НС+1;
	конеццикла;
	возврат ПоследняяГруппировка;	
КонецФункции
//Антон)
"}
},
{0,
{"ВыбранноеДействие",0,0,"","	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия);
	Если ВыполненноеДействие=ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать тогда
		ВыбранноеПолеРасшифровки=Настройки.Структура[0].ПоляГруппировки.Элементы[0].Поле;
		ОтборНастройки=Настройки.Отбор;
	конецесли;
"}
},
{0,
{"УстановкаОтбора",0,0,"","&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки)
	ЭлементыНастроек = Настройки.Элементы;
	Для каждого СтрокаЭлементыНастроек из ЭлементыНастроек цикл
		Если ТипЗНч(СтрокаЭлементыНастроек)= Тип(""ОтборКомпоновкиДанных"") Тогда
			ЕстьОтборПоАвтору=Ложь;
			ЭлементыОтбора = СтрокаЭлементыНастроек.Элементы;
			Для каждого ЭлементОтбора из ЭлементыОтбора цикл
				Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ЗаявкаНаЗакупку.Автор"") Тогда
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ПравоеЗначение = ПараметрыСеанса.Пользователь;
					ЕстьОтборПоАвтору = Истина;					
				Конецесли;					
			Конеццикла;
			Если НЕ ЕстьОтборПоАвтору Тогда
				ЭлементОтбора = ЭлементыОтбора.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ЗаявкаНаЗакупку.Автор"");      
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ПравоеЗначение = ПараметрыСеанса.Пользователь;				
			Конецесли;
		Конецесли;
	Конеццикла;
КонецПроцедуры
"}
},
{0,
{"ВычислитьВыражениеСГруппировкойВМассив",0,0,"","//Сумма(ВычислитьВыражениеСГруппировкойМассив(""Максимум(СуммаЗаявкиНаЗакупку)"",""ЗаявкаНаЗакупку""))


//СУММА(ВычислитьВыражениеСГруппировкойМассив(""ВЫБОР КОГДА Максимум(СуммаПоступленияПоЗаявкеНаЗакупку) - Сумма(СуммаЗаявкиНаОплату) > 0 ТОГДА 
//	Максимум(СуммаПоступленияПоЗаявкеНаЗакупку) - Сумма(СуммаЗаявкиНаОплату) 
//ИНАЧЕ 
//	0 
//КОНЕЦ
//"",""ЗаявкаНаЗакупку""))"}
},
{0,
{"ВыполнитьСКДВТаблицуЗначений",0,0,"","ОтчетОбъект = Отчеты.фнмСостояниеАвтомобилей.Создать();


СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;

ИмяВарианта = СписокВариантов;
Для Каждого ЭлВариантНастроек ИЗ СхемаКомпоновкиДанных.ВариантыНастроек Цикл
	Если ЭлВариантНастроек.Имя =ИмяВарианта Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ЭлВариантНастроек.Настройки);
		Прервать;		
	Конецесли;
КонецЦикла;

ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
ЭлементыОтбора.Очистить();
ЭлементОтбора = ЭлементыОтбора.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование = Истина;
ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Автомобиль"");
ЭлементОтбора.ПравоеЗначение = Автомобиль;

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ТаблицаЗначений = Новый ТаблицаЗначений;
	
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
"}
},
{0,
{"СКД на основне ТЗ",0,0,"","Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	ТЗТехника = фнмCareTrackWebServiceНовый.ПолучитьТЗТехника_СВебСервиса();
	СтандартнаяОбработка = Ложь;
	СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ВнешнийНаборДанных = Новый Структура(""ТЗТехника"", ТЗТехника);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
КонецПроцедуры
"}
}
},
{22,
{"УпрФормы",1,0,"",""},
{0,
{"СКД открыть отчет",0,0,"","&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(""СформироватьПриОткрытии"", Истина);
	ПараметрыФормы.Вставить(""КлючВарианта"",""Бронирование"");
	
	//+ Иванов А.Б. 2016-04-20
	ПараметрыФормы.Вставить(""ПользовательскиеНастройки"",ЗаполнитьПользовательскиеНастройкиОтчета());
	//- Иванов А.Б. 2016-04-20
	
	ОткрытьФорму(""Отчет.фнмСостояниеАвтомобилей.Форма"", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно, ПараметрыВыполненияКоманды.НавигационнаяСсылка);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПользовательскиеНастройкиОтчета()	
	ОтчетОбъект=Отчеты.фнмСостояниеАвтомобилей.Создать();
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ИмяВарианта = ""Бронирование"";
	Для Каждого ЭлВариантНастроек ИЗ ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если ЭлВариантНастроек.Имя = ИмяВарианта Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(ЭлВариантНастроек.Настройки);
			Прервать;		
		Конецесли;
	КонецЦикла;	
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//+ Иванов А.Б. 2016-04-20
	ПолеОтбора_АвтомобильРодитель = Новый ПолеКомпоновкиДанных(""Автомобиль.Родитель"");
	Для каждого ЭлементОтбора из Настройки.Отбор.Элементы цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора_АвтомобильРодитель Тогда
			ЭлементОтбора.Использование = Ложь;	
		Конецесли;
	Конеццикла;
	//- Иванов А.Б. 2016-04-20
	
	//НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	//ПолеОтбора = Новый ПолеКомпоновкиДанных(""Техника_Номенклатура"");
	//НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	//НовыйЭлементОтбора.Использование  = Истина;
	//НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//НовыйЭлементОтбора.ПравоеЗначение = Техника_Номенклатура;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции //



//Ранее


ПараметрыФормы=Новый Структура();
//+ Иванов А.Б. 2015-11-11
ПараметрыФормы.Вставить(""КлючВарианта"",""Основной"");
//- Иванов А.Б. 2015-11-11	
ПараметрыФормы.Вставить(""СформироватьПриОткрытии"", Истина);
//+ Иванов А.Б. 2015-11-10
ПараметрыФормы.Вставить(""ТекущийДокумент"", Ссылка);
//- Иванов А.Б. 2015-11-10


ДопПараметры = Новый Структура();
 ПараметрыПользователя = Новый Структура();
//+ Иванов А.Б. 2015-11-10
//ПараметрыПользователя.Вставить(""ТекущийДокумент"",Ссылка);
//- Иванов А.Б. 2015-11-10

ДопПараметры.Вставить(""ПараметрыПользователя"",ПараметрыПользователя);

ПараметрыФормы.Вставить(""ПользовательскиеНастройки"",ЗаполнитьПользовательскиеНастройкиОтчета(ДопПараметры));
ОткрытьФорму(""Отчет.фнмСверкаЦенОпцийТехники.Форма.ФормаОтчета"",ПараметрыФормы, , Новый УникальныйИдентификатор);


//+ SP 409 Иванов А.Б. 2015-10-22
Функция ЗаполнитьПользовательскиеНастройкиОтчета(ДопПараметры)	
	ОтчетОбъект=Отчеты.фнмСверкаЦенОпцийТехники.Создать();
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	////+ Иванов А.Б. 2015-11-10
	//ИмяВарианта = ""Основной"";
	//Для Каждого ЭлВариантНастроек ИЗ ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
	//	Если ЭлВариантНастроек.Имя = ИмяВарианта Тогда
	//		КомпоновщикНастроек.ЗагрузитьНастройки(ЭлВариантНастроек.Настройки);
	//		Прервать;		
	//	Конецесли;
	//КонецЦикла;	
	////- Иванов А.Б. 2015-11-10
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Для каждого ПараметрПользователя Из ДопПараметры.ПараметрыПользователя Цикл
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрПользователя.Ключ, ПараметрПользователя.Значение);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции
//- SP 409 Иванов А.Б. 2015-10-22
"}
},
{0,
{"УпрФормы",0,0,"","ДокументОбъект = РеквизитФормыВЗначение(""Объект""); 
ДокументОбъект.ПроцедураМодуляОбъектаЭкспортная();

//СОХРАНЕНИЕ
 
Структура = Новый Структура;
Структура.Вставить(""Поле1"", 10);

ХранилищеСистемныхНастроек.Сохранить(""КлючОбъекта"", ""КлючНастроек"", Структура);

//ЗАГРУЗКА    
 
ЗагружДанные = ХранилищеСистемныхНастроек.Загрузить(""КлючОбъекта"", ""КлючНастроек"");"}
},
{0,
{"ПередачаЗначениейПеременныхМеждуМодулями",0,0,"","
СчетаТовары = Новый Массив;
СчетаТовары.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
СчетаТовары.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеИзделия);

//Отчет.СчетаТовары это строковый реквизит
Отчет.СчетаТовары=ПоместитьВоВременноеХранилище(СчетаТовары,Новый УникальныйИдентификатор);

СчетаТовары=ПолучитьИзВременногоХранилища(Отчет.СчетаТовары);
"}
},
{0,
{"СообщениеПользователю",0,0,"","СообщениеПользователю = Новый СообщениеПользователю;
СообщениеПользователю.Текст = ""Ошибка! Не заполнен реквизит """"Заявка на закупку"""""";
СообщениеПользователю.Поле = ""Объект.ЗаявкаНаЗакупку"";
СообщениеПользователю.Сообщить();


// Сообщение которое затухает
ПоказатьОповещениеПользователя(""Ошибка! Заявка уже утверждена,""
				+Символы.ПС+"" нет смысла запускать новый процесс """"Утверждение закупки"""""");"}
},
{0,
{"ОткрытьФорму",0,0,"","&НаКлиенте
Процедура КомментарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтрокаКомментарии = Элементы.Комментарии.ТекущиеДанные;	
	Если СтрокаКомментарии = Неопределено тогда
		Возврат;	
	Конецесли;	
	
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(""ОбработатьВводКомментария"", ЭтаФорма, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(""ДатаКомментария"",СтрокаКомментарии.ДатаКомментария);
	ПараметрыФормы.Вставить(""Автор"",СтрокаКомментарии.Автор);
	ПараметрыФормы.Вставить(""Комментарий"",СтрокаКомментарии.Комментарий);
	ОткрытьФорму(""Справочник.узЗадачи.Форма.ФормаВводаКомментария"",ПараметрыФормы,,,,,ОповещениеОЗакрытии);	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВводКомментария(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	
КонецПроцедуры //ОбработатьДоговорыВзаиморасчетовПриВыборе




ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""Ключ"", БПСсылка);
ПараметрыФормы.Вставить(""Задача"", ВыбраннаяСтрока);
ОткрытьФорму(""БизнесПроцесс.ПродажаТехники.Форма.ФормаТочкиПродажи"",ПараметрыФормы);


//Открытие отчета и формирование его
ПараметрыФормы=Новый Структура();
ПараметрыФормы.Вставить(""СформироватьПриОткрытии"", Истина);

ДопПараметры = Новый Структура();
ДопПараметры.Вставить(""ПараметрКоманды"",ПараметрКоманды);
Если ТипЗнч(ПараметрКоманды) = Тип(""БизнесПроцессСсылка.УтверждениеЗакупки"")
	ИЛИ ТипЗнч(ПараметрКоманды) = Тип(""БизнесПроцессСсылка.УтверждениеЗакупки_СогласованиеПоДопМатрице"") Тогда
	ДопПараметры.Вставить(""ЭтоБизнесПроцессЗакупки"",Истина);
Иначе
	ДопПараметры.Вставить(""ЭтоБизнесПроцессЗакупки"",Ложь);
	ДопПараметры.Вставить(""ПараметрыПользователя"",Новый Структура(""ЗаявкаНаЗакупку"",ПараметрКоманды));
Конецесли;

ПараметрыФормы.Вставить(""ПользовательскиеНастройки"",ЗаполнитьПользовательскиеНастройкиОтчета(ДопПараметры));
 	
ОткрытьФорму(""Отчет.фнмЛистСогласования.Форма.ФормаОтчета"",ПараметрыФормы, , Новый УникальныйИдентификатор);	

&НаСервере
Функция ЗаполнитьПользовательскиеНастройкиОтчета(ДопПараметры)
	Если ДопПараметры.ЭтоБизнесПроцессЗакупки Тогда
		БизнесПроцес=ДопПараметры.ПараметрКоманды;
		ПараметрыПользователя = Новый Структура(""ЗаявкаНаЗакупку"",БизнесПроцес.ЗаявкаНаЗакупку);
	Иначе	
		ПараметрыПользователя = ДопПараметры.ПараметрыПользователя;
	Конецесли;
	
	ОтчетОбъект=Отчеты.фнмЛистСогласования.Создать();
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	Для каждого ПараметрПользователя Из ПараметрыПользователя Цикл
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрПользователя.Ключ, ПараметрПользователя.Значение);
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции


    ЗначениеОтбора = Новый Структура(""Владелец"", Объект.Контрагент);
	ЗначениеОтбора.Вставить(""ВидДоговора"",ПолучитьСписокВидовДоговоровНаСервере());
	
	ПараметрыВыбора = Новый Структура(""Отбор"", ЗначениеОтбора);   
    ФормаВыбора = ПолучитьФорму(""Справочник.ДоговорыВзаиморасчетов.Форма.ФормаВыбораУправляемая"",ПараметрыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""Форма"", ЭтаФорма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(""ОбработатьДоговорыВзаиморасчетовПриВыборе"", ЭтаФорма, ДополнительныеПараметры);
	
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;	
	ФормаВыбора.Открыть();

	
//Создать копирование док с упр. формой
ДокОбъект = ЗаявкаНаБронирование.Скопировать();

ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""ДокОбъект"",ДокОбъект);		
ОткрытьФорму(""Документ.фнмЗаявкаНаБронирование.Форма.ФормаДокумента"",ПараметрыФормы);

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.ДокОбъект <> Неопределено Тогда
			ЗначениеВРеквизитФормы(Параметры.ДокОбъект,""Объект"");
		Конецесли;
	Конецесли;
КонецПроцедуры	
//Конец блока Создать копирование док с упр. формой




//Можно открыть форму списка без параметров:

ОткрытьФорму(""Документ.ПриходнаяНакладная.ФормаСписка"");
//И затем, в обработчике события формы списка приходных накладных ПриСозданииНаСервере написать код, который создает отбор в динамическом списке, являющемся основным реквизитом формы:

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""ДатаЗаявкиНаЗакупку"") Тогда
		пДатаЗаявкиНаЗакупку = Параметры.ДатаЗаявкиНаЗакупку;
		
		ГруппаЭлементовОтбора = Список.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
		
	    ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(""Дата"");
	    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	    ЭлементОтбора.Использование    = Истина;
	    //ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	    ЭлементОтбора.ПравоеЗначение   = НачалоГода(пДатаЗаявкиНаЗакупку);
		
		
	    ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(""Дата"");
	    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	    ЭлементОтбора.Использование    = Истина;
	    //ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	    ЭлементОтбора.ПравоеЗначение   = КонецГода(пДатаЗаявкиНаЗакупку);
	Конецесли;
	Если Параметры.Свойство(""фнмВидОтчета"") Тогда
		пфнмВидОтчета = Параметры.фнмВидОтчета;
		
	    ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(""фнмВидОтчета"");
	    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	    ЭлементОтбора.Использование    = Истина;
	    //ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	    ЭлементОтбора.ПравоеЗначение   = пфнмВидОтчета;
	Конецесли;
КонецПроцедуры
"}
},
{0,
{"ПередачаФайлаССервераНаКлиент",0,0,"","&НаСервере
Функция ПолучитьФайлССервера(ИмяФайла)
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	Возврат ДанныеФайла;
КонецФункции

&НаКлиенте
Процедура ЗабратьФайлССервера(ИмяНаСервере, ИмяНаКлиенте)
	ДанныеФайла = ПолучитьФайлССервера(ИмяНаСервере);
	ДанныеФайла.Записать(ИмяНаКлиенте);
КонецПроцедуры"}
},
{0,
{"ПередачаФайлаСКлиентаНаСервер",0,0,"","//// В Модуле Формы 

&НаКлиенте
Процедура КомандаПрочитатьФайл(Команда)
	АдресФайла = """";
	ИмяФайлаДляРасширения = ""*.xml"";
	ИмяФайла=Объект.ИмяФайлаДанныхКлиент;

	Если Не ПоместитьФайл(АдресФайла, ИмяФайла, ИмяФайлаДляРасширения,Ложь,УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить(""АдресФайла"",АдресФайла);
	ДопПараметры.Вставить(""ИмяФайлаДляРасширения"",ИмяФайлаДляРасширения);
	
	КомандаПрочитатьФайлНаСервере(ДопПараметры);


КонецПроцедуры

&НаСервере
Функция КомандаПрочитатьФайлНаСервере(ДопПараметры) Экспорт
	ДокументОбъект = РеквизитФормыВЗначение(""Объект""); 
	ДокументОбъект.ИмяФайлаДанных = ДокументОбъект.ПолучитьИмяФайлаНаСервере(ДопПараметры);
	ЗначениеВРеквизитФормы(ДокументОбъект,""Объект"");
Конецфункции



//// В Модуле объекта

&НаСервере
Функция ПолучитьИмяФайлаНаСервере(ДопПараметры) Экспорт
	АдресФайла = ДопПараметры.АдресФайла;
	ИмяФайлаДляРасширения = ДопПараметры.ИмяФайлаДляРасширения;
									
	ИмяФайла = Неопределено;
	Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(АдресНаСервере);
	ИмяФайла = АдресНаСервере;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ""."")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции
"}
},
{0,
{"РеквизитФормыВЗначение",0,0,"Рекв[изитФормыВЗначение]","ДокументОбъект = РеквизитФормыВЗначение(""Объект""); 
ДокументОбъект.<?""ИмяЭлемента"">();
ЗначениеВРеквизитФормы(ДокументОбъект,""Объект"");
<?>

"}
},
{0,
{"НачалоВыбора",0,0,"","&НаКлиенте
Процедура СтатьяЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    ЗначениеОтбора = Новый Структура(""Ссылка"", ПолучитьСписокСтатейЗатрат());
    ПараметрыВыбора = Новый Структура(""Отбор"", ЗначениеОтбора);   
    Форма = ПолучитьФорму(""Справочник.СтатьиДоходовИРасходов.ФормаВыбора"",ПараметрыВыбора);
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;	
	
	РезультатВыбора = Форма.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    ЗначениеОтбора = Новый Структура(""Владелец"", Объект.Контрагент);
	ЗначениеОтбора.Вставить(""ВидДоговора"",ПолучитьСписокВидовДоговоровНаСервере());
	
	ПараметрыВыбора = Новый Структура(""Отбор"", ЗначениеОтбора);   
    ФормаВыбора = ПолучитьФорму(""Справочник.ДоговорыВзаиморасчетов.Форма.ФормаВыбораУправляемая"",ПараметрыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""Форма"", ЭтаФорма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(""ОбработатьДоговорыВзаиморасчетовПриВыборе"", ЭтаФорма, ДополнительныеПараметры);
	
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;	
	ФормаВыбора.Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	ФормаВыбора.Открыть();
	//Объект.ДоговорВзаиморасчетов = Форма.откр;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДоговорыВзаиморасчетовПриВыборе(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	Объект.ДоговорВзаиморасчетов = РезультатЗакрытия;	
	ДоговорВзаиморасчетовПриИзмененииНаСервере();
КонецПроцедуры //ОбработатьДоговорыВзаиморасчетовПриВыборе

//Ограничить тип
&НаКлиенте
Процедура ВыходноеИзделиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.ВыходноеИзделие) Тогда
	    Массив = Новый Массив;
	    Массив.Добавить(Тип(""СправочникСсылка.Автомобили""));
		Массив.Добавить(Тип(""СправочникСсылка.Модели""));
	    Элементы.ВыходноеИзделие.ОграничениеТипа = Новый ОписаниеТипов(Массив);	
		
		//ТипСтр = ""СправочникСсылка.Автомобили,СправочникСсылка.Модели"";
		//ОписаниеТипов = Новый ОписаниеТипов(ТипСтр);
		//Объект.ВыходноеИзделие = ОписаниеТипов.ПривестиЗначение(Объект.ВыходноеИзделие);	
	Конецесли;
КонецПроцедуры"}
},
{0,
{"НачалоВыборИзСписка",0,0,"","
&НаКлиенте
Процедура БазовыйВидРасчетаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПолучитьСписокВыбораНаСервере();
	НачальноеЗначение = СписокВыбора.НайтиПоЗначению(Запись.БазовыйВидРасчета);
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент.СписокВыбора, НачальноеЗначение); 
	Если ВыбранноеЗначение <> Неопределено Тогда
		Запись.БазовыйВидРасчета = ВыбранноеЗначение.Значение;
	Конецесли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораНаСервере() Экспорт
	СписокВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияОрганизацийБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ОсновныеНачисленияОрганизацийБазовыеВидыРасчета
	|ГДЕ
	|	ОсновныеНачисленияОрганизацийБазовыеВидыРасчета.Ссылка В(&МассивВидовРасчетаРКиСН)"";
	
	ВидРасчета_РайонныйКоэффициент = ПредопределенноеЗначение(""ПланВидовРасчета.ОсновныеНачисленияОрганизаций.РайонныйКоэффициент"");
	ВидРасчета_СевернаяНадбавка = ПредопределенноеЗначение(""ПланВидовРасчета.ОсновныеНачисленияОрганизаций.СевернаяНадбавка"");
	
	МассивВидовРасчетаРКиСН = Новый Массив();
	МассивВидовРасчетаРКиСН.Добавить(ВидРасчета_РайонныйКоэффициент);
	МассивВидовРасчетаРКиСН.Добавить(ВидРасчета_СевернаяНадбавка);
	
	Запрос.УстановитьПараметр(""МассивВидовРасчетаРКиСН"", МассивВидовРасчетаРКиСН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.БазовыйВидРасчета,Выборка.БазовыйВидРасчета);	
	КонецЦикла;

	СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	Возврат СписокВыбора;
КонецФункции //ПолучитьСписокВсехСправочниковНаСервере()"}
},
{0,
{"МодальныйВызовОкна",0,0,"","//+ SP 202 Иванов А.Б. 2014-02-20
&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить(""КурсВалютыВзаиморасчетов"",Объект.КурсВалютыВзаиморасчетов);
	СтруктураПараметров.Вставить(""ВалютаДокумента"",Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить(""КурсДокумента"",Объект.КурсДокумента);
	СтруктураПараметров.Вставить(""КурсВалютыУпр"",Объект.КурсВалютыУпр);
	СтруктураПараметров.Вставить(""ТипЦен"",Объект.ТипЦен);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""Форма"", ЭтаФорма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(""ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение"", ЭтаФорма, ДополнительныеПараметры);
	
	ОткрытьФорму(""ОбщаяФорма.фнмФормаЦеныИВалютаУправляемая"", СтруктураПараметров,,,,, ОповещениеОЗакрытии);

КонецПроцедуры
//- SP 202 Иванов А.Б. 2014-02-20

//+ SP 202 Иванов А.Б. 2014-02-20
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Сообщить(""ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение"");
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
КонецПроцедуры //ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение
//- SP 202 Иванов А.Б. 2014-02-20


&НаКлиенте
Процедура ДоговорВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    ЗначениеОтбора = Новый Структура(""Владелец"", Объект.Контрагент);
	ЗначениеОтбора.Вставить(""ВидДоговора"",ПолучитьСписокВидовДоговоровНаСервере());
	
	ПараметрыВыбора = Новый Структура(""Отбор"", ЗначениеОтбора);   
    ФормаВыбора = ПолучитьФорму(""Справочник.ДоговорыВзаиморасчетов.Форма.ФормаВыбораУправляемая"",ПараметрыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""Форма"", ЭтаФорма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(""ОбработатьДоговорыВзаиморасчетовПриВыборе"", ЭтаФорма, ДополнительныеПараметры);
	
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;	
	ФормаВыбора.Открыть();
	//Объект.ДоговорВзаиморасчетов = Форма.откр;
КонецПроцедуры
"}
},
{0,
{"ПривестиЗначение",0,0,"","&НаКлиенте
Процедура ОбъектСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ПолучитьТипСтрНаСервере();
    ТипСтр = ""ДокументСсылка.фнмЗаявкаНаЗакупку"";
    ОписаниеТипов = Новый ОписаниеТипов(ТипСтр);
    Объект.ОбъектСогласования = ОписаниеТипов.ПривестиЗначение(Объект.ОбъектСогласования);	
    Элемент.ВыбиратьТип = Ложь;
КонецПроцедуры
"}
},
{0,
{"СохранитьВосстановитьНастройки",0,0,"","//+ Иванов А.Б. 2014-03-26
Процедура ВосстановитьНастройкиДляПользователя() Экспорт
	КлючОбъекта = ПолучитьКлючОбъекта();
	КлючНастроек = ПолучитьКлючНастроек();	
	//ИмяПользователя = ПараметрыСеанса.ТекущийПользователь.Наименование; // указывается в том случае если необходимо получить настройки другого пользователя
	СтруктураНастроек = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек);	
	Если СтруктураНастроек.Свойство(""ТЧПодразделения"") Тогда
		ТЧПодразделения.Очистить();
		Для каждого СтрокаНастройкиТЧПодразделения из СтруктураНастроек.ТЧПодразделения цикл
			СтрокаТЧПодразделения = ТЧПодразделения.Добавить();			
			СтрокаТЧПодразделения.ПодразделениеОрганизации = СтрокаНастройкиТЧПодразделения.ПодразделениеОрганизации;
		Конеццикла;
	Конецесли;
	Если СтруктураНастроек.Свойство(""Период"") Тогда
		Период=СтруктураНастроек.Период;
	Конецесли;
КонецПроцедуры //ВосстановитьНастройкиПользователя()
//- Иванов А.Б. 2014-03-26

//+ Иванов А.Б. 2014-03-26
Процедура СохранитьНастройкиДляПользователя() Экспорт
	//СОХРАНЕНИЕ
	 
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить(""ТЧПодразделения"", ТЧПодразделения.Выгрузить());
	СтруктураНастроек.Вставить(""Период"", Период);

	//ИмяПользователя = ПараметрыСеанса.ТекущийПользователь.Наименование;
	КлючОбъекта = ПолучитьКлючОбъекта();
	КлючНастроек = ПолучитьКлючНастроек();
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастроек, СтруктураНастроек);
	
КонецПроцедуры //СохранитьНастройкиПользователя
//- Иванов А.Б. 2014-03-26

ХранилищеСистемныхНастроек.Удалить(КлючОбъекта,КлючОбъекта,Неопределено);

//+ Иванов А.Б. 2014-03-26
Функция ПолучитьКлючОбъекта() Экспорт 
	Возврат ""фнм_ЗагрузкаЗаявокНаРасходДС"";
КонецФункции //
//- Иванов А.Б. 2014-03-26

//+ Иванов А.Б. 2014-03-26
Функция ПолучитьКлючНастроек() Экспорт 
	Возврат ""фнм_ЗагрузкаЗаявокНаРасходДС_Отборы"";
КонецФункции //ПолучитьКлючНастроек()
//- Иванов А.Б. 2014-03-26
"}
},
{0,
{"ОтобразитьИзменениеДанных",0,0,"","ОтобразитьИзменениеДанных(объект.Реквизит1,ВидИзмененияДанных.Изменение);

ИЛИ

ОповеститьОбИзменении(объект.Реквизит1)"}
},
{0,
{"ЗакончитьРедактированиеСтроки",0,0,"","Элементы.Автомобили.ЗакончитьРедактированиеСтроки(Ложь);"}
},
{0,
{"ОтборыВСписках",0,0,"","//см. в ОткрытьФорму"}
},
{0,
{"ОтборВТабличнойЧасти",0,0,"","Элементы.ТЧЗадачиBacklog.ОтборСтрок = Новый ФиксированнаяСтруктура(""Статус"", ПредопределенноеЗначение(""Справочник.фнмСтатусыЗадачи.Backlog""));"}
},
{0,
{"ТекущаяСтрокаУстановка",0,0,"","&НаКлиенте
Процедура УстановитьКурсорНаПоследнююСтрокуВСоставеТехники() Экспорт
	ОбновитьОтображениеДанных();
	СоставТехники = Объект.СоставТехники[Объект.СоставТехники.Количество()-1];
	Элементы.СоставТехники.ТекущаяСтрока = СоставТехники.ПолучитьИдентификатор();	
КонецПроцедуры //УстановитьКурсорНаПоследнююСтрокуВСоставеТехники()
"}
},
{0,
{"Библиотека замены модальных и синхронных вызовов",0,0,"","#Область LibreUniModal_1_02


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ Библиотеки универсальных вызовов с автоматической поддержкой модальности
// Предназначены для простоты написания кода работающего в любой версии 8.2 - 8.3 с поддержкой модальности или без оной.
// Молочников Олег 2015г. Версия библиотеки 1.02
// Если Вы будете дорабатывать библиотеку, пожалуйста поделитесь исправлениями oleg.molochnikov@mail.ru
// 
// Для работы библиотеки необходимо добавить две переменные объекта
// МодальностьРазрешена Булево 
// ВерсияПриложения Строка
// 
// Следующий код нужно включить в процедуру ""При создании на сервере""
// 
// СисИнфо = Новый СистемнаяИнформация;
// Объект.ВерсияПриложения = СисИнфо.ВерсияПриложения;
// 
// Если Лев(Объект.ВерсияПриложения, 3) = ""8.2"" Тогда
// Объект.МодальностьРазрешена = Истина;
// Иначе
// Выполнить(""Объект.МодальностьРазрешена = Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать;"");
// КонецЕсли;
//

&НаКлиенте
Процедура УниверсальныйПредупреждение(ТекстПредупреждения,ТаймаутПредупреждения=0,ЗаголовокПредупреждения="""",КодПослеобработки="""",ДополнительныеПараметры="""")
	Если ТипЗнч(ДополнительныеПараметры) <> Тип(""Структура"") Тогда
		ДополнительныеПараметры=Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить(""КодПослеобработки"",КодПослеобработки);
	ДополнительныеПараметры.Вставить(""ТекстПредупреждения"",ТекстПредупреждения);
	
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		"" Предупреждение(ТекстПредупреждения,ТаймаутПредупреждения,ЗаголовокПредупреждения);
		| УниверсальныйПредупреждениеЗавершение(ДополнительныеПараметры);"";
	Иначе
		КодВыполнения = ""
		| ПоказатьПредупреждение(Новый ОписаниеОповещения(""""УниверсальныйПредупреждениеЗавершение"""", ЭтаФорма,ДополнительныеПараметры), ТекстПредупреждения,ТаймаутПредупреждения,ЗаголовокПредупреждения);"";
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры
&НаКлиенте
Процедура УниверсальныйПредупреждениеЗавершение(ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.Свойство(""КодПослеобработки"") И ДополнительныеПараметры.КодПослеобработки<>"""" Тогда
		Выполнить(ДополнительныеПараметры.КодПослеобработки);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УниверсальныйОткрытьЗначение(ОбъектОткрытия,КодПослеобработки="""",ДополнительныеПараметры="""")
	Если ДополнительныеПараметры="""" Тогда
		ДополнительныеПараметры=Новый Структура;
		ДополнительныеПараметры.Вставить(""КодПослеобработки"",КодПослеобработки);
		ДополнительныеПараметры.Вставить(""ОбъектОткрытия"",ОбъектОткрытия);
	КонецЕсли;
	
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		"" ОткрытьЗначение(ОбъектОткрытия);
		| УниверсальныйОткрытьЗначениеЗавершение(ДополнительныеПараметры);"";
	Иначе
		КодВыполнения = ""
		| ПоказатьЗначение(Новый ОписаниеОповещения(""""УниверсальныйОткрытьЗначениеЗавершение"""", ЭтаФорма,ДополнительныеПараметры), ОбъектОткрытия);""; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры
&НаКлиенте
Процедура УниверсальныйОткрытьЗначениеЗавершение(ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры="""" Тогда
		Возврат;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство(""КодПослеобработки"") И ДополнительныеПараметры.КодПослеобработки<>"""" Тогда
		Выполнить(ДополнительныеПараметры.КодПослеобработки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УниверсальныйЗапуститьПриложение(СтрокаКоманды,ТекущийКаталог="""",КодПослеобработки="""",ДополнительныеПараметры="""")
	Если ДополнительныеПараметры="""" Тогда
		ДополнительныеПараметры=Новый Структура;
		ДополнительныеПараметры.Вставить(""КодПослеобработки"",КодПослеобработки);
		ДополнительныеПараметры.Вставить(""ТекущийКаталог"",ТекущийКаталог);
	КонецЕсли;
	
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		"" ЗапуститьПриложение(СтрокаКоманды,ТекущийКаталог);
		| УниверсальныйЗапуститьПриложениеЗавершение(ДополнительныеПараметры);"";
	Иначе
		КодВыполнения = ""
		| НачатьЗапускПриложения(Новый ОписаниеОповещения(""""УниверсальныйЗапуститьПриложениеЗавершение"""", ЭтаФорма), СтрокаКоманды,ТекущийКаталог);""; 
	КонецЕсли;
	
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры
&НаКлиенте
Процедура УниверсальныйЗапуститьПриложениеЗавершение(ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) <> Тип(""Структура"") Тогда
		ДополнительныеПараметры=Новый Структура;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство(""КодПослеобработки"") И ДополнительныеПараметры.КодПослеобработки<>"""" Тогда
		Выполнить(ДополнительныеПараметры.КодПослеобработки);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УниверсальныйВыборФайлов(Режим,МодульОбработкиФайла,ПолноеИмяФайла="""",Фильтр=""*"",МножественныйВыбор=Ложь,Заголовок=""Выберите файл"",ДополнительныеПараметры="""")
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип(""Структура"") Тогда
		ДополнительныеПараметры=Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить(""МодульОбработкиФайла"",МодульОбработкиФайла);
	ДополнительныеПараметры.Вставить(""ПолноеИмяФайла"",ПолноеИмяФайла);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПолноеИмяФайла;
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = МножественныйВыбор;
	ДиалогОткрытияФайла.Заголовок = Заголовок;
	
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		""Если ДиалогОткрытияФайла.Выбрать() Тогда
		| УниверсальныйВыборФайловЗавершение(ДиалогОткрытияФайла.ВыбранныеФайлы, ДополнительныеПараметры);
		|КонецЕсли;"";
	Иначе
		КодВыполнения = ""
		|Оповещение = Новый ОписаниеОповещения(""""УниверсальныйВыборФайловЗавершение"""", ЭтаФорма,ДополнительныеПараметры);
		|ДиалогОткрытияФайла.Показать(Оповещение);""; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УниверсальныйВыборФайловЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы=Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого  ВыбранныйФайл из ВыбранныеФайлы Цикл
		Выполнить(ДополнительныеПараметры.МодульОбработкиФайла);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура УниверсальныйВопрос(ТекстВопроса,МодульОбработки1,РежимДиалогаВопроса,Ответ1,Ответ2="""", МодульОбработки2="""",ДополнительныеПараметры="""");
	Если ТипЗнч(ДополнительныеПараметры) <> Тип(""Структура"") Тогда
		ДополнительныеПараметры=Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить(""Ответ1"",Ответ1);
	ДополнительныеПараметры.Вставить(""Ответ2"",Ответ2);
	ДополнительныеПараметры.Вставить(""МодульОбработки1"",МодульОбработки1);
	ДополнительныеПараметры.Вставить(""МодульОбработки2"",МодульОбработки2);
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = ""
		|Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		|УниверсальныйВопросЗавершение(Результат, ДополнительныеПараметры);"";
	Иначе
		КодВыполнения = ""
		|Оповещение = Новый ОписаниеОповещения(""""УниверсальныйВопросЗавершение"""", ЭтаФорма,ДополнительныеПараметры);
		|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);""; 
	КонецЕсли;
	Выполнить(КодВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура УниверсальныйВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат=ДополнительныеПараметры.Ответ1 Тогда
		Выполнить(ДополнительныеПараметры.МодульОбработки1);
	ИначеЕсли ДополнительныеПараметры.МодульОбработки2<>"""" И Результат=ДополнительныеПараметры.Ответ2 Тогда	
		Выполнить(ДополнительныеПараметры.МодульОбработки2);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"РегистрСведенийЭтоНоваяЗапись",0,0,"","ЭтоНоваяЗапись = НЕ РеквизитФормыВЗначение(""Запись"").Выбран();"}
},
{0,
{"Программное добавление элементов",0,0,"","&НаКлиенте
Процедура Команда1(Команда)
	Команда1НаСервере();
КонецПроцедуры

&НаСервере
Процедура Команда1НаСервере() Экспорт
	ИмяРеквизитаСоставногоТипа = ""Реквизит1"";
	
	//пОписаниеТипа = Новый ОписаниеТипов(""СправочникСсылка.Номенклатура,СправочникСсылка.Контрагенты"");
	Массив=Новый Массив;
	Массив.Добавить(Тип(""Строка""));
	Массив.Добавить(Тип(""Число""));
	пОписаниеТиповСтроки = Новый ОписаниеТипов(Массив,,,Новый КвалификаторыЧисла(18,2) , ,Новый КвалификаторыСтроки(50));		
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаСоставногоТипа, пОписаниеТиповСтроки));
	ИзменитьРеквизиты(МассивРеквизитов);
	НовыйЭлемент = Элементы.Добавить(ИмяРеквизитаСоставногоТипа , Тип(""ПолеФормы""));
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.ПутьКДанным = ИмяРеквизитаСоставногоТипа;
	
КонецПроцедуры //Команда1НаСервере()"}
},
{0,
{"ВыборФайлаИлиКаталога",0,0,"","//http://infostart.ru/public/195003/

//Выбор каталога
&НаКлиенте
Процедура КаталогТранзитнойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок = НСтр(""ru = 'Выберите каталог транзитной базы'"");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения(""ОбработатьВыборКаталогаТранзитнойБазы"",ЭтотОбъект);
	ДиалогВыбораФайла.Показать (Оповещение);

КонецПроцедуры

&НаКлиенте 
Процедура ОбработатьВыборКаталогаТранзитнойБазы(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйКаталог = Неопределено Тогда
		Возврат;
	Конецесли;
	Объект.КаталогТранзитнойБазы = ВыбранныйКаталог[0];
КонецПроцедуры


//Выбор файла через НачатьПомещениеФайлов
&НаКлиенте
Процедура Приложения1сНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения(""ОбработатьВыборПриложение1с"",ЭтаФорма);
	
	НачатьПомещениеФайла(Оповещение,,, Истина, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПриложение1с(РезультаВыбора, Адрес, ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	Если РезультаВыбора = Неопределено Тогда
		Возврат;
	Конецесли;
	
	Объект.Приложение1с = ВыбранноеИмяФайла;
КонецПроцедуры "}
}
},
{1,
{"Консолидация",1,0,"",""},
{0,
{"ПолучениеЗначениеПараметраВнешнейИБЧерезСОМ",0,0,"","ЭкземпляОтчетаОбъект = ЭкземплярОтчета.ПолучитьОбъект();

ВнешняяБаза = ЭкземпляОтчетаОбъект.ИспользуемаяИБ;	
База = ОбщегоНазначения.ПолучитьСоединение (глТаблицаПодключений, ВнешняяБаза, 1);
пфнмКодДляСинхронизации = ЭкземпляОтчетаОбъект.Организация.фнмОрганизация.фнмКодДляСинхронизации;
ОрганизацияCOM = База.Справочники.Организации.НайтиПоРеквизиту(""фнмКодДляСинхронизации"",пфнмКодДляСинхронизации); 
ЗначениеПараметра = ОрганизацияCOM;
Сообщить(""ЗначениеПараметра ""+ЗначениеПараметра.Наименование);
"}
}
},
{0,
{"ТЗ.Колонки.Добавить",0,1,"","ТЗ.Колонки.Добавить(""Номенклатура"",ОписаниеТипов)
Новый ОписаниеТипов(""СправочникСсылка.Номенклатура"")
Новый ОписаниеТипов(""Число"")
Новый ОписаниеТипов(""СправочникСсылка.Номенклатура,СправочникСсылка.МестаХранения"")

Массив=Новый Массив;
Массив.Добавить(Тип(""Строка""));
ОписаниеТиповСтроки = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыСтроки(12));	
ТЗ_ТСД.Колонки.Добавить(""Штрихкод"",ОписаниеТиповСтроки);
"}
},
{0,
{"ТабДокумент.Выдача",0,1,"","Макет = ПолучитьМакет(""Макет"");
ЗаголовокМакета="""";
ВидДокумента="""";
ОбластьМакета = Макет.ПолучитьОбласть(""Шапка"");
ТабДокумент = Новый ТабличныйДокумент();	
ОбластьМакета.Параметры.ТекстПериода = ПредставлениеПериода(НачалоМесяца(ДатаНач), КонецМесяца(ДатаКон), ""ФП = Истина"");	
ТабДокумент.Вывести(ОбластьМакета);			  
для каждого СтрокаТЧ из ТЗ цикл
	ОбластьМакета = Макет.ПолучитьОбласть(""Строка"");
	ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
	ТабДокумент.Вывести(ОбластьМакета);			  
конеццикла;


ТабДокумент.ОтображатьЗаголовки = Ложь;
ТабДокумент.ОтображатьСетку = Ложь;
ТабДокумент.ТолькоПросмотр = Истина;	
ТабДокумент.ИмяСохраненияПоложенияОкна=""""+ПараметрыСеанса.ТекущийПользователь+ВидДокумента;
ТабДокумент.Показать(ЗаголовокМакета);


//Сгруппировать колонки в таб документе
ОбластьЯчеек = ТабДокумент.Область(""C2"");
ОбластьЯчеек.Сгруппировать(""Счет МСФО"",РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);"}
},
{0,
{"ВыборПериода",0,1,"","Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ДатаНач = НачалоДня(НастройкаПериода.ПолучитьДатуНачала());
	ДатаКон = КонецДня(НастройкаПериода.ПолучитьДатуОкончания());
КонецПроцедуры
"}
},
{0,
{"ОтборВТЧ",0,1,"","Отбор=ЭлементыФормы[ИмяТЧ].ОтборСтрок;
ОтборПоОборудованию=Отбор.Оборудование;
ОтборПоОборудованию.Значение=пОборудование;
ОтборПоОборудованию.Использование=Истина;


Отбор=ЭлементыФормы.ПринятыеКУчетуОС.ОтборСтрок;
Отбор.ДокументПринятияКУчету.Значение = ?(ДокументОтбор=Неопределено, Документы.ПринятиеКУчетуОС.ПустаяСсылка(),ДокументОтбор);
Отбор.ДокументПринятияКУчету.Использование=Истина;


//Для упр.формы
	
Элементы.ТЧДляОтбора.ОтборСтрок = Новый ФиксированнаяСтруктура(""КлючСтроки"", КлючСтроки);  
	"}
},
{0,
{"НачалоВыбора",0,1,"","СтандартнаяОбработка = Ложь;	
ФормаВыбора = Справочники.Смены.ПолучитьФормуВыбора(, Элемент);
ФормаВыбора.РежимВыбора = Истина;	
ОтборПоСсылке=ФормаВыбора.Отбор.Ссылка;
ОтборПоСсылке.ВидСравнения=ВидСравнения.ВСписке;
ОтборПоСсылке.Значение=СписокСмен;
ОтборПоСсылке.Использование=Истина;
ФормаВыбора.Открыть();

Процедура НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ФормаВыбора = Документы.ПланПроизводства.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ФормаВыбора.Отбор.Подразделение.Имя].Доступность = Ложь;		
	ФормаВыбора.Отбор.Подразделение.Установить(Подразделение, Истина);
	ФормаВыбора.Отбор.Дата.ЗначениеС=ДобавитьМесяц(НачалоМесяца(Дата),-2);
	ФормаВыбора.Отбор.Дата.ЗначениеПо=КонецМесяца(Дата);
	ФормаВыбора.Отбор.Дата.Использование=Истина;
	ФормаВыбора.Отбор.ПометкаУдаления.Установить(Ложь, Истина);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока=Элемент.Значение;
ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
ЭлементыФормы.СправочникСписок.НастройкаОтбора.ЭтоГруппа.Доступность= Истина;
"}
},
{0,
{"ВыборИзСписка",0,0,"","Процедура НоменклатураСтараяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокВыбора = Новый СписокЗначений();
	Для каждого СтрокаНС из НайденныеСтроки цикл
		СписокВыбора.Добавить(СтрокаНС.ТехнологическаяОперация);
	конеццикла;
	Элемент.СписокВыбора = СписокВыбора;

КонецПроцедуры


"}
},
{0,
{"ПривестиЗначение",0,1,"","ОписаниеТипа=Новый ОписаниеТипов(""ДокументСсылка.ПланЗакупок"");
ЭлементыФормы.ДокументОснование.Значение=ОписаниеТипа.ПривестиЗначение(ЭлементыФормы.ДокументОснование.Значение);
ЭлементыФормы.ДокументОснование.ВыбиратьТип = Ложь;


СтатусЭлементУправления = Элемент;			
ТипСтр = ""ПеречислениеСсылка.СостоянияСобытий"";
СтатусЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(ТипСтр);
СтатусЭлементУправления.Значение = СтатусЭлементУправления.ОграничениеТипа.ПривестиЗначение(СтатусЭлементУправления.Значение);
СтатусЭлементУправления.ВыбиратьТип = Ложь;	"}
},
{0,
{"ОтборВЗапросе",0,1,"","Если ЗначениеЗаполнено(Подразделение) и Подразделение<> Справочники.Подразделения.ПустаяСсылка() тогда
	Запрос.Текст=СтрЗаменить(Запрос.Текст,""//ОтборПоПодразделению"","""");		
	Запрос.УстановитьПараметр(""Подразделение"",Подразделение);
конецесли;
"}
},
{0,
{"ОформлениеСтроки",0,0,"","Процедура ТЧКомпьютернаяТехникаПриПолученииДанных(Элемент, ОформленияСтрок)	
	Для каждого ЭлемОформления из ОформленияСтрок цикл
		ЭлемОформления.Ячейки.ДоменноеИмя.Значение=ЭлемОформления.Ячейки.КомпьютернаяТехника.Значение.ДоменноеИмя;
		флЖирный=ЭлемОформления.ДанныеСтроки.рздПартнер;
		ЭлемОформления.Шрифт=Новый Шрифт(,,флЖирный);
	конеццикла;
КонецПроцедуры
"}
},
{0,
{"ВыборФайла",0,0,"","Процедура ПутьДоФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = ""Выберите фай"";
	Диалог.Фильтр=""(*.xlsx)|*.xlsx"";
	//Диалог.ПолноеИмяФайла = ФайлСоответстствия;	
	Если Диалог.Выбрать() Тогда
		ИмяФайла=Диалог.ПолноеИмяФайла;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ВыборФайла(ПроверятьСуществование=Ложь)
	ИмяФайлаДанныхКлиент = Объект.ИмяФайлаДанныхКлиент;	
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	""Файл данных (*.xml)|*.xml"";
	ДиалогФыбораФайла.Заголовок						=	""Выберите файл"";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	""xml"";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	ИмяФайлаДанныхКлиент;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Ложь;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Объект.ИмяФайлаДанныхКлиент = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"РаботаСТХТ",0,0,"","Процедура Кнопка1Нажатие(Элемент)
   Путь = ""c:\test.txt""; 
   Текст = Новый ЗаписьТекста(Путь, КодировкаТекста.UTF8); 
   Выборка = Справочники.Номенклатура.Выбрать(); 

   Пока Выборка.Следующий() Цикл 
      Текст.ЗаписатьСтроку(Выборка.Наименование); 
   КонецЦикла;

   Текст.Закрыть(); 
      
   //Путь = ""c:\test.txt""; 
   Текст = Новый ЧтениеТекста(Путь, КодировкаТекста.UTF8); 
   Строка = Текст.ПрочитатьСтроку(); 

   Пока Строка <> Неопределено Цикл 
       Строка = Текст.ПрочитатьСтроку(); 
       Сообщить(Строка); 
   КонецЦикла; 
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)
   Текст = Новый ТекстовыйДокумент; 
   Текст.Прочитать(""c:\test.txt""); 

   Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл 
      Стр = Текст.ПолучитьСтроку(НомерСтроки); 
      Позиция = Найти(Стр, Символ(34)); 
      Код = Сред(Стр, 1, Позиция-1); 
      прНаименование = Сред(Стр, Позиция + 1); 
      Наименование = СтрЗаменить(прНаименование, ""%квч%"", Символ(34)); 

      Сообщить(Код + ""-"" + Наименование); 
   КонецЦикла; 
КонецПроцедуры"}
},
{0,
{"Кол-во экземпляров",0,0,"","ТабДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
 
 ТабДокумент.ОбластьПечати = ТабДокумент.Области.Заголовок;"}
},
{0,
{"Инициализировать",0,0,"","Процедура Инициализировать(Объект, ИмяТабличнойЧасти="""", ТабличноеПолеОбъекта="""") Экспорт 	
	ПрочиеЗатраты=Объект.ПрочиеЗатраты;
	ПрочиеЗатраты.Свернуть(""СтатьяЗатрат,Заказ,МодельНУостатковНЗП,НоменклатурнаяГруппа,СпособРаспределенияЗатратНаВыпуск,СчетЗатрат,СчетЗатратНУ,ПодразделениеНЗП,ПодразделениеОрганизацииНЗП,ВидВыпуска"",""Сумма,СуммаРегл,СуммаНал"");		
	Для каждого стрПрочаяЗатрата из ПрочиеЗатраты цикл
		стрПрочаяЗатрата.СуммаНал=ПолучитьОстатокПрочихЗатрат(Объект,стрПрочаяЗатрата.СтатьяЗатрат);
	конеццикла;	
конецпроцедуры
Функция Печать() Экспорт
конецфункции
Процедура Инициализировать(Объект, ИмяТабличнойЧасти="""", ТабличноеПолеОбъекта="""") Экспорт 
	ФормаДок=ЭтотОбъект.ПолучитьФорму();	
	ФормаДок.ДокОбъект=Объект;
	ФормаДок.ФормаДокОбъект=Объект.ПолучитьФорму();
	ФормаДок.Открыть();	
конецпроцедуры
"}
},
{0,
{"СортировкаВСписке",0,0,"","ЭлементУП = ЭлементыФормы.СправочникСписок.НастройкаПорядка.Найти(""ФизЛицо"");
Если ЭлементУП <> Неопределено Тогда
	ЭлементУП.Доступность = Истина; 
КонецЕсли;	

ЭлементУП = ЭлементыФормы.ДокументСписок.НастройкаПорядка.Найти(""ВидЗадания"");
Если ЭлементУП <> Неопределено Тогда
	ЭлементУП.Доступность = Истина; 
КонецЕсли;
ЭлементУП = ЭлементыФормы.ДокументСписок.НастройкаПорядка.Найти(""Оборудование"");
Если ЭлементУП <> Неопределено Тогда
	ЭлементУП.Доступность = Истина; 
КонецЕсли;	
ДокументСписок.Порядок.Установить(""Дата,ВидЗадания,Оборудование""); 
"}
},
{0,
{"ФиксацияВТЧ",0,0,"","Элемент.ФиксацияСлева = 0 + Элемент.Колонки.НомерСтроки.Видимость
		+ Элемент.Колонки.ТабельныйНомерСтрока.Видимость
		+ Элемент.Колонки.Сотрудник.Видимость
		+ Элемент.Колонки.Итого.Видимость;
"}
},
{0,
{"ПодвалВТЧ",0,0,"","Колонка=ЭлементыФормы[ИмяТЧ].Колонки.ЗаданиеНаРаскрой;
Колонка.ТекстПодвала=""Кол-во заданий: ""+ТЧ.Количество();
Колонка.Видимость=Истина; 	

Колонка=ЭлементыФормы[ИмяТЧ].Колонки.КВыпуску;
Колонка.ТекстПодвала=Формат(ТЧ.Итог(""КВыпуску""),""ЧДЦ=3"");
Колонка.Видимость=Истина; 


ЭлементыФормы.Начисления.Колонки.Показатель1.ТекстПодвала=Формат(ДокументОбъект.Начисления.Итог(""Показатель1""),""ЧДЦ=2"");
ЭлементыФормы.Начисления.Колонки.Показатель1.Видимость=Истина;

//Обновляет числовые показатели в подвале ТЧ, для отбора

Процедура ОбновитьПодвалВТЧ(ТЧ,ОтборСтрок,ИмяТЧ)
	ТЗ=ПолучитьТЗСОтборовВТЧ(ТЧ,ОтборСтрок);
	#Если Тромбон тогда
		ТЗ=Новый ТаблицаЗначений;
	#Конецесли
	СтрокаСуммирования="""";
	ТипЧисло=Тип(""Число"");
	МассивКолонок=Новый Массив();
	Для каждого Колонка из ТЗ.Колонки цикл
		Если Колонка.ТипЗначения.СодержитТип(ТипЧисло) Тогда
			СтрокаСуммирования=СтрокаСуммирования+"",""+Колонка.Имя;
			МассивКолонок.Добавить(Колонка.Имя);
		Конецесли;
	Конеццикла;
	ТЗ.Свернуть("""",СтрокаСуммирования);
	
	Для каждого ЭлМассива из МассивКолонок цикл
		Если ТЗ.Количество() = 0 Тогда
			ТекстПодвала="""";
		Иначе
			ТекстПодвала=ТЗ[0][ЭлМассива];
		Конецесли;
		ЭлементыФормы[ИмяТЧ].Колонки[ЭлМассива].ТекстПодвала=ТекстПодвала;	
		ЭлементыФормы[ИмяТЧ].Колонки[ЭлМассива].ГоризонтальноеПоложениеВПодвале=ГоризонтальноеПоложение.Право;
	Конеццикла;
Конецпроцедуры

"}
},
{0,
{"РасчетПодвала",0,0,"","Процедура РасчетПодвала(ИмяТЧ,ИтогиПоКолонкам)
	Отбор=ЭлементыФормы[ИмяТЧ].ОтборСтрок;
	ПараметрыОтбора=Новый Структура();
	Для каждого ЭлементОтбора из Отбор цикл
		Если ЭлементОтбора.Использование Тогда
			ПараметрыОтбора.Вставить(ЭлементОтбора.Имя,ЭлементОтбора.Значение);
		Конецесли;
	Конеццикла;
	Если ПараметрыОтбора.Количество()>0 Тогда
		НайденныеСтроки=ЭтотОбъект[ИмяТЧ].НайтиСтроки(ПараметрыОтбора);
		ТЗИзМассива=ПолучитьТЗИзМассива(НайденныеСтроки , ИмяТЧ);
	Иначе
		ТЗИзМассива=ЭтотОбъект[ИмяТЧ];
	Конецесли;	
	
	Для каждого ИмяКолонки из ИтогиПоКолонкам цикл
		ЭлементыФормы[ИмяТЧ].Колонки[ИмяКолонки].ТекстПодвала=Формат(ТЗИзМассива.Итог(ИмяКолонки),""ЧДЦ=2"");
	Конеццикла;	
Конецпроцедуры
"}
},
{0,
{"ЗапросSQL",0,0,"","
Функция ЗапросSQL(ТекстSQL)   //Функция выборки данных из SQL сервера и передача во временную таблицу 1С

	СтрокаСоединения = (""Provider=SQLOLEDB;Driver={SQL Server}; Deleted=No; Data Source = "") + ""a05-sql\Gemo"" +""; DATABASE=""+""Gemo""+ 
	("";UID="") + ""sa"" + (""; PWD="") + ""gemo"" + ("";"");
	           
	Подключение = Новый ComObject(""ADODB.Connection"");
	Подключение.ConnectionString=СтрокаСоединения;
	КолвоПопыток=3;
	ТекПопытка=1;
	//Пока ТекПопытка <= КолвоПопыток цикл
		Попытка
			Подключение.Open(СтрокаСоединения);
			//Прервать;
		Исключение
			Сообщить(ОписаниеОшибки());
			
			Возврат Ложь;
		КонецПопытки;		
		ТекПопытка=ТекПопытка+1;
	//конеццикла;
	Если ТекПопытка>КолвоПопыток тогда
		Возврат Ложь;	
	конецесли;
	СоединениеSQL = Новый COMObject(""ADODB.Command"");
	СоединениеSQL.ActiveConnection = Подключение;
	СоединениеSQL.NamedParameters = True;
	СоединениеSQL.CommandText = ТекстSQL;
	СоединениеSQL.CommandType = 1;
	//СоединениеSQL.Prepared = Истина;

	//Param1 = СоединениеSQL.CreateParameter(""n"",3,1,1,1);
	//СоединениеSQL.Parameters.Append(Param1);

	//Param2 = СоединениеSQL.CreateParameter(""ДатаПриходаС"",200,1,8,Формат(НачалоПериода,""ДФ=ггггММдд""));//Формат(НачалоПериода,""ДФ=ггггММдд""));
	//СоединениеSQL.Parameters.Append(Param2);

	//Param3 = СоединениеSQL.CreateParameter(""ДатаПриходаПо"",200,1,8,Формат(КонецПериода,""ДФ=ггггММдд""));
	//СоединениеSQL.Parameters.Append(Param3);

	//СоединениеSQL.Parameters.Refresh();

	//Состояние (""Выполнение запроса SQL..."");
	ЗаписиSQL = Новый ComObject(""ADODB.RecordSet"");
    Попытка 
		ЗаписиSQL = СоединениеSQL.Execute();
	исключение
		Возврат Ложь;
	конецпопытки;


	Таблица = Новый ТаблицаЗначений;
	//Состояние (""Заполнение временной таблицы..."");
	Для НомерСтолбца = 0 По ЗаписиSQL.Fields.Count-1 Цикл //Создание и добавление колонок во временную таблицу
		ИмяСтолбца =ЗаписиSQL.Fields.Item(НомерСтолбца).Name; 
		Таблица.Колонки.Добавить(ИмяСтолбца);
		//Сообщить(ИмяСтолбца);
	КонецЦикла;


	Пока ЗаписиSQL.EOF = 0 Цикл // Заполнение созданной таблицы
		НоваяСтрока =  Таблица.Добавить();
		Для НомерСтолбца = 0 По ЗаписиSQL.Fields.Count-1 Цикл
			НоваяСтрока.Установить(НомерСтолбца,ЗаписиSQL.Fields(НомерСтолбца).Value);
			//Сообщить (""Test "" + ЗаписиSQL.Fields(ИмяСтолбца).Value + ИмяСтолбца);
		КонецЦикла;
		ЗаписиSQL.MoveNext();
	КонецЦикла;
   
	//Состояние (""Закрываем соединение с SQL..."");
	ЗаписиSQL.Close();
	Подключение.Close();

	Возврат Таблица;   // Возврат таблицы значений запроса SQL

КонецФункции

"}
},
{0,
{"#Если",0,0,"#","#Если Тромбон тогда
	ДокОбъект = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
#Конецесли"}
},
{0,
{"ВидСравнения",0,0,"","Функция ПолучитьУсловие(ОтборПоПолю,ВидСравнения)
	ТекстОтбора="""";
	Если ВидСравнения=ВидСравненияКомпоновкиДанных.Равно тогда
		ТекстОтбора="" И ""+ОтборПоПолю+""=&""+ОтборПоПолю+"" "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно тогда
		ТекстОтбора="" И НЕ ""+ОтборПоПолю+""=&""+ОтборПоПолю+"" "";			
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" В ИЕРАРХИИ (&""+ОтборПоПолю+"") "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" В (&""+ОтборПоПолю+"") "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" В ИЕРАРХИИ (&""+ОтборПоПолю+"") "";					
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Больше тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" > &""+ОтборПоПолю+"" "";								
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" >= &""+ОтборПоПолю+"" "";										
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" < &""+ОтборПоПолю+"" "";										
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно тогда
		ТекстОтбора="" И ""+ОтборПоПолю+"" <= &""+ОтборПоПолю+"" "";										
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии тогда
		ТекстОтбора="" И ""+ОтборПоПолю+""НЕ В ИЕРАРХИИ (&""+ОтборПоПолю+"") "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке тогда
		ТекстОтбора="" И ""+ОтборПоПолю+""НЕ В (&""+ОтборПоПолю+"") "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
		ТекстОтбора="" И ""+ОтборПоПолю+""НЕ В ИЕРАРХИИ(&""+ОтборПоПолю+"") "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит тогда
		ТекстОтбора="" И ""+ОтборПоПолю+""ПОДОБНО %""+ОтборПоПолю+""% "";
	ИначеЕсли ВидСравнения=ВидСравненияКомпоновкиДанных.НеСодержит тогда
		ТекстОтбора="" И ""+ОтборПоПолю+""НЕ ПОДОБНО %""+ОтборПоПолю+""% "";
	Иначе
		ТекстОтбора="""";	
	конецесли;	
	
	Возврат ТекстОтбора;
Конецфункции
"}
},
{0,
{"РегистрСведений и редактирование одной записи",0,0,"","НаборЗаписей = РегистрыСведений.алмазШтрихКодыСотрудников.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Сотрудник.Установить(СсылкаНаОбъект);
НаборЗаписей.Прочитать();
Запись = НаборЗаписей.Добавить();
Запись.Период = НачалоМесяца(ТекущаяДата());
Запись.Активность = Истина;
Запись.Сотрудник = СсылкаНаОбъект;
Запись.ШтрихКод = ШтрихКод;
НаборЗаписей.Записать();

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Для каждого СтрокаАвтомобили из ЗаявкаНаБронирования.Автомобили цикл
		НаДату = НачалоДня(СтрокаАвтомобили.ДатаОкончанияБронирования);
		
		пПараметрыОтбора = Новый Структура();
		пПараметрыОтбора.Вставить(""ХарактеристикаНоменклатуры"",СтрокаАвтомобили.ХарактеристикаНоменклатуры);
		Выборка = РегистрыСведений.фнмБронированиеАвтомобилей.Выбрать(НаДату,,пПараметрыОтбора ,""Возр"");
		Пока Выборка.Следующий() Цикл
			Запись = Выборка.ПолучитьМенеджерЗаписи();
			Запись.Прочитать();
			Если ЗаявкаНаБронирования.ПроцентПредоплаты <> 0 Тогда
				Запись.Период = СтрокаАвтомобили.ДатаОкончанияБронирования + 3600*24*365*3;
			Иначе
				Запись.Период = СтрокаАвтомобили.ДатаОкончанияБронирования;
			Конецесли;
			Запись.Записать();
		Конеццикла;
	Конеццикла;
КонецПроцедуры


"}
},
{0,
{"ТекДанные",0,0,"Тек[Данные]","Строка<?""ИмяЭлемента""> = ЭлементыФормы.<?""ИмяЭлемента"">.ТекущиеДанные;	
Если Строка<?""ИмяЭлемента""> = Неопределено тогда
	Возврат;	
Конецесли;	

<?>"}
},
{0,
{"ТекДанныеУпр",0,0,"Тек[у]","Строка<?""ИмяЭлемента""> = Элементы.<?""ИмяЭлемента"">.ТекущиеДанные;	
Если Строка<?""ИмяЭлемента""> = Неопределено тогда
	Возврат;	
Конецесли;	

<?>"}
},
{0,
{"ПрограммноеСозданиеЭлементов",0,0,"","ИндексКЕ = ЭлементыФормы.Товары.Колонки.Индекс(ЭлементыФормы.Товары.Колонки.ХарактеристикаНоменклатуры);

рздКолонка = ЭлементыФормы.Товары.Колонки.Вставить(ИндексКЕ+1, ""Качество"");
рздКолонка.Имя = ""рздКачество"";
рздКолонка.Данные = ""рздКачество"";
рздКолонка.УстановитьЭлементУправления(Тип(""ПолеВвода""));
рздКолонка.ЭлементУправления.КнопкаВыбора = Истина;
рздКолонка.ЭлементУправления.КнопкаОткрытия = Истина;


//+ Раздолье Малышев Д.А. 2013-11-07
ЭлементыФормы.Материалы.Колонки.ФизЛицо.ЭлементУправления.УстановитьДействие(""НачалоВыбора"", Новый Действие(""рздМатериалыФизЛицоНачалоВыбора""));
ЭлементыФормы.Материалы.Колонки.ФизЛицо.ЭлементУправления.УстановитьДействие(""ОбработкаВыбора"", Новый Действие(""рздМатериалыФизЛицоОбработкаВыбора""));
ЭлементыФормы.Материалы.Колонки.ФизЛицо.ЭлементУправления.УстановитьДействие(""АвтоПодборТекста"", Новый Действие(""рздМатериалыФизЛицоАвтоПодборТекста""));
ЭлементыФормы.Материалы.Колонки.ФизЛицо.ЭлементУправления.УстановитьДействие(""ОкончаниеВводаТекста"", Новый Действие(""рздМатериалыФизЛицоОкончаниеВводаТекста""));
//- Раздолье Малышев Д.А. 2013-11-07



КнопкаЦелое = ЭлементыФормы.Добавить(Тип(""Кнопка""), ""БлюдоЦелое"" +ТекИдЭлемента, Истина);
	КнопкаЦелое.ЦветФонаКнопки = МФонНеНажатойКнопки;
	КнопкаЦелое.Заголовок = ""1"";
	КнопкаЦелое.Шрифт = ШрифтКнопки;
	КнопкаЦелое.Верх = ТекВерх;
	КнопкаЦелое.Лево = ТекЛево+Надпись.Ширина;
	КнопкаЦелое.Ширина = Надпись.Высота;
	КнопкаЦелое.Высота = Надпись.Высота;
	Действие = Новый Действие(""РеакцияНаНажатие"");
	КнопкаЦелое.УстановитьДействие(""Нажатие"", Действие);	

	// Создание колонки
	Колонка=ЭлементыФормы.СоставПлана.Колонки.Добавить(ИмяКолонки,СинонимКолонки);
	Колонка.УстановитьЭлементУправления(Тип(""ПолеВвода""));
	Колонка.ЭлементУправления.ТипЗначения=Новый ОписаниеТипов(""Дата"", Новый КвалификаторыДаты());
	
	Колонка=ЭлементыФормы.СоставПлана.Колонки.Найти(мИмяКолонкиПодразделение+СтрокаТЧ.НомерСтрокиПодразделение);
	Действие = Новый Действие(""ПодразделениеДатаЗапускаПриИзменении"");
	Колонка.ЭлементУправления.УстановитьДействие(""ПриИзменении"", Действие);		
	
		рздКнопкиПодменюЗаполнить=ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
	ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
	рздКнопкиПодменюЗаполнить.Добавить(""рздВводПалетРулонов"", ТипКнопки,""Ввод палет/рулонов"" , Новый Действие(""рздВводПалетРулонов""));	"}
},
{0,
{"OLE и COM ",0,0,"","Перем Соединение Экспорт;

Процедура УстановитьСоединение(СтрокаСоединения, ИДОбъекта) Экспорт
	Если СокрЛП(СтрокаСоединения) = """" тогда
		ВызватьИсключение(""Не заполнена строка соединения!"");
	КонецЕсли;	
	
	Если СокрЛП(ИДОбъекта) = """" тогда
		ВызватьИсключение(""Не указан идентификатор СОМ объекта!"");
	КонецЕсли;
	
	Если Соединение <> Null тогда
		Сообщить(""Соединение с информационной базой уже установлено"", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;	
	
	COMОбъект = Новый COMОбъект(ИДОбъекта);
	
	Если ИДОбъекта = ""V82.Application"" Тогда
		COMОбъект.Connect(СтрокаСоединения);
		Соединение = COMОбъект;
	Иначе
		Соединение = COMОбъект.Connect(СтрокаСоединения);
	КонецЕсли;
		
КонецПроцедуры
Процедура ПроверитьСоединение() Экспорт
	Если Соединение = Null тогда
		ВызватьИсключение(""Соединение с информационной базой не установлено!"");
	КонецЕсли;	
КонецПроцедуры

//Тело модуля
Соединение = Null;




////// на ФОРМЕ
Процедура КнопкаПодключитьсяНажатие(Элемент)
	Если ПереключательТипСоединения=1 тогда
		ИДСОМ = ""V82.Application""; 
	Иначе
		ИДСОМ = ""V82.ComConnector""; 
	КонецЕсли;
	
	СтрокаСоединения = """";
	Если ПереключательТипБазы=1 тогда
		СтрокаСоединения = ""Srvr=""""""+СокрЛП(СерверИБ)+"""""";Ref=""""""+СокрЛП(ИмяИБ)+"""""";Usr=""""""+ИмяПользователя+"""""";Pwd=""""""+Пароль+"""""""";
	Иначе	
		СтрокаСоединения = ""File="""""" + ПутьКбазе + """""";Usr=""""""+ИмяПользователя+"""""";Pwd=""""""+Пароль+"""""""";
	КонецЕсли;	
	
	Если ВинАвторизация Тогда
		СтрокаСоединения = ""Srvr=""""""+СокрЛП(СерверИБ)+"""""";Ref=""""""+СокрЛП(ИмяИБ)+"""""" "";
	КонецЕсли;
		
	ЭтотОбъект.УстановитьСоединение(СтрокаСоединения, ИДСОМ);
КонецПроцедуры
Процедура ОтключитьИБ(Элемент)
	Если Вопрос(""Отключить БД?"",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Соединение = Null;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ОбновитьНадписи();
КонецПроцедуры
Процедура ОбновитьНадписи()"}
},
{0,
{"ПредставлениеМесяца",0,0,"","	НомерМесяца=Месяц(НаДату);
	МесяцГод="""";
	Если НомерМесяца=1 Тогда МесяцГод=""Январь""; Конецесли;
	Если НомерМесяца=2 Тогда МесяцГод=""Февраль"" Конецесли;
	Если НомерМесяца=3 Тогда МесяцГод=""Март"" Конецесли;
	Если НомерМесяца=4 Тогда МесяцГод=""Апрель"" Конецесли;
	Если НомерМесяца=5 Тогда МесяцГод=""Май"" Конецесли;
	Если НомерМесяца=6 Тогда МесяцГод=""Июнь"" Конецесли;
	Если НомерМесяца=7 Тогда МесяцГод=""Июль"" Конецесли;
	Если НомерМесяца=8 Тогда МесяцГод=""Август"" Конецесли;
	Если НомерМесяца=9 Тогда МесяцГод=""Сентябрь"" Конецесли;
	Если НомерМесяца=10 Тогда МесяцГод=""Октябрь"" Конецесли;
	Если НомерМесяца=11 Тогда МесяцГод=""Ноябрь"" Конецесли;
	Если НомерМесяца=12 Тогда МесяцГод=""Декабрь"" Конецесли;
	МесяцГод=МесяцГод+"" ""+Год(НаДату);
	Возврат МесяцГод;
"}
},
{0,
{"ТекущийПользователь",0,0,"Текп","ТекПользователь = глЗначениеПеременной(""глТекущийПользователь"");
<?>"}
},
{0,
{"СписокЗначенийВРеквизитеФормы",0,0,"","Процедура УстановитьТипЗначения(ВыбранныйВидСравнения,НазваниеЭлементаФормы,ТипЗначения)
	Если ВыбранныйВидСравнения=ВидСравнения.ВСписке 
		ИЛИ ВыбранныйВидСравнения=ВидСравнения.ВСпискеПоИерархии Тогда
		СтароеЗначение=ЭлементыФормы[НазваниеЭлементаФормы].Значение;
		ЭлементыФормы[НазваниеЭлементаФормы].ТипЗначения=Новый ОписаниеТипов(""СписокЗначений"");
		ЭлементыФормы[НазваниеЭлементаФормы].ТипЗначенияСписка=Новый ОписаниеТипов(ТипЗначения);
		ЭлементыФормы[НазваниеЭлементаФормы].Значение.Добавить(СтароеЗначение);
	иначе
		Если ТипЗнч(ЭлементыФормы[НазваниеЭлементаФормы].Значение) = Тип(""СписокЗначений"") Тогда
			СтароеЗначение=ЭлементыФормы[НазваниеЭлементаФормы].Значение[0].Значение;
		КонецЕсли;		
		ЭлементыФормы[НазваниеЭлементаФормы].ТипЗначения=Новый ОписаниеТипов(ТипЗначения);
		ЭлементыФормы[НазваниеЭлементаФормы].Значение= СтароеЗначение;
	Конецесли;
конецпроцедуры
УстановитьТипЗначения(ВидСравненияПодразделение,""Подразделение"",""СправочникСсылка.Подразделения"");"}
},
{0,
{"СохранитьВосстановитьЗначения",0,0,"","СохранитьЗначение(""""+ТекПользователь.Ссылка.УникальныйИдентификатор()+""РеестрДокументов.ЭлементыФормы.Склад.Значение"",ЭлементыФормы.Склад.Значение);
ВосстановитьЗначение(""""+ТекПользователь.Ссылка.УникальныйИдентификатор()+""РеестрДокументов.ЭлементыФормы.Склад.Значение"");"}
},
{0,
{"ВнешниеНаборыДанных",0,0,"","ВнешниеНаборыДанных= Новый Структура(""ТЗНоменклатураПланИФакт"",ТЗНоменклатураПланИФакт);"}
},
{0,
{"ВремяНачалаВремяКонца",0,0,"Врем[я]","ВремяНачала=ТекущаяДата();
ВремяКонца=ТекущаяДата();
Сообщить(""------------------------------------------------------------------"");
Сообщить(""ВремяНачала -""+ВремяНачала);
Сообщить(""ВремяКонца  -""+ВремяКонца);
Сообщить(""Общее время выполнения - ""+ОКР(((ВремяКонца-ВремяНачала)/60),2) +"" мин."");
Сообщить(""------------------------------------------------------------------"");	
"}
},
{0,
{"УстановитьТипЗначения",0,0,"","Процедура УстановитьТипЗначения()	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ТипЗначения="""";
		Если ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.Качество Тогда
			ТипЗначения=""СправочникСсылка.Качество"";
		ИначеЕсли ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.ГППФ
			ИЛИ ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.СторонаАктивации Тогда
			ТипЗначения=""СправочникСсылка.ЗначенияСвойствОбъекта"";
		ИначеЕсли ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.Оборудование Тогда
			ТипЗначения=""СправочникСсылка.РабочиеЦентры"";			
		ИначеЕсли ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.ДиаметрШпули Тогда
			ТипЗначения=""СправочникСсылка.рздДиаметрыШпули"";						
		ИначеЕсли ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.ВидЗаказаНаПроизводство Тогда
			ТипЗначения=""ПеречислениеСсылка.рздВидыЗаказовНаПроизводство"";									
		ИначеЕсли ВидОбъекта = Перечисления.рздВидыОбъектовОбменСОР.ТипРулона Тогда
			ТипЗначения=""ПеречислениеСсылка.рздТипыРулонов"";												
		Конецесли;
		Если ТипЗначения <> """" Тогда
			ТипЗначения=Новый ОписаниеТипов(ТипЗначения);
			ЭлементУправления=ЭлементыФормы.СсылкаНаОбъект;
			ЭлементУправления.ОграничениеТипа = ТипЗначения;
			ЭлементУправления.Значение = ТипЗначения.ПривестиЗначение(ЭлементУправления.Значение);			
		Конецесли;
	Конецесли;
КонецПроцедуры



Процедура УстановитьТипЗначения(ВыбранныйВидСравнения,НазваниеЭлементаФормы,ТипЗначения)
	Если ВыбранныйВидСравнения=ВидСравнения.ВСписке 
		ИЛИ ВыбранныйВидСравнения=ВидСравнения.ВСпискеПоИерархии Тогда
		СтароеЗначение=Неопределено;
		Если ЗначениеЗаполнено(ЭлементыФормы[НазваниеЭлементаФормы].Значение) тогда
			СтароеЗначение=ЭлементыФормы[НазваниеЭлементаФормы].Значение;
		Конецесли;
		ЭлементыФормы[НазваниеЭлементаФормы].ТипЗначения=Новый ОписаниеТипов(""СписокЗначений"");
		ЭлементыФормы[НазваниеЭлементаФормы].ТипЗначенияСписка=Новый ОписаниеТипов(ТипЗначения);
		Если СтароеЗначение<>Неопределено тогда
			ЭлементыФормы[НазваниеЭлементаФормы].Значение.Добавить(СтароеЗначение);
		конецесли;
	иначе
		Если ТипЗнч(ЭлементыФормы[НазваниеЭлементаФормы].Значение) = Тип(""СписокЗначений"") И ЭлементыФормы[НазваниеЭлементаФормы].Значение.Количество()>0 Тогда
			СтароеЗначение=ЭлементыФормы[НазваниеЭлементаФормы].Значение[0].Значение;
		КонецЕсли;		
		ЭлементыФормы[НазваниеЭлементаФормы].ТипЗначения=Новый ОписаниеТипов(ТипЗначения);
		ЭлементыФормы[НазваниеЭлементаФормы].Значение= СтароеЗначение;
	Конецесли;
конецпроцедуры"}
},
{0,
{"ЗапуститьПриложение(explorer)",0,0,"","Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение(""explorer "" + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
КонецПроцедуры
"}
},
{0,
{"НайденныеСтроки",0,0,"Найд","ПараметрыОтбора=Новый Структура();
ПараметрыОтбора.Вставить(""Сотрудник"",Сотрудник);
НайденныеСтроки = ДокОбъект.ОсновныеНачисления.НайтиСтроки(ПараметрыОтбора);
ВсегоНайденныеСтроки = НайденныеСтроки.Количество();
ТекстОшибки = """";
Если ВсегоНайденныеСтроки = 1 тогда
	СтрокаНайденныеСтроки = НайденныеСтроки[0];	
ИначеЕсли ВсегоНайденныеСтроки > 1 Тогда
	ТекстОшибки = ""Ошибка! Найдено более 1 строки"";
Иначе
	ТекстОшибки = ""Ошибка! Не найдена строка"";
Конецесли;

Если ЗначениеЗаполнено(ТекстОшибки) Тогда
	ТекстОшибки = ТекстОшибки  
		+"" в """"фнмДоходыИРасходыПлан"""" для "";
	Для каждого ЭлементОтбора из ПараметрыОтбора цикл
		ТекстОшибки = ТекстОшибки  
			+"" ""+ ЭлементОтбора.Ключ + "" = ""+ЭлементОтбора.Значение;				
	Конеццикла;
	ВызватьИсключение ТекстОшибки;	
Конецесли;

"}
},
{0,
{"СтрЗаменить",0,0,"Стр[Заменить]","Запрос.Текст=СтрЗаменить(Запрос.Текст,""//Отбор<?>По"","""");"}
},
{0,
{"ДопПараметры",0,0,"Доп[Параметры]","ДопПараметры = Новый Структура();
ДопПараметры.Вставить(""<?>"",);"}
},
{0,
{"СортировкаВСписке",0,0,"","//В процедуру ПриОткрытии или в конец модуля добавить: 
 ЭлементыФормы.РегистрСведенийСписок.НастройкаПорядка.НомерСоглашения.Доступность=Истина;    

//Где НомерСоглашения - Колонка в списке регистра сведений по которой нужно сортировать! 
//Далее щелкнув правой клавишей мыши на списке и зайдя в пункт Сортировка - увидим что стала доступна возможность сортировки по НомерСоглашения. 

//Как отсортировать список документов по признаку ПРОВЕДЕН? 
//Код 1C v 8.х
 ЭлементыФормы.ДокументыСписок.НастройкаПорядка.Проведен.Доступность = Истина;
Список.Порядок.Установить(""Проведен Убыв, Дата"");    


//Сортировка динамических списков (ЖурналДокументовСписок) 
// Добавлять элементы настройки порядка в динамические списки нельзя. 
//Если индексирование для графы установлено, то соответсвующий элемент настройки порядка уже есть, надо его просто включить: 
  ЖурналДокументовСписок.Порядок.Установить(""Номер Возр"");
// или
ЖурналДокументовСписок.Порядок.Установить(""Месяц Возр"");
// или
ЖурналДокументовСписок.Порядок.Установить(""Организация Возр"");
// или
ЖурналДокументовСписок.Порядок.Установить(""Ссылка"");      

//При открытии, журнал будет упорядочен! 

 ЭлементыФормы.СправочникСписок.НастройкаПорядка.Дата.Доступность=Истина;
ЭлементыФормы.СправочникСписок.НастройкаПорядка.Номер.Доступность=Истина;
СправочникСписок.Порядок.Установить(""Дата Возр, Номер"");"}
},
{0,
{"НС",0,0,"НС","ВсегоСтрок = Выборка.Количество();
НС = 1;
НС = НС+1;
Состояние(""Обработано НС ""+НС + "" из ""+ВсегоСтрок);"}
},
{0,
{"рздПолучитьНомерБезНулейИПрефикса",0,0,"","Функция рздПолучитьНомерБезНулейИПрефикса(НомерДок) Экспорт
	НомерДок=СокрЛП(НомерДок);
	НомерСимвола=1;
	ДлинаСтроки=СтрДлина(НомерДок);
	Префикс="""";
	Пока НомерСимвола <= ДлинаСтроки цикл
		ОбрабатываемыйСимвол=Сред(НомерДок,НомерСимвола,1);
		Попытка 
			ЧислоСимвола=Число(ОбрабатываемыйСимвол);
			Прервать;
		Исключение
		Конецпопытки;
		Префикс=Префикс+ОбрабатываемыйСимвол;
		НомерСимвола=НомерСимвола+1;
	Конеццикла;
	НомерДок=СтрЗаменить(НомерДок,Префикс,"""");
	//НомерДок=СтрЗаменить(НомерДок,""0"","""");
	НомерДок=СтрЗаменить(НомерДок,""-"","""");
	НомерДок=Число(НомерДок);
	Возврат НомерДок;
Конецфункции
"}
},
{0,
{"ПересчетИзВалютыВВалюту",0,0,"","ВалютаСтарая=ВалютаДокумента;
ВалютаНовая=мВалютаРегламентированногоУчета;
СтруктураКурсСтарая = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаСтарая, Дата);
КратностьСтарая=СтруктураКурсСтарая.Кратность;
КурсСтарая=СтруктураКурсСтарая.Курс;

СтруктураКурсВалютаНовая = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаНовая, Дата);
КратностьНовая=СтруктураКурсВалютаНовая.Кратность;
КурсНовая=СтруктураКурсВалютаНовая.Курс;
СуммаУпрУчета=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяЗапись.СуммаСНДС, ВалютаСтарая, ВалютаНовая, КурсСтарая, КурсНовая, 
   	КратностьСтарая, КратностьНовая);


СтруктураКурсВалютаЗаказа = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЗаказа, Дата);
	КратностьВзаиморасчетовВалютаЗаказа=СтруктураКурсВалютаЗаказа.Кратность;
	КурсВзаиморасчетовВалютаЗаказа=СтруктураКурсВалютаЗаказа.Курс;
	
	СтруктураКурсВалютаИзДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаИзДоговора, Дата);
	КратностьВзаиморасчетовВалютаИзДоговора=СтруктураКурсВалютаИзДоговора.Кратность;
	КурсВзаиморасчетовВалютаИзДоговора=СтруктураКурсВалютаИзДоговора.Курс;
	Цена=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, ВалютаЗаказа, ВалютаИзДоговора, КурсВзаиморасчетовВалютаЗаказа, КурсВзаиморасчетовВалютаИзДоговора, 
   		КратностьВзаиморасчетовВалютаЗаказа, КратностьВзаиморасчетовВалютаИзДоговора);

(Сумма*КурсНач*КратностьКон)/(КурсКон*КратностьНач)

Функция рздПолучитьТЗВРеглВалюте(Ссылка) Экспорт
	Запрос = Новый Запрос(""
	|ВЫБРАТЬ
	|	ТЗТовары.НомерСтроки,
	|	ТЗТовары.Номенклатура,
	|	ТЗТовары.Цена,
	|	ТЗТовары.Сумма
	|ПОМЕСТИТЬ ТЗТовары
	|ИЗ
	|	&Товары КАК ТЗТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ ВТКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			,
	|			Валюта = &ВалютаДокумента
	|				ИЛИ Валюта = &ВалютаРегламентированногоУчета) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТовары.НомерСтроки,
	|	ТЗТовары.Номенклатура,
	|	ТЗТовары.Цена,
	|	ТЗТовары.Сумма,
	|	ВЫРАЗИТЬ(ТЗТовары.Цена * ВТКурсыВалютДокумента.Курс * ВТКурсыВалютРеглУчет.Кратность / (ВТКурсыВалютРеглУчет.Курс * ВТКурсыВалютДокумента.Кратность) КАК ЧИСЛО(15, 2)) КАК ЦенаРеглУчет,
	|	ВЫРАЗИТЬ(ТЗТовары.Сумма * ВТКурсыВалютДокумента.Курс * ВТКурсыВалютРеглУчет.Кратность / (ВТКурсыВалютРеглУчет.Курс * ВТКурсыВалютДокумента.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаРеглУчет,
	|	ВТКурсыВалютРеглУчет.Валюта КАК ВалютаРеглУчет,
	|	ВТКурсыВалютРеглУчет.Курс КАК КурсРеглУчет,
	|	ВТКурсыВалютРеглУчет.Кратность КАК КратностьРеглУчет,
	|	ВТКурсыВалютДокумента.Валюта КАК ВалютаДокумета,
	|	ВТКурсыВалютДокумента.Курс КАК КурсДокумета,
	|	ВТКурсыВалютДокумента.Кратность КАК КратностьДокумета
	|ИЗ
	|	ТЗТовары КАК ТЗТовары,
	|	(ВЫБРАТЬ
	|		ВТКурсыВалют.Валюта КАК Валюта,
	|		ВТКурсыВалют.Курс КАК Курс,
	|		ВТКурсыВалют.Кратность КАК Кратность
	|	ИЗ
	|		ВТКурсыВалют КАК ВТКурсыВалют
	|	ГДЕ
	|		ВТКурсыВалют.Валюта = &ВалютаДокумента) КАК ВТКурсыВалютДокумента,
	|	(ВЫБРАТЬ
	|		ВТКурсыВалют.Валюта КАК Валюта,
	|		ВТКурсыВалют.Курс КАК Курс,
	|		ВТКурсыВалют.Кратность КАК Кратность
	|	ИЗ
	|		ВТКурсыВалют КАК ВТКурсыВалют
	|	ГДЕ
	|		ВТКурсыВалют.Валюта = &ВалютаРегламентированногоУчета) КАК ВТКурсыВалютРеглУчет
	|"");

	Запрос.УстановитьПараметр(""ВалютаДокумента"", Ссылка.ВалютаДокумента);
	Запрос.УстановитьПараметр(""ВалютаРегламентированногоУчета"", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр(""Товары"", Ссылка.Товары.Выгрузить());

	Возврат Запрос.Выполнить().Выгрузить();
Конецфункции
"}
},
{0,
{"СуммаПрописью",0,0,"","ФормСтрока = ""Л = ru_RU; ДП = Истина"";
ПарПредмета=""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"";

ОбластьМакета.Параметры.СуммаПрописью=ЧислоПрописью(2341.56, ФормСтрока, ПарПредмета);
"}
},
{0,
{"НастройкиПользователя",0,0,"","УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""рздКонтрагентПартнерПоУмолчанию"");
//задаются в ПВХ: Настройки пользователя"}
},
{0,
{"фнмЗначениеНастройки",0,0,"фнмЗ[начениеНастройки]","Перем м<?""ИмяЭлемента""> Экспорт;

м<?""ИмяЭлемента""> = Справочники.фнмКонстанты.<?""ИмяЭлемента"">.ЗначениеКонстанты;
Если м<?""ИмяЭлемента""> = Неопределено 
	ИЛИ ТипЗнч(м<?""ИмяЭлемента"">) <> Тип(""СправочникСсылка.КлассификаторСтранМира"")
	ИЛИ НЕ ЗначениеЗаполнено(м<?""ИмяЭлемента"">) Тогда
	Сообщить(""Ошибка! Не указано значение элемента """"<?""ИмяЭлемента"">"""", в константах (ФНМ)"");
Конецесли;
"}
},
{0,
{"Excel",0,0,"","//(Антон 
Функция рздПолучитьТЗФизЛицаИЗФайлаExcel(ПутьКФайлу)
	

	НомерЛиста=1;
	НомерСтрокиЭксель=1;
	
	Excel = Новый COMОбъект(""Excel.Application"");
	Excel.Workbooks.Open(ИмяФайла); 
	
	Попытка
		Excel.WorkSheets(НомерЛиста).select();
	Исключение
		ОбщегоНазначения.Сообщение(""В книге Excel отсутствует лист ""+НомерЛиста+""."");
		Excel.ActiveWorkbook.Close();  
		Excel = """";
		Возврат Неопределено;
	КонецПопытки;
	
	//Получим количество строк и колонок.
	//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	Версия = Лев(Excel.Version,Найти(Excel.Version,""."")-1);
	
	Если Версия = ""8"" тогда
		ФайлСтрок   = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
	Иначе
		ФайлСтрок   = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;   
	КонецЕсли;
	
	
	ТЗФизЛица=Новый ТаблицаЗначений();
	ТЗФизЛица.Колонки.Добавить(""НомерПП"");
	ТЗФизЛица.Колонки.Добавить(""ФИО"");
	Для Ряд = НомерСтрокиЭксель по ФайлСтрок Цикл 
		//Сумма = Excel.Cells(а,3).Value;
		НомерПП = СокрЛП(Excel.Cells(Ряд,1).Text);
		ФИО= СокрЛП(Excel.Cells(Ряд,2).Text);
		СтрокаТЗФизЛица=ТЗФизЛица.Добавить();
		СтрокаТЗФизЛица.НомерПП=НомерПП;
		СтрокаТЗФизЛица.ФИО=ФИО;
		Состояние(""Прочитано строк ""+Ряд + "" из ""+ФайлСтрок);
	КонецЦикла;
	
	//Закрываем Excel
	Excel.ActiveWorkbook.Save();
	Excel.ActiveWorkbook.Close();
	Excel.Quit();	
	
	//Excel.DisplayAlerts = 0;
	//Excel.Workbooks.Close();
	//Excel.DisplayAlerts = 1;
	
	//Excel.ActiveWorkbook.Close();  
	//Excel = """";
	//
	//Открыть файл
	//Книга = Excel.WorkBooks.Open(ИмяВремФайла);
	//Лист = Книга.WorkSheets(1);
	//
	//Книга.Activate();
	//Лист.Activate(); 
	//Эксель.Visible = 1;
	
	
	Возврат ТЗФизЛица;
	
КонецФункции

ТабДокумент = Новый ТабличныйДокумент; 
ТабДокумент.Записать(""Лопух.xls"", ТипФайлаТабличногоДокумента.XLS);



///Работа с кешем
Перем мТЗСправочникиКэш Экспорт;
Процедура СоздатьСтруктурумТЗСправочникиКэш() Экспорт
	мТЗСправочникиКэш = Новый ТаблицаЗначений();
	мТЗСправочникиКэш.Колонки.Добавить(""МетаданныеИмя"");
	мТЗСправочникиКэш.Колонки.Добавить(""Артикул"");
	мТЗСправочникиКэш.Колонки.Добавить(""Наименование"");
	мТЗСправочникиКэш.Колонки.Добавить(""ЭтоГруппа"");
	мТЗСправочникиКэш.Колонки.Добавить(""Ссылка"");
	мТЗСправочникиКэш.Индексы.Добавить(""МетаданныеИмя"");
КонецПроцедуры //Получить

Функция ПолучитьЗначениеИзКэша(МетаданныеИмя,ПараметрыПоиска) Экспорт
	РезультатФункции = Новый Структура();
	пЗначениеИзКэша = Неопределено;
	ЭтоЗначениеИзКэша = Ложь;	
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить(""МетаданныеИмя"",МетаданныеИмя);
	ПараметрыПойскаСтрока = """";
	Для каждого СтрокаПараметрыПоиска из ПараметрыПоиска цикл
		ПараметрыОтбора.Вставить(СтрокаПараметрыПоиска.Ключ,СтрокаПараметрыПоиска.Значение);
		ПараметрыПойскаСтрока = ПараметрыПойскаСтрока + """" +СтрокаПараметрыПоиска.Ключ + "" [""+СтрокаПараметрыПоиска.Значение+""]"";
	Конеццикла;
	НайденныеСтроки = мТЗСправочникиКэш.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()=1 тогда
		пЗначениеИзКэша = НайденныеСтроки[0].Ссылка;
		ЭтоЗначениеИзКэша = Истина;
	ИначеЕсли НайденныеСтроки.Количество()>1 Тогда
		Сообщить(""Ошибка! Найдено более 1 значения в кэше МетаданныеИмя [""+МетаданныеИмя+""] по указанным параметрам поиска""
			+"" ""+ПараметрыПойскаСтрока);
	Иначе
		//Сообщить(""Не найден "");		
	Конецесли;
	РезультатФункции.Вставить(""ЭтоЗначениеИзКэша"",ЭтоЗначениеИзКэша);
	РезультатФункции.Вставить(""ЗначениеИзКэша"",пЗначениеИзКэша);
	Возврат РезультатФункции;	
КонецФункции //ПолучитьЗначениеИзКэша(ДопПараметры)

Процедура ДобавитьЗначениеВКэш(СсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска) Экспорт
	СтрокамТЗСправочникиКэш = мТЗСправочникиКэш.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокамТЗСправочникиКэш,ПараметрыПоиска);
	СтрокамТЗСправочникиКэш.Ссылка = СсылкаНаОбъект;
	СтрокамТЗСправочникиКэш.МетаданныеИмя = МетаданныеИмя;
КонецПроцедуры //ДобавитьЗначениеВКэш(Справочники.Модели.ПустаяСсылка(),""Модели"",ПараметрыПоиска)

Функция ПолучитьМодель(МодельФайл) Экспорт 
	пМодель = Неопределено;
	МетаданныеИмя = ""Модели"";

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить(""Наименование"",МодельФайл);
	РезультатФункции = ПолучитьЗначениеИзКэша(МетаданныеИмя,ПараметрыПоиска);	
	Если РезультатФункции.ЭтоЗначениеИзКэша Тогда
		пМодель = РезультатФункции.ЗначениеИзКэша;
		Возврат пМодель;
	Конецесли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	Модели.Ссылка,
		|	Модели.Наименование
		|ИЗ
		|	Справочник.Модели КАК Модели
		|ГДЕ
		|	НЕ Модели.ЭтоГруппа
		|	И Модели.Наименование = &Наименование"";

	Запрос.УстановитьПараметр(""Наименование"", МодельФайл);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ДобавитьЗначениеВКэш(Справочники.Модели.ПустаяСсылка(),МетаданныеИмя,ПараметрыПоиска);
		Сообщить(""ВНИМАНИЕ! Не найдена модель [""+МодельФайл+""]"");
	Иначе
		Пока Выборка.Следующий() Цикл
			пМодель = Выборка.Ссылка;
			ДобавитьЗначениеВКэш(пМодель,МетаданныеИмя,ПараметрыПоиска);
		КонецЦикла;
	Конецесли;
	Возврат пМодель;
КонецФункции //ПолучитьМодель(МодельФайл)
"}
},
{0,
{"//#В",0,0,"В","//#В"}
},
{0,
{"ДляК",0,0,"ДляК","Для каждого Строка<?""ИмяЭлемента""> из <?""ИмяЭлемента""> цикл
	<?>	
Конеццикла;"}
},
{0,
{"Строк",0,0,"Строк","Строка<?""ИмяЭлемента"">=<?""ИмяЭлемента"">.Добавить();
ЗаполнитьЗначенияСвойств(Строка<?""ИмяЭлемента"">,<?>);
"}
},
{0,
{"СостояниеДокумента",0,0,"","Процедура ТЗСозданныеДокументыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	СозданныйДокумент=ОформлениеСтроки.ДанныеСтроки.СозданныйДокумент;
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Ячейка = ОформлениеСтроки.Ячейки.СозданныйДокумент;
		Ячейка.ОтображатьТекст    = Истина;
		Ячейка.ОтображатьФлажок   = Ложь;
		Ячейка.ОтображатьКартинку = Истина;		
		Если СозданныйДокумент.Проведен Тогда
			Ячейка.ИндексКартинки=0;
		ИначеЕсли СозданныйДокумент.ПометкаУдаления Тогда
			Ячейка.ИндексКартинки=1;
		ИначеЕсли НЕ СозданныйДокумент.Проведен Тогда
			Ячейка.ИндексКартинки=2;			
		КонецЕсли;
	Конецесли;
КонецПроцедуры"}
},
{0,
{"ВалидацияXML",0,0,"","Функция ВалидацияФайла(ИмяФайла, ИмяСхемы) Экспорт
	Отказ=Ложь;
	ИмяФайлаСхемы=ПолучитьИмяВременногоФайла("".xsd"");
	ВременныйФайл=ПолучитьМакет(ИмяСхемы);
	ВременныйФайл.Записать(ИмяФайлаСхемы);
	XMLDoc = New COMObject(""Msxml2.DOMDocument.6.0"");
	XMLDoc.Async = false;
	XMLDoc.ValidateOnParse = true;
	SchemaCache = New COMObject(""Msxml2.XMLSchemaCache.6.0"");
	SchemaCache.Add(""http://www.biaxplen.ru/ERP-SLOS"",ИмяФайлаСхемы);
	XMLDoc.Schemas = SchemaCache;
	XMLDoc.SetProperty(""MultipleErrorMessages"", true);
	XMLDoc.Load(ИмяФайла);
	ErrObj = XMLDoc.ParseError;
	If ErrObj.ErrorCode <> 0 Then
		For Each ErrItem In ErrObj.AllErrors Do 
			Message(""Error: "" + ErrItem.Reason + "" "" + ErrItem.SrcText);
		EndDo;
		Отказ=Истина;
	EndIf;	
    УдалитьФайлы(ИмяФайлаСхемы);
	Возврат Отказ;
Конецфункции
"}
},
{0,
{"ПроверитьОшибки",0,0,"","Процедура ПроверитьОшибки(ТолькоСПометкой=Ложь) Экспорт
	Для каждого СтрокаДанныеИзФайла из ДанныеИзФайла цикл
		Если ТолькоСПометкой Тогда
			Если НЕ СтрокаДанныеИзФайла.Пометка Тогда
				Продолжить;
			Конецесли;
		Конецесли;
		СтрокаДанныеИзФайла.флЕстьОшибки=Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаДанныеИзФайла.Контрагент) Тогда
			СтрокаДанныеИзФайла.флЕстьОшибки=Истина;
			Сообщить(""Ошибка! Не заполнен контрагент в строке ""+СтрокаДанныеИзФайла.НомерСтроки);
		Конецесли;
		Если НЕ ЗначениеЗаполнено(СтрокаДанныеИзФайла.Номенклатура) Тогда
			СтрокаДанныеИзФайла.флЕстьОшибки=Истина;
			Сообщить(""Ошибка! Не заполнена Номенклатура в строке ""+СтрокаДанныеИзФайла.НомерСтроки);
		Конецесли;		
		Если НЕ ЗначениеЗаполнено(СтрокаДанныеИзФайла.ХарактеристикаНоменклатуры) Тогда
			СтрокаДанныеИзФайла.флЕстьОшибки=Истина;
			Сообщить(""Ошибка! Не заполнена ХарактеристикаНоменклатуры в строке ""+СтрокаДанныеИзФайла.НомерСтроки);
		Конецесли;		
		Если СтрокаДанныеИзФайла.Пометка Тогда
			СтрокаДанныеИзФайла.Пометка=НЕ СтрокаДанныеИзФайла.флЕстьОшибки;
		Конецесли;
	Конеццикла;
КонецПроцедуры
Процедура ДанныеПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ЭлемОформления из ОформленияСтрок цикл
		ЭлемОформления.ЦветФона=Новый Цвет();
		флЕстьОшибки=ЭлемОформления.ДанныеСтроки.флЕстьОшибки;
		Если флЕстьОшибки Тогда
			ЭлемОформления.ЦветФона=Новый Цвет(255,228,225);
		Конецесли;
	конеццикла;
КонецПроцедуры
"}
},
{0,
{"ПолучитьЦелоеЧисло",0,0,"","Функция ПолучитьЦелоеЧисло(ЗНАЧ ОбрабатываемоеЧисло,Разряд,ВидОкругления=Неопределено)
	Коэффициент=1;
	Если ОбрабатываемоеЧисло<0 Тогда 
		Коэффициент=-1;
	Конецесли;
	Если ВидОкругления =""вверх"" Тогда
		ОбрабатываемоеЧисло=ОбрабатываемоеЧисло+Коэффициент*Разряд;	
	Конецесли;
	ОбрабатываемоеЧисло = Строка(ОбрабатываемоеЧисло/Разряд);
	ПозЗапятой=Найти(ОбрабатываемоеЧисло,"","");
	Если ПозЗапятой>0 Тогда
		ОбрабатываемоеЧисло=Число(Лев(ОбрабатываемоеЧисло,ПозЗапятой-1));	
	Иначе
		ОбрабатываемоеЧисло=0;	
	Конецесли;	
	Возврат ОбрабатываемоеЧисло*Разряд;
КОнецфункции
"}
},
{0,
{"ХранилищеЗначений",0,0,"","	ИмяФайлаСхемы=ПолучитьИмяВременногоФайла("".xsd"");
	ВременныйФайл=ПолучитьМакет(ИмяСхемы);
	ВременныйФайл.Записать(ИмяФайлаСхемы);

	
//Чтение и сохранение ТабДокумента в хранище значений
Процедура ОсновныеДействияФормыПрочитать(Кнопка)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	КартинкиИФайлы.Объект,
		|	КартинкиИФайлы.Идентификатор,
		|	КартинкиИФайлы.ИмяФайла,
		|	КартинкиИФайлы.ДатаСохранения,
		|	КартинкиИФайлы.РазмерФайла,
		|	КартинкиИФайлы.Комментарий,
		|	КартинкиИФайлы.Данные,
		|	КартинкиИФайлы.ДанныеВоВнешнемФайле,
		|	КартинкиИФайлы.Картинка,
		|	КартинкиИФайлы.НомерКартинки
		|ИЗ
		|	РегистрСведений.КартинкиИФайлы КАК КартинкиИФайлы
		|ГДЕ
		|	КартинкиИФайлы.Объект = &Объект
		|	И КартинкиИФайлы.Идентификатор = &Идентификатор"";

	Запрос.УстановитьПараметр(""Идентификатор"", Идентификатор);
	Запрос.УстановитьПараметр(""Объект"", Объект);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДвоичныеДанные = Выборка.Данные.Получить();
		Если ДвоичныеДанные <> Неопределено Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла(""mxl"");
			Попытка
				ДвоичныеДанные.Записать(ИмяФайла);
				
				ТабДокумент = Новый ТабличныйДокумент;
				ТабДокумент.Прочитать(ИмяФайла);
				УдалитьФайлы(ИмяФайла);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ""Не удалось сформировать внешний табличный документ!"");
			КонецПопытки;
		КонецЕсли; 		
		ОбластьМакета = ТабДокумент.ПолучитьОбласть(""Данные"");
		ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьМакета);
		//ЭлементыФормы.ПолеТабличногоДокумента.от
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСохранить(Кнопка)
	//Новый ХранилищеЗначения(ПечатныйДокумент, Новый СжатиеДанных(9));
	ИмяФайла = ПолучитьИмяВременногоФайла(""mxl"");
	ЭлементыФормы.ПолеТабличногоДокумента.Записать(ИмяФайла);
	Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла), Новый СжатиеДанных(9));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить(""Объект"",Объект);
	//ПараметрыОтбора.Вставить(""Идентификатор"",Идентификатор);

	Выборка = РегистрыСведений.КартинкиИФайлы.Выбрать(ПараметрыОтбора);
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Запись.Прочитать();
		Запись.Данные = Данные;
		Запись.Записать();
	Конеццикла;
	
КонецПроцедуры
"}
},
{0,
{"ПостроительОтчета",0,0,"","УстановитьПометкуДляТЧ(РулоныНаУпаковку,ЭлементыФормы.РулоныНаУпаковку.ОтборСтрок,Ложь,""Упаковать"");

//+ Доп ТП 16 Раздолье Иванов А.Б. 2013-08-15
Процедура УстановитьПометкуДляТЧ(ТЧ,ОтборСтрок,ЗначениеПометки,ИмяРеквизита=""Пометка"")
	ТЗ =ПолучитьТЗСОтборовВТЧ(ТЧ,ОтборСтрок);
	Для каждого СтрокаТЗ из ТЗ цикл
		ТЧ[СтрокаТЗ.НомерСтроки-1][ИмяРеквизита]=ЗначениеПометки;
	Конеццикла;
КонецПроцедуры
//- Доп ТП 16 Раздолье Иванов А.Б. 2013-08-15

//+ Доп ТП 16 Раздолье Иванов А.Б. 2013-08-15
Функция ПолучитьТЗСОтборовВТЧ(ТЧ,ОтборСтрок) 
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЧ);
	Для каждого ЭлементОтбора Из ОтборСтрок Цикл
	    Если ЭлементОтбора.Использование Тогда
	        НовыйЭлемент = Построитель.Отбор.Добавить(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Имя, ЭлементОтбора.Представление);
	        НовыйЭлемент.ВидСравнения = ЭлементОтбора.ВидСравнения;
	        НовыйЭлемент.Значение = ЭлементОтбора.Значение;
	        НовыйЭлемент.ЗначениеС = ЭлементОтбора.ЗначениеС;
	        НовыйЭлемент.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
	        НовыйЭлемент.Использование = Истина;
	    КонецЕсли;
	КонецЦикла; 
	РезультатЗапроса = Построитель.Результат;
	Возврат РезультатЗапроса.Выгрузить();
Конецфункции
"}
},
{0,
{"Процедура",0,0,"Про[цедура]","Процедура <?""ИмяЭлемента"">()
	ВызватьИсключение ""Ошибка! Нет алгоритма <?""ИмяЭлемента"">"";
КонецПроцедуры "}
},
{0,
{"Процедура сервер",0,0,"Прос[ервер]","&НаСервере
Процедура <?""ИмяЭлемента"">
	<?>
КонецПроцедуры "}
},
{0,
{"Функция",0,0,"Фу[нкция]","Функция <?""ИмяЭлемента""> 
	<?>
КонецФункции "}
},
{0,
{"Блок",0,0,"Бл[ок]","//Блок <?""ИмяЭлемента"">
<?>
//Конец блока <?""ИмяЭлемента"">"}
},
{0,
{"ФорматДата",0,0,"ФД","Формат(<?""ИмяЭлемента"">,""ДФ=dd.MM.yyyy"")"}
},
{0,
{"Процедура клиент",0,0,"Прок","&НаКлиенте
Процедура <?""ИмяЭлемента"">
	<?>
КонецПроцедуры "}
},
{0,
{"Транслит",0,0,"","Функция фмТранслитРусАнгл(Стр)
    Рез = СокрЛП(Стр);   
    Рез = СтрЗаменить(Рез,""а"",""a"");
    Рез = СтрЗаменить(Рез,""б"",""b"");
    Рез = СтрЗаменить(Рез,""в"",""v"");
    Рез = СтрЗаменить(Рез,""г"",""g"");
    Рез = СтрЗаменить(Рез,""д"",""d"");
    Рез = СтрЗаменить(Рез,""е"",""e"");
    Рез = СтрЗаменить(Рез,""ё"",""e"");
    Рез = СтрЗаменить(Рез,""ж"",""zh"");
    Рез = СтрЗаменить(Рез,""з"",""z"");
    Рез = СтрЗаменить(Рез,""и"",""i"");
    Рез = СтрЗаменить(Рез,""к"",""k"");
    Рез = СтрЗаменить(Рез,""л"",""l"");
    Рез = СтрЗаменить(Рез,""м"",""m"");
    Рез = СтрЗаменить(Рез,""н"",""n"");
    Рез = СтрЗаменить(Рез,""о"",""o"");
    Рез = СтрЗаменить(Рез,""п"",""p"");
    Рез = СтрЗаменить(Рез,""р"",""r"");
    Рез = СтрЗаменить(Рез,""с"",""s"");
    Рез = СтрЗаменить(Рез,""т"",""t"");
    Рез = СтрЗаменить(Рез,""у"",""u"");
    Рез = СтрЗаменить(Рез,""ф"",""f"");
    Рез = СтрЗаменить(Рез,""х"",""h"");
    Рез = СтрЗаменить(Рез,""ч"",""ch"");
    Рез = СтрЗаменить(Рез,""ш"",""sh"");
    Рез = СтрЗаменить(Рез,""щ"",""sch"");
    Рез = СтрЗаменить(Рез,""ъ"","""");
    Рез = СтрЗаменить(Рез,""ь"","""");
    Рез = СтрЗаменить(Рез,""э"",""e"");
    Рез = СтрЗаменить(Рез,""ю"",""yu"");
    Рез = СтрЗаменить(Рез,""й"",""i"");
    Рез = СтрЗаменить(Рез,""ц"",""c"");
    Рез = СтрЗаменить(Рез,""я"",""ya"");
    Рез = СтрЗаменить(Рез,""ы"",""i"");
    Рез = СтрЗаменить(Рез,""А"",""A"");
    Рез = СтрЗаменить(Рез,""Б"",""B"");
    Рез = СтрЗаменить(Рез,""В"",""V"");
    Рез = СтрЗаменить(Рез,""Г"",""G"");
    Рез = СтрЗаменить(Рез,""Д"",""D"");
    Рез = СтрЗаменить(Рез,""Е"",""E"");
    Рез = СтрЗаменить(Рез,""Ё"",""E"");
    Рез = СтрЗаменить(Рез,""Ж"",""ZH"");
    Рез = СтрЗаменить(Рез,""З"",""Z"");
    Рез = СтрЗаменить(Рез,""И"",""I"");
    Рез = СтрЗаменить(Рез,""К"",""K"");
    Рез = СтрЗаменить(Рез,""Л"",""L"");
    Рез = СтрЗаменить(Рез,""М"",""M"");
    Рез = СтрЗаменить(Рез,""Н"",""N"");
    Рез = СтрЗаменить(Рез,""О"",""O"");
    Рез = СтрЗаменить(Рез,""П"",""P"");
    Рез = СтрЗаменить(Рез,""Р"",""R"");
    Рез = СтрЗаменить(Рез,""С"",""S"");
    Рез = СтрЗаменить(Рез,""Т"",""T"");
    Рез = СтрЗаменить(Рез,""У"",""U"");
    Рез = СтрЗаменить(Рез,""Ф"",""F"");
    Рез = СтрЗаменить(Рез,""Х"",""H"");
    Рез = СтрЗаменить(Рез,""Ч"",""CH"");
    Рез = СтрЗаменить(Рез,""Ш"",""SH"");
    Рез = СтрЗаменить(Рез,""Щ"",""SCH"");
    Рез = СтрЗаменить(Рез,""Ъ"","""");
    Рез = СтрЗаменить(Рез,""Ь"","""");
    Рез = СтрЗаменить(Рез,""Ы"",""I"");
    Рез = СтрЗаменить(Рез,""Ц"",""C"");
    Рез = СтрЗаменить(Рез,""Э"",""E"");
    Рез = СтрЗаменить(Рез,""Ю"",""YU"");
    Рез = СтрЗаменить(Рез,""Я"",""YA"");
    Рез = СтрЗаменить(Рез,""Й"",""I"");
    Возврат(Рез);
КонецФункции
"}
},
{0,
{"ПолучитьПраваИНастройкиПользователя",0,0,"Прав[а]","<?""ИмяНастройки"">=обПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.Пользователь, ""<?""ИмяНастройки"">"");	
Если <?""ИмяНастройки""> Тогда
	<?>
Конецесли;"}
},
{0,
{"Функция сервер",0,0,"Фус","&НаСервере
Функция <?""ИмяЭлемента"">() 
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("""",);
	
	<?>
	
	Возврат РезультатФункции;
КонецФункции "}
},
{0,
{"фнмПолучитьЗапрещеноЛиРедактироватьДокумент",0,0,"фнмЗапр","ДопПараметры = Новый Структура();
ДопПараметры.Вставить(""ЭтотОбъект"",ЭтотОбъект);
ДопПараметры.Вставить(""РежимЗаписи"",РежимЗаписиДокумента.Проведение);
ДопПараметры.Вставить(""Отказ"",Ложь);
ДопПараметры.Вставить(""Ошибки"","""");
ДопПараметры.Вставить(""ТекущееВремя"",ТекущаяДата());			
РезультатФункции = фнмПолучитьЗапрещеноЛиРедактироватьДокумент(ДопПараметры);
Возврат РезультатФункции.ЗапрещеноРедактировать;

"}
},
{0,
{"ГУИД через COM",0,0,"","СсылкаВДругойИБ = фнмСоединениеСБПСОМ.String(ОС_БУ.UUID());"}
},
{0,
{"ТекстЗапроса",0,0,"Текс[тЗапроса]","ТекстЗапроса = ""
<?>
|"";
Возврат ТекстЗапроса;"}
},
{0,
{"ПаузаЧерезСкрипт",0,0,"","Процедура Sleep(ПаузаВСекундах = 0) Экспорт
    
    ИмяСкриптФайла = КаталогВременныхФайлов()+""\sleep.js"";
    
    Если ПаузаВСекундах <= 0 Тогда
        Если НайтиФайлы(ИмяСкриптФайла).Количество() = 0 Тогда
            Скрипт=Новый ТекстовыйДокумент();
            Скрипт.УстановитьТекст(
            ""if (WScript.Arguments.Count()==0)
            |    WScript.Quit();
            |else
            |    if (isNaN(parseInt(WScript.Arguments(0))))
            |        WScript.Quit();
            |WScript.Sleep(WScript.Arguments(0));"");
            Скрипт.Записать(ИмяСкриптФайла,КодировкаТекста.ANSI);
        Иначе
            УдалитьФайлы(ИмяСкриптФайла);
        КонецЕсли;
        Возврат;
    Иначе
        Если НайтиФайлы(ИмяСкриптФайла).Количество() = 0 Тогда
            Sleep();
        КонецЕсли;
    КонецЕсли;
    
    Run = ""wscript.exe "" + """" + ИмяСкриптФайла + """" + "" "" + Формат(ПаузаВСекундах * 1000,""ЧДЦ=0; ЧГ="");
    Shell=Новый COMОбъект(""wscript.shell"");
    Shell.Run(Run,0,-1);
    Shell = Неопределено;

КонецПроцедуры;


//Другой вариант

// Делаем три попытки с паузой в одну минуту
 
Пока Повтор = 1 По 3 Цикл
   // что-то делаем... а потом пауза
 
   // А ведь никто не спросил ""А зачем это нужно?"" - значит кому-то ""это"" нужно :)
 
   Попытка
      ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура(""Наименование"", ""Моё первое задание""))[0].ОжидатьЗавершения(60);
   Исключение
   КонецПопытки;
КонецЦикла;

//3-ий вариант

Пока НЕ ТекущаяДата() = ТекДата + 10 Цикл 
//.... думаем 10 секунд :) 
КонецЦикла;"}
},
{0,
{"Многопоточность ФоновыеЗадания",0,0,"","Процедура КнопкаВыполнитьНажатие(Кнопка)

    //указывает число потоков, которые будут запущены одновременно
    ЧислоПараллельныхПотоков = 10;

    МассивЗаданий = Новый Массив;

    Запрос = Новый Запрос(
    ""ВЫБРАТЬ РАЗЛИЧНЫЕ
    |    ПартииТоваровНаСкладах.Склад
    |ИЗ
    |    РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
    |ГДЕ
    |    ПартииТоваровНаСкладах.Период МЕЖДУ &Дата1 И &Дата2"");
    Запрос.УстановитьПараметр(""Дата1"", ДатаНачала);
    Запрос.УстановитьПараметр(""Дата2"", ДатаОкончания);

    Результат = Запрос.Выполнить().Выгрузить();

    Для каждого Стр из Результат Цикл

        МассивПараметров = Новый Массив;
        МассивПараметров.Добавить(ДатаНачала);
        МассивПараметров.Добавить(ДатаОкончания);
        МассивПараметров.Добавить(Стр.Склад);

        Задание = ФоновыеЗадания.Выполнить(""ВыгрузкаДанныхНаСервере.ВыгрузитьДанныеПоПартиям"", МассивПараметров);

        МассивЗаданий.Добавить(Задание);

        Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
            Попытка
                ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
            Исключение
            КонецПопытки;
            МассивЗаданий.Очистить();
        КонецЕсли;

    КонецЦикла;

    Если МассивЗаданий.Количество() > 0 Тогда
        Попытка
            ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
        Исключение
        КонецПопытки;
        МассивЗаданий.Очистить();
    КонецЕсли;

    Сообщить(""Время выполнения процедуры - "" + (ТекущаяДата() - ВремяНачала) + "" с."");

КонецПроцедуры


//2)      Процедура, которую непосредственно выполняет фоновое задание (основная логика):

// Общий модуль «ВыгрузкаДанныхНаСервере», выполняемый на сервере:

Процедура ВыгрузитьДанныеПоПартиям(ДатаНачала, ДатаОкончания, Склад) Экспорт

    Запрос = Новый Запрос(
    ""ВЫБРАТЬ
    |    *
    |ИЗ
    |    РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
    |ГДЕ
    |    ПартииТоваровНаСкладах.Период МЕЖДУ &Дата1 И &Дата2
    |    И ПартииТоваровНаСкладах.Склад = &Склад"");

    Запрос.УстановитьПараметр(""Дата1"", ДатаНачала);
    Запрос.УстановитьПараметр(""Дата2"", ДатаОкончания);
    Запрос.УстановитьПараметр(""Склад"", Склад);

    Результат = Запрос.Выполнить().Выгрузить();

    Для каждого Стр из Результат Цикл
        //Что-то делаем с данными
    КонецЦикла;

КонецПроцедуры"}
},
{0,
{"Расчет рабочих дней в запросе через индекс",0,0,"","ВЫБРАТЬ
    РеализацияТоваровУслуг.Ссылка,
    НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) КАК Дата,
    РеализацияТоваровУслуг.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ДнейОтсрочкиДолга
ПОМЕСТИТЬ ВТ
ИЗ
    Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
    РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
ПОМЕСТИТЬ ВТ_РеглКалендарь
ИЗ
    РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
ГДЕ
    РегламентированныйПроизводственныйКалендарь.ВидДня В(&ВидДня)
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
    ВТ_РеглКалендарь.ДатаКалендаря,
    КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_РеглКалендарь1.ДатаКалендаря) КАК ИндексРегламентированногоКалендаря
ПОМЕСТИТЬ ВТ_РеглКалендарьСИндексами
ИЗ
    ВТ_РеглКалендарь КАК ВТ_РеглКалендарь
        ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеглКалендарь КАК ВТ_РеглКалендарь1
        ПО ВТ_РеглКалендарь.ДатаКалендаря >= ВТ_РеглКалендарь1.ДатаКалендаря

СГРУППИРОВАТЬ ПО
    ВТ_РеглКалендарь.ДатаКалендаря
ИНДЕКСИРОВАТЬ ПО
        ИндексРегламентированногоКалендаря
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
    ВТ.Ссылка,
    ВТ.Дата,
    ВТ.ДнейОтсрочкиДолга,
    ВТ_РеглКалендарьСИндексами.ИндексРегламентированногоКалендаря КАК ИндексДатыДолга
ПОМЕСТИТЬ ВТ_СИндексом
ИЗ
    ВТ КАК ВТ
        ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеглКалендарьСИндексами КАК ВТ_РеглКалендарьСИндексами
        ПО ВТ.Дата = ВТ_РеглКалендарьСИндексами.ДатаКалендаря
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
    ВТ_СИндексом.Ссылка,
    ВТ_СИндексом.Дата КАК ДатаВозникновенияДолга,
        ВТ_СИндексом.ДнейОтсрочкиДолга,
    ВТ_РеглКалендарьСИндексами.ДатаКалендаря КАК ДатаВозникновенияПросроченногоДолга
ИЗ
    ВТ_СИндексом КАК ВТ_СИндексом
        ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеглКалендарьСИндексами КАК ВТ_РеглКалендарьСИндексами
        ПО (ВТ_РеглКалендарьСИндексами.ИндексРегламентированногоКалендаря - ВТ_СИндексом.ИндексДатыДолга = ВТ_СИндексом.ДнейОтсрочкиДолга)"}
},
{0,
{"Многопоточность Фоновые задания",0,0,"","Процедура КнопкаВыполнитьНажатие(Кнопка)

    //указывает число потоков, которые будут запущены одновременно
    ЧислоПараллельныхПотоков = 10;

    МассивЗаданий = Новый Массив;

    Запрос = Новый Запрос(
    ""ВЫБРАТЬ РАЗЛИЧНЫЕ
    |    ПартииТоваровНаСкладах.Склад
    |ИЗ
    |    РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
    |ГДЕ
    |    ПартииТоваровНаСкладах.Период МЕЖДУ &Дата1 И &Дата2"");
    Запрос.УстановитьПараметр(""Дата1"", ДатаНачала);
    Запрос.УстановитьПараметр(""Дата2"", ДатаОкончания);

    Результат = Запрос.Выполнить().Выгрузить();

    Для каждого Стр из Результат Цикл

        МассивПараметров = Новый Массив;
        МассивПараметров.Добавить(ДатаНачала);
        МассивПараметров.Добавить(ДатаОкончания);
        МассивПараметров.Добавить(Стр.Склад);

        Задание = ФоновыеЗадания.Выполнить(""ВыгрузкаДанныхНаСервере.ВыгрузитьДанныеПоПартиям"", МассивПараметров);

        МассивЗаданий.Добавить(Задание);

        Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
            Попытка
                ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
            Исключение
            КонецПопытки;
            МассивЗаданий.Очистить();
        КонецЕсли;

    КонецЦикла;

    Если МассивЗаданий.Количество() > 0 Тогда
        Попытка
            ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
        Исключение
        КонецПопытки;
        МассивЗаданий.Очистить();
    КонецЕсли;

    Сообщить(""Время выполнения процедуры - "" + (ТекущаяДата() - ВремяНачала) + "" с."");

КонецПроцедуры"}
},
{0,
{"ВыбратьДатыЗаПериодЗапросом",0,0,"","ВЫБРАТЬ
	0 КАК Поле
ПОМЕСТИТЬ Цифры

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	1

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	2

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	3
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ ПЕРВЫЕ 1024
	Числа1.Поле + 4 * Числа2.Поле + 16 * Числа3.Поле + 64 * Числа4.Поле + 256 * Числа5.Поле + 1 КАК Поле
ПОМЕСТИТЬ Числа
ИЗ
	Цифры КАК Числа1,
	Цифры КАК Числа2,
	Цифры КАК Числа3,
	Цифры КАК Числа4,
	Цифры КАК Числа5

УПОРЯДОЧИТЬ ПО
	Поле
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ДОБАВИТЬКДАТЕ(&ДатаНач, ДЕНЬ, Числа.Поле) КАК ПолеДата
ИЗ
	Числа КАК Числа
ГДЕ
	Числа.Поле <= РАЗНОСТЬДАТ(&ДатаНач, &ДатаКон, ДЕНЬ)"}
},
{0,
{"Получение данных динамического списка",0,0,"","//Получение данных динамического списка
Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема,Настройки);
ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);"}
},
{0,
{"Функция клиент",0,0,"Фук","&НаКлиенте
Функция <?""ИмяЭлемента"">() 
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("""",);
	
	<?>
	
	Возврат РезультатФункции;
КонецФункции "}
},
{0,
{"НЕ ЗначениеЗаполнено",0,0,"Нез","Если НЕ ЗначениеЗаполнено(<?""ИмяРеквизита"">) Тогда
	Продолжить;
Конецесли;
<?>"}
},
{0,
{"Параметры.ЗначениеКопирования.Пустой()",0,0,"","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.ЗначениеКопирования.Пустой() Тогда
		Запись.ДатаНачала = Дата(1,1,1);
		Запись.ДатаОкончания = Дата(1,1,1);
	КонецЕсли;	

КонецПроцедуры
"}
},
{0,
{"ОтладчикЗапросникХадиятов",0,0,"","//ВнешниеОбработки.Создать(""D:\Documents\Ivanov\1_Обработки\OtladkaZaprosa.epf"").Отладить(Запрос, Истина);

ВнешниеОбработки.Создать(""D:\Documents\Ivanov\1_Обработки\OtladkaZaprosa.epf"").ОтладитьЗапрос(ЗапросАвтоЗаполнения, Истина)"}
},
{0,
{"Блокировка",0,0,"","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.Партии"");
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
ЭлементБлокировки.УстановитьЗначение(""Склад"", Склад);
ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
ЭлементБлокировки.ИспользоватьИзИсточникаДанных(""Номенклатура"", ""Номенклатура"");
Блокировка.Заблокировать();


Если Режим = РежимПроведенияДокумента.Оперативный Тогда
	Движения.Партии.Очистить();
	Движения.Партии.БлокироватьДляИзменения = Истина;
	Движения.Записать();
КонецЕсли;

//http://forum.chistov.pro/index.php?topic=1999.msg22182#msg22182
Движения.ОстаткиНоменклатуры.БлокироватьДляИзменения = Истина;    
Движения.ОстаткиНоменклатуры.Записать();           

Блокирока = Новый БлокировкаДанных;   
ЭлементБлокировки = Блокирока.Добавить(""РегистрНакопления.ОстаткиНоменклатуры"");   
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;    
ЭлементБлокировки.ИсточникДанных = СписокНоменклатуры;   
ЭлементБлокировки.ИспользоватьИзИсточникаДанных(""Номенклатура"",""Номенклатура"");   
Блокирока.Заблокировать();"}
},
{0,
{"РегистраторыРегистров",0,0,"","	НаборЗаписей = РегистрыНакопления.фнмДоходыИРасходы.СоздатьНаборЗаписей();
	МассивТипов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	Для каждого ТипДокумента Из МассивТипов Цикл
	    ДокументСсылка = Новый(ТипДокумента);
	    Имя = ДокументСсылка.Метаданные().Имя; 
	    Синоним = ДокументСсылка.Метаданные().Синоним;
	    Сообщить(Имя);
	КонецЦикла;	
"}
},
{0,
{"ИнтервалыЗапросом (+ перевод из строки в число) + туры",0,0,"","//Общий запрос

ВЫБРАТЬ
    Слева.Дата КАК НачалоИнтервала,
    МИНИМУМ(Справа.Дата) КАК КонецИнтервала
ИЗ 
    Даты КАК Слева 
    ВНУТРЕННЕЕ СОЕДИНЕНИЕ Даты КАК Справа
        ПО Слева.Дата < Справа.Дата
СГРУППИРОВАТЬ ПО 
    Слева.Дата
	
	
//Интервалы запросом и перевод из строки в число запросом
//
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 12) КАК ШтрихКод
|ПОМЕСТИТЬ ВТШтрихКодыПредв
|ИЗ
|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
|ГДЕ
|	ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 2) = &ПрефиксШтучногоШК
|	И ШтрихКоды.ШтрихКод МЕЖДУ &мШтрихКодНачалоИнтервала И &мШтрихКодКонецИнтервала
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПОДСТРОКА(&мШтрихКодНачалоИнтервала, 1, 12) КАК ШтрихКод 	
|	
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПОДСТРОКА(&мШтрихКодКонецИнтервала, 1, 12) КАК ШтрихКод 		
|;
|;
|
|ВЫБРАТЬ    """"0"""" КАК Цифра, 0 КАК Позиция, 1 КАК Вес
|ПОМЕСТИТЬ СистемаСчисления
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"1"""", 1, 10
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"2"""", 2, 100
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"3"""", 3, 1000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"4"""", 4, 10000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"5"""", 5, 100000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"6"""", 6, 1000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"7"""", 7, 10000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"8"""", 8, 100000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"9"""", 9, 1000000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"10"""",10,10000000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"11"""",11,100000000000
|
|;
|
|
|ВЫБРАТЬ  
|	ВТШтрихКодыПредв.ШтрихКод КАК ШтрихКодСтрока, 
|	СУММА(СтепениДесяти.Вес * Цифры.Позиция) / МИНИМУМ(СтепениДесяти.Вес) КАК ШтрихКод
|ПОМЕСТИТЬ ВТШтрихКоды
|ИЗ ВТШтрихКодыПредв
|	СОЕДИНЕНИЕ СистемаСчисления КАК СтепениДесяти ПО (ИСТИНА)
|	СОЕДИНЕНИЕ СистемаСчисления КАК Цифры ПО (ПОДСТРОКА(ВТШтрихКодыПредв.ШтрихКод, 12 - СтепениДесяти.Позиция, 1) = Цифры.Цифра)
|СГРУППИРОВАТЬ ПО
|	ВТШтрихКодыПредв.ШтрихКод
|;
|
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТШтрихКодыСлева.ШтрихКод КАК НачалоИнтервала,
|	МИНИМУМ(ВТШтрихКодыСправа.ШтрихКод) КАК КонецИнтервала
|ПОМЕСТИТЬ ВТРезультат
|ИЗ
|	ВТШтрихКоды КАК ВТШтрихКодыСлева
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТШтрихКоды КАК ВТШтрихКодыСправа
|		ПО ВТШтрихКодыСлева.ШтрихКод < ВТШтрихКодыСправа.ШтрихКод
|
|СГРУППИРОВАТЬ ПО
|	ВТШтрихКодыСлева.ШтрихКод
|;
|
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТРезультат.НачалоИнтервала,
|	ВТРезультат.КонецИнтервала,
|	ВТРезультат.КонецИнтервала - ВТРезультат.НачалоИнтервала КАК КоличествоШКВИнтервале
|ИЗ
|	ВТРезультат КАК ВТРезультат
|ГДЕ
|	ВТРезультат.КонецИнтервала - ВТРезультат.НачалоИнтервала > 1
|
|УПОРЯДОЧИТЬ ПО
|	ВТРезультат.НачалоИнтервала
	


"}
},
{0,
{"ИнтерваылЗапросом через туры",0,0,"","|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 12) КАК ШтрихКод
|ПОМЕСТИТЬ ВТШтрихКодыПредв
|ИЗ
|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
|ГДЕ
|	ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 2) = &ПрефиксШтучногоШК
|	И ШтрихКоды.ШтрихКод МЕЖДУ &мШтрихКодНачалоИнтервала И &мШтрихКодКонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПОДСТРОКА(&мШтрихКодНачалоИнтервала, 1, 12)
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПОДСТРОКА(&мШтрихКодКонецИнтервала, 1, 12)
|;
|
|ВЫБРАТЬ    """"0"""" КАК Цифра, 0 КАК Позиция, 1 КАК Вес
|ПОМЕСТИТЬ СистемаСчисления
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"1"""", 1, 10
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"2"""", 2, 100
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"3"""", 3, 1000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"4"""", 4, 10000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"5"""", 5, 100000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"6"""", 6, 1000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"7"""", 7, 10000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"8"""", 8, 100000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"9"""", 9, 1000000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"10"""",10,10000000000
|ОБЪЕДИНИТЬ ВЫБРАТЬ """"11"""",11,100000000000
|
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТШтрихКодыПредв.ШтрихКод КАК ШтрихКодСтрока,
|	СУММА(СтепениДесяти.Вес * Цифры.Позиция) / МИНИМУМ(СтепениДесяти.Вес) КАК ШтрихКод
|ПОМЕСТИТЬ ВТШтрихКоды
|ИЗ
|	ВТШтрихКодыПредв КАК ВТШтрихКодыПредв
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СистемаСчисления КАК СтепениДесяти
|		ПО (ИСТИНА)
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СистемаСчисления КАК Цифры
|		ПО (ПОДСТРОКА(ВТШтрихКодыПредв.ШтрихКод, 12 - СтепениДесяти.Позиция, 1) = Цифры.Цифра)
|
|СГРУППИРОВАТЬ ПО
|	ВТШтрихКодыПредв.ШтрихКод
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТШтрихКоды.ШтрихКод - &мШтрихКодНачалоИнтервалаЧисло12 КАК НомерПары,
|	ВТШтрихКоды.ШтрихКод КАК НижняяГраница,
|	ВТШтрихКоды.ШтрихКод КАК ВерхняяГраница
|ПОМЕСТИТЬ Тур0
|ИЗ
|	ВТШтрихКоды КАК ВТШтрихКоды
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур0.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур0.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур0.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур0.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур0.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур1
|ИЗ
|	Тур0 КАК Тур0
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур0.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур1.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур1.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур1.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур1.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур1.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур2
|ИЗ
|	Тур1 КАК Тур1
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур1.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур2.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур2.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур2.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур2.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур2.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур3
|ИЗ
|	Тур2 КАК Тур2
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур2.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур3.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур3.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур3.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур3.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур3.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур4
|ИЗ
|	Тур3 КАК Тур3
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур3.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур4.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур4.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур4.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур4.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур4.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур5
|ИЗ
|	Тур4 КАК Тур4
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур4.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур5.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур5.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур5.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур5.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур5.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур6
|ИЗ
|	Тур5 КАК Тур5
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур5.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур6.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур6.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур6.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур6.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур6.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур7
|ИЗ
|	Тур6 КАК Тур6
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур6.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур7.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур7.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур7.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур7.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур7.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур8
|ИЗ
|	Тур7 КАК Тур7
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур7.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур8.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур8.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур8.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур8.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур8.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур9
|ИЗ
|	Тур8 КАК Тур8
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур8.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур9.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур9.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур9.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур9.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур9.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур10
|ИЗ
|	Тур9 КАК Тур9
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур9.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур10.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур10.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур10.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур10.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур10.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур11
|ИЗ
|	Тур10 КАК Тур10
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур10.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур11.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур11.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур11.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур11.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур11.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур12
|ИЗ
|	Тур11 КАК Тур11
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур11.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур12.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур12.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур12.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур12.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур12.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур13
|ИЗ
|	Тур12 КАК Тур12
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур12.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур13.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур13.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур13.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур13.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур13.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур14
|ИЗ
|	Тур13 КАК Тур13
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур13.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур14.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур14.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур14.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур14.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур14.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур15
|ИЗ
|	Тур14 КАК Тур14
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур14.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур15.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур15.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур15.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур15.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур15.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур16
|ИЗ
|	Тур15 КАК Тур15
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур15.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур16.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур16.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур16.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур16.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур16.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур17
|ИЗ
|	Тур16 КАК Тур16
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур16.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур17.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур17.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур17.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур17.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур17.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур18
|ИЗ
|	Тур17 КАК Тур17
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур17.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур18.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур18.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур18.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур18.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур18.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур19
|ИЗ
|	Тур18 КАК Тур18
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур18.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур19.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур19.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур19.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур19.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур19.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур20
|ИЗ
|	Тур19 КАК Тур19
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур19.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур20.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур20.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур20.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур20.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур20.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур21
|ИЗ
|	Тур20 КАК Тур20
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур20.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур21.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур21.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур21.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур21.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур21.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур22
|ИЗ
|	Тур21 КАК Тур21
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур21.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур22.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур22.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур22.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур22.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур22.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур23
|ИЗ
|	Тур22 КАК Тур22
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур22.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур23.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур23.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур23.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур23.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур23.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур24
|ИЗ
|	Тур23 КАК Тур23
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур23.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур24.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур24.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур24.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур24.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур24.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур25
|ИЗ
|	Тур24 КАК Тур24
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур24.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур25.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур25.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур25.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур25.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур25.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур26
|ИЗ
|	Тур25 КАК Тур25
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур25.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур26.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур26.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур26.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур26.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур26.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур27
|ИЗ
|	Тур26 КАК Тур26
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур26.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур27.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур27.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур27.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур27.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур27.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур28
|ИЗ
|	Тур27 КАК Тур27
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур27.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур28.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур28.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур28.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур28.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур28.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур29
|ИЗ
|	Тур28 КАК Тур28
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур28.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур29.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур29.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур29.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур29.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур29.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур30
|ИЗ
|	Тур29 КАК Тур29
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур29.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур30.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур30.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур30.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур30.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур30.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур31
|ИЗ
|	Тур30 КАК Тур30
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур30.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫРАЗИТЬ(Тур31.НомерПары / 2 КАК ЧИСЛО(10, 0)) КАК НомерПары,
|	МИНИМУМ(Тур31.НижняяГраница) КАК НижняяГраница,
|	МАКСИМУМ(Тур31.ВерхняяГраница) КАК ВерхняяГраница,
|	МИНИМУМ(Тур31.ВерхняяГраница) КАК НачалоИнтервала,
|	МАКСИМУМ(Тур31.НижняяГраница) КАК КонецИнтервала
|ПОМЕСТИТЬ Тур32
|ИЗ
|	Тур31 КАК Тур31
|
|СГРУППИРОВАТЬ ПО
|	ВЫРАЗИТЬ(Тур31.НомерПары / 2 КАК ЧИСЛО(10, 0))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Тур1.НачалоИнтервала,
|	Тур1.КонецИнтервала
|ПОМЕСТИТЬ ВТРезультат
|ИЗ
|	Тур1 КАК Тур1
|ГДЕ
|	Тур1.НачалоИнтервала < Тур1.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур2.НачалоИнтервала,
|	Тур2.КонецИнтервала
|ИЗ
|	Тур2 КАК Тур2
|ГДЕ
|	Тур2.НачалоИнтервала < Тур2.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур3.НачалоИнтервала,
|	Тур3.КонецИнтервала
|ИЗ
|	Тур3 КАК Тур3
|ГДЕ
|	Тур3.НачалоИнтервала < Тур3.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур4.НачалоИнтервала,
|	Тур4.КонецИнтервала
|ИЗ
|	Тур4 КАК Тур4
|ГДЕ
|	Тур4.НачалоИнтервала < Тур4.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур5.НачалоИнтервала,
|	Тур5.КонецИнтервала
|ИЗ
|	Тур5 КАК Тур5
|ГДЕ
|	Тур5.НачалоИнтервала < Тур5.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур6.НачалоИнтервала,
|	Тур6.КонецИнтервала
|ИЗ
|	Тур6 КАК Тур6
|ГДЕ
|	Тур6.НачалоИнтервала < Тур6.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур7.НачалоИнтервала,
|	Тур7.КонецИнтервала
|ИЗ
|	Тур7 КАК Тур7
|ГДЕ
|	Тур7.НачалоИнтервала < Тур7.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур8.НачалоИнтервала,
|	Тур8.КонецИнтервала
|ИЗ
|	Тур8 КАК Тур8
|ГДЕ
|	Тур8.НачалоИнтервала < Тур8.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур9.НачалоИнтервала,
|	Тур9.КонецИнтервала
|ИЗ
|	Тур9 КАК Тур9
|ГДЕ
|	Тур9.НачалоИнтервала < Тур9.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур10.НачалоИнтервала,
|	Тур10.КонецИнтервала
|ИЗ
|	Тур10 КАК Тур10
|ГДЕ
|	Тур10.НачалоИнтервала < Тур10.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур11.НачалоИнтервала,
|	Тур11.КонецИнтервала
|ИЗ
|	Тур11 КАК Тур11
|ГДЕ
|	Тур11.НачалоИнтервала < Тур11.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур12.НачалоИнтервала,
|	Тур12.КонецИнтервала
|ИЗ
|	Тур12 КАК Тур12
|ГДЕ
|	Тур12.НачалоИнтервала < Тур12.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур13.НачалоИнтервала,
|	Тур13.КонецИнтервала
|ИЗ
|	Тур13 КАК Тур13
|ГДЕ
|	Тур13.НачалоИнтервала < Тур13.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур14.НачалоИнтервала,
|	Тур14.КонецИнтервала
|ИЗ
|	Тур14 КАК Тур14
|ГДЕ
|	Тур14.НачалоИнтервала < Тур14.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур15.НачалоИнтервала,
|	Тур15.КонецИнтервала
|ИЗ
|	Тур15 КАК Тур15
|ГДЕ
|	Тур15.НачалоИнтервала < Тур15.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур16.НачалоИнтервала,
|	Тур16.КонецИнтервала
|ИЗ
|	Тур16 КАК Тур16
|ГДЕ
|	Тур16.НачалоИнтервала < Тур16.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур17.НачалоИнтервала,
|	Тур17.КонецИнтервала
|ИЗ
|	Тур17 КАК Тур17
|ГДЕ
|	Тур17.НачалоИнтервала < Тур17.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур18.НачалоИнтервала,
|	Тур18.КонецИнтервала
|ИЗ
|	Тур18 КАК Тур18
|ГДЕ
|	Тур18.НачалоИнтервала < Тур18.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур19.НачалоИнтервала,
|	Тур19.КонецИнтервала
|ИЗ
|	Тур19 КАК Тур19
|ГДЕ
|	Тур19.НачалоИнтервала < Тур19.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур20.НачалоИнтервала,
|	Тур20.КонецИнтервала
|ИЗ
|	Тур20 КАК Тур20
|ГДЕ
|	Тур20.НачалоИнтервала < Тур20.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур21.НачалоИнтервала,
|	Тур21.КонецИнтервала
|ИЗ
|	Тур21 КАК Тур21
|ГДЕ
|	Тур21.НачалоИнтервала < Тур21.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур22.НачалоИнтервала,
|	Тур22.КонецИнтервала
|ИЗ
|	Тур22 КАК Тур22
|ГДЕ
|	Тур22.НачалоИнтервала < Тур22.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур23.НачалоИнтервала,
|	Тур23.КонецИнтервала
|ИЗ
|	Тур23 КАК Тур23
|ГДЕ
|	Тур23.НачалоИнтервала < Тур23.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур24.НачалоИнтервала,
|	Тур24.КонецИнтервала
|ИЗ
|	Тур24 КАК Тур24
|ГДЕ
|	Тур24.НачалоИнтервала < Тур24.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур25.НачалоИнтервала,
|	Тур25.КонецИнтервала
|ИЗ
|	Тур25 КАК Тур25
|ГДЕ
|	Тур25.НачалоИнтервала < Тур25.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур26.НачалоИнтервала,
|	Тур26.КонецИнтервала
|ИЗ
|	Тур26 КАК Тур26
|ГДЕ
|	Тур26.НачалоИнтервала < Тур26.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур27.НачалоИнтервала,
|	Тур27.КонецИнтервала
|ИЗ
|	Тур27 КАК Тур27
|ГДЕ
|	Тур27.НачалоИнтервала < Тур27.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур28.НачалоИнтервала,
|	Тур28.КонецИнтервала
|ИЗ
|	Тур28 КАК Тур28
|ГДЕ
|	Тур28.НачалоИнтервала < Тур28.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур29.НачалоИнтервала,
|	Тур29.КонецИнтервала
|ИЗ
|	Тур29 КАК Тур29
|ГДЕ
|	Тур29.НачалоИнтервала < Тур29.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур30.НачалоИнтервала,
|	Тур30.КонецИнтервала
|ИЗ
|	Тур30 КАК Тур30
|ГДЕ
|	Тур30.НачалоИнтервала < Тур30.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур31.НачалоИнтервала,
|	Тур31.КонецИнтервала
|ИЗ
|	Тур31 КАК Тур31
|ГДЕ
|	Тур31.НачалоИнтервала < Тур31.КонецИнтервала
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	Тур32.НачалоИнтервала,
|	Тур32.КонецИнтервала
|ИЗ
|	Тур32 КАК Тур32
|ГДЕ
|	Тур32.НачалоИнтервала < Тур32.КонецИнтервала
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТРезультат.НачалоИнтервала,
|	ВТРезультат.КонецИнтервала,
|	ВТРезультат.КонецИнтервала - ВТРезультат.НачалоИнтервала КАК Разница
|ИЗ
|	ВТРезультат КАК ВТРезультат
|ГДЕ
|	ВТРезультат.КонецИнтервала - ВТРезультат.НачалоИнтервала > 1"}
},
{0,
{"Падежи",0,0,"","// (c) Jurer Production Begin ( Start )
 
// В случае, если программа окажется для Вас полезной, и Вы представляете только свои интересы, а не интересы фирмы,
 
// автор будет весьма признателен, если Вы перечислите ему, то есть мне, некую сумму на Ваше усмотрение
 
// Счет для я-деньги: 4100131343416 - будьте ж несдержаней в своих инициативах
 
// 
 
// http://superjur.narod.ru
 
// 
 
// Удаление этих строк незнаконно!
 
// Гарантия 91 года и 1 месяц!!!
 
// Послегарантийное обслуживание - бесплатно!!!
 
// Круглосуточная поддержка - все 48 часов в бою!
 
// Ссылка на источник обязательна!
 
// Эти программы защищены законом об авторских правах. Запрещается перепродажа данной программы. Продажа тоже запрещена.
 
// ПРОВЕРЕНО! ВИРУСОВ НЕТ!!! АНТИВИРУСОВ ТОЖЕ!!!
 
// Смотри Милячуша в творительном !!
 
// скупой слепой тупой - пропой!!
 
// !№№!
 
// !57! поправки для творительного падежа на -ин -ов окончание -ым, -ич -ыш окончание -ем, иначе -ом
 
// !56! укратил
 
// !55! ПадежЫ - для оглы и кызы
 
// !54! 
 
// !53! Очередное сокращение кода
 
// !51! Прегромадное спасибо Олегу Дубровскому за оказанную моральную, информационную и материальную поддержку сего проекта.
 
//      Сергею Толкачёву за напоминание о том, что в русском языке всегда есть место исключениям!
 
// !50! П:Ответственный за электрохозяйство  Ф:Ацута Груша  
 
// !48! исправлена ошибка при склонении фамилий (спасибо, Mario).
 
// !47! исправлена ошибка при склонении профессий ( спасибо, Павел Ковалев).
 
// !46! оптимизация + четвертый параметр задает, что вернуть - фамилия, имя или отчество или всё сразу в нужном падеже
 
// !42! Осел + Соловей + Воробей + Немец + Кормилец + Силиец
 
// !41! отчества оканчивающиеся на ""ы"" считаются женскими ?
 
// Функция для склонения одного слова!!!
 
// z1 - само слово
 
// z2 - номер падежа
 
// z3 - пол
 
// z4 - 1-склонять как фамилию, 2-имя, 3-отчество
 
Функция ПадежС(z1,Знач z2=2,Знач z3=""*"",z4=0) Экспорт
  z5=Найти(z1,""-"");
  z6=?(z5=0,"""",""-""+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
  z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
  z7=Прав(z1,3);z8=Прав(z7,2);z9=Прав(z8,1);
  z5=СтрДлина(z1);
  za=Найти(""ая ия ел ок яц ий па да ца ша ба та га ка"",z8);
  zb=Найти(""аеёийоуэюяжнгхкчшщ"",Лев(z7,1));
  zc=Макс(z2,-z2);
  zd=?(za=4,5,Найти(""айяь"",z9));
  zd=?((zc=1)или(z9=""."")или((z4=2)и(Найти(""оиеу""+?(z3=""ч"","""",""бвгджзклмнпрстфхцчшщъ""),z9)>0))или((z4=1)и(Найти(""мия мяэ лия кия жая лея"",z7)>0)),9,?((zd=4)и(z3=""ч""),2,?(z4=1,?(Найти(""оеиую"",z9)+Найти(""их ых аа еа ёа иа оа уа ыа эа юа яа"",z8)>0,9,?(z3<>""ч"",?(za=1,7,?(z9=""а"",?(za>18,1,6),9)),?(((Найти(""ой ый"",z8)>0)и(z5>4)и(Найти(""опой вбой"",Прав(z1,4))=0))или((zb>10)и(za=16)),8,zd))),zd)));
  ze=Найти(""лец нёк вей бей дец пец мец нец рец вец аец иец ыец бер"",z7);
  zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти(""жий ний"",z7)>0),""е"",""о""),?(z1=""лев"",""ьв"",?((Найти(""аеёийоуэюя"",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>49),"""",?(za=7,""л"",?(za=10,""к"",?(za=13,""йц"",?(ze=0,"""",?(ze<16,""ь""+?(ze=1,""ц"",?(ze=5,""к"","""")),?(ze<41,""ц"",?(ze<53,""йц"",""р""))))))))));
  zf=?((zd=9)или((z4=3)и(Прав(z1,1)=""ы"")),z1,Лев(z1,z5-?((zd>6)или(zf<>""""),2,?(zd>0,1,0)))+zf+СокрП(Сред(""а у а ""+?((z8=""ич"")или(z8=""ыш""),""е"",?((z8=""ов"")or(z8=""ин""),""ы"",""о""))+""ме ""+?(Найти(""гжкхш"",Лев(z8,1))>0,""и"",""ы"")+"" е у ойе я ю я ем""+?(za=16,""и"",""е"")+"" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго""+?((zf=""е"")или(za=16)или((zb>12)и(zb<16)),""и"",""ы"")+""мм"",10*zd+2*zc-3,2)));
Возврат ?(""""=z1,"""",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),""."",Сред(zf,2)),zf)+z6);
КонецФункции
//_____________________________________________________________________________
 
// z1 - фамилия имя отчество например Железняков Юрий Юрьевич
 
// z2 - Падеж ( по  умолчанию = 2 - родительный)
 
// 2 - родительный  ( нет кого?    ) Железнякова Юрия Юрьевича     
 
// 3 - дательный    ( кому?        ) Железнякову Юрию Юрьевичу 
 
// 4 - винительный  ( вижу кого?   ) Железнякова Юрия Юрьевича  
 
// 5 - творительный ( кем?         ) Железняковым Юрием Юрьевичем    
 
// 6 - предложный   ( о ком?       ) Железнякове Юрии Юрьевиче 
 
// Если задать Z2 меньше 0, то на выходе получим от -1=Железняков Ю. Ю. до -6=Железнякове Ю. Ю.
 
// z3 - параметр Пол может не указываться, но при наличии фамилий с 
 
// инициалами точное определение пола невозможно, поэтому предлагается задавать пол этим
 
// параметром  1 - мужской 2 - женский  
 
// ДЛЯ СКЛОНЕНИЯ ПРОФЕССИЙ ИСПОЛЬЗУЙТЕ ФУНКЦИЮ ПАДЕЖП И БУДЕТ ВАМ СЧАСТЬЕ!
 
// ---------------------------------------------------------------------------------------
 
// Бибик Галушка Цой Николайчик Наталия Петровна Герценберг Кривошей Капица-Метелица
 
// Если Падеж(Фио ,1 ,3),       то на выходе получим Фамилия Имя Отчество и т.д.
 
// Если Падеж(Фио ,1 ,3,""1"" ),  то                   Фамилия 
 
// Если Падеж(Фио ,1 ,3,""2"" ),  то                   Имя 
 
// Если Падеж(Фио ,1 ,3,""3"" ),  то                   Отчество 
 
// Если Падеж(Фио, 1 ,3,""12"" ), то                   Фамилия Имя 
 
// Если Падеж(Фио, 1 ,3,""23"" ), то                   Имя Отчество 
 
// Если Падеж(Фио,-1 ,3,""231"" ),то                   И. О. Фамилия 
 
// Если Падеж(Фио,-1 ,3,""23"" ), то                   И. О.  
 
// 10-11-2003 3-20
 
Функция Падеж(z1,z2=2,z3=3,z4=""123"",z5=1) Экспорт
    z6=Нрег(Прав(СокрП(z1),4));
    z7=Прав(z6,1);
  Возврат?(z5<4,Падеж(СокрЛП(СтрЗаменить(Сред(z1,Найти(z1+"" "","" "")+1),""."","". "")),z2,z3,СтрЗаменить(z4,z5,ПадежС(?((z5=3)и(z7=""ы""),z1,Лев(z1,Найти(z1+"" "","" "")-1)),z2,Сред(""ча""+z7,?(z3=3,?(z6=""оглы"",1,?(z6=""кызы"",1,3)),z3),1),z5)+"" ""),z5+1),z4);
КонецФункции

Функция ПадежП(Знач z1,Знач z2,z3=0) Экспорт
  z1=СокрЛП(z1);z4=Найти(z1+"" "","" "")+1;z5=Лев(z1,z4-2);z6=Прав(z5,2);
  z7=?((Найти(""ая ий ый"",z6)>0)и(Найти(""ющий нный"",Сред(z1,z4-5,4))=0)и(z3=0),""1"",""*"");
Возврат НРег(?((z6=""ая"")или(Прав(z6,1)=""а""),ПадежС(z5,z2,z7,1)+"" ""+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,""ч"",1)+?((z6=""ий"")и(Найти(z1,"" "")=0),"""","" ""+?(z7=""1"",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
КонецФункции
"}
},
{0,
{"ЗапросЧерезCOM",0,0,"","V8Запрос = Соединение.NewObject(""Запрос"");"}
},
{0,
{"КешПоиска",0,0,"","Перем мТЗПоискКэш Экспорт;

Процедура СоздатьСтруктурумТЗПоискКэш() Экспорт
	мТЗПоискКэш = Новый ТаблицаЗначений();
	мТЗПоискКэш.Колонки.Добавить(""МетаданныеИмя"");
	мТЗПоискКэш.Колонки.Добавить(""Код"");
	мТЗПоискКэш.Колонки.Добавить(""фнмКодДляСинхронизации"");
	мТЗПоискКэш.Колонки.Добавить(""Наименование"");
	мТЗПоискКэш.Колонки.Добавить(""ЭтоГруппа"");
	мТЗПоискКэш.Колонки.Добавить(""Ссылка"");
	
	мТЗПоискКэш.Индексы.Добавить(""МетаданныеИмя"");
КонецПроцедуры //Получить

Функция ПолучитьЗначениеИзКэша(МетаданныеИмя,ПараметрыПоиска) Экспорт
	РезультатФункции = Новый Структура();
	пЗначениеИзКэша = Неопределено;
	ЭтоЗначениеИзКэша = Ложь;	
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить(""МетаданныеИмя"",МетаданныеИмя);
	ПараметрыПойскаСтрока = """";
	Для каждого СтрокаПараметрыПоиска из ПараметрыПоиска цикл
		ПараметрыОтбора.Вставить(СтрокаПараметрыПоиска.Ключ,СтрокаПараметрыПоиска.Значение);
		ПараметрыПойскаСтрока = ПараметрыПойскаСтрока + """" +СтрокаПараметрыПоиска.Ключ + "" [""+СтрокаПараметрыПоиска.Значение+""]"";
	Конеццикла;
	НайденныеСтроки = мТЗПоискКэш.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()=1 тогда
		пЗначениеИзКэша = НайденныеСтроки[0].Ссылка;
		ЭтоЗначениеИзКэша = Истина;
	ИначеЕсли НайденныеСтроки.Количество()>1 Тогда
		Сообщить(""Ошибка! Найдено более 1 значения в кэше МетаданныеИмя [""+МетаданныеИмя+""] по указанным параметрам поиска""
			+"" ""+ПараметрыПойскаСтрока);
	Иначе
		//Сообщить(""Не найден "");		
	Конецесли;
	РезультатФункции.Вставить(""ЭтоЗначениеИзКэша"",ЭтоЗначениеИзКэша);
	РезультатФункции.Вставить(""ЗначениеИзКэша"",пЗначениеИзКэша);
	Возврат РезультатФункции;	
КонецФункции //ПолучитьЗначениеИзКэша(ДопПараметры)

Процедура ДобавитьЗначениеВКэш(СсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска) Экспорт
	СтрокамТЗПоискКэш = мТЗПоискКэш.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокамТЗПоискКэш,ПараметрыПоиска);
	СтрокамТЗПоискКэш.Ссылка = СсылкаНаОбъект;
	СтрокамТЗПоискКэш.МетаданныеИмя = МетаданныеИмя;
КонецПроцедуры //ДобавитьЗначениеВКэш(Справочники.Модели.ПустаяСсылка(),""Модели"",ПараметрыПоиска)

Функция ПолучитьСсылкуНаОбъект(МетаданныеИмя,КлючПоиска,ЗначениеДляПоиска) Экспорт 
	пСсылкаНаОбъект = Неопределено;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить(КлючПоиска,ЗначениеДляПоиска);
	РезультатФункции = ПолучитьЗначениеИзКэша(МетаданныеИмя,ПараметрыПоиска);	
	Если РезультатФункции.ЭтоЗначениеИзКэша Тогда
		пСсылкаНаОбъект = РезультатФункции.ЗначениеИзКэша;
		Возврат пСсылкаНаОбъект;
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ЗначениеДляПоиска) Тогда
		ДобавитьЗначениеВКэш(пСсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска);		
		Возврат пСсылкаНаОбъект;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляПоиска(МетаданныеИмя);	 
	Запрос.УстановитьПараметр(КлючПоиска, ЗначениеДляПоиска);
	РезультатЗапроса = Запрос.Выполнить();

	пСсылкаНаОбъект = ПолучитьЗначениеИзЗапроса(РезультатЗапроса,МетаданныеИмя,ПараметрыПоиска);
	Возврат пСсылкаНаОбъект;
	
КонецФункции //ПолучитьСсылкуНаОбъект()

Функция ПолучитьТекстЗапросаДляПоиска(МетаданныеИмя) Экспорт 
	ТекстЗапроса = Неопределено;
	Если МетаданныеИмя = ""фнмБренды"" Тогда
		ТекстЗапроса = ""
		|ВЫБРАТЬ
		|	фнмБренды.Ссылка,
		|	фнмБренды.Наименование
		|ИЗ
		|	Справочник.фнмБренды КАК фнмБренды
		|ГДЕ
		|	фнмБренды.Код = &Код	
		|"";
	ИначеЕсли МетаданныеИмя = ""фнмСчетаМСФО"" Тогда
		ТекстЗапроса = ""
		|ВЫБРАТЬ
		|	фнмСчетаМСФО.Ссылка,
		|	фнмСчетаМСФО.Наименование
		|ИЗ
		|	Справочник.фнмСчетаМСФО КАК фнмСчетаМСФО
		|ГДЕ
		|	фнмСчетаМСФО.Код = &Код"";
	ИначеЕсли МетаданныеИмя = ""фнмНаправленияДеятельности"" Тогда
		ТекстЗапроса = ""
		|ВЫБРАТЬ
		|	фнмНаправленияДеятельности.Ссылка,
		|	фнмНаправленияДеятельности.Наименование
		|ИЗ
		|	Справочник.фнмНаправленияДеятельности КАК фнмНаправленияДеятельности
		|ГДЕ
		|	фнмНаправленияДеятельности.Код = &Код"";	
	ИначеЕсли МетаданныеИмя = ""фнмСтатьиБюджета"" Тогда
		ТекстЗапроса = ""ВЫБРАТЬ
		|	фнмСтатьиБюджета.Ссылка,
		|	фнмСтатьиБюджета.Наименование
		|ИЗ
		|	Справочник.фнмСтатьиБюджета КАК фнмСтатьиБюджета
		|ГДЕ
		|	фнмСтатьиБюджета.фнмКодДляСинхронизации = &фнмКодДляСинхронизации"";				
	Иначе
		ВызватьИсключение ""Ошибка! Нет текста запроса для поиска""+МетаданныеИмя;
	Конецесли;
	Возврат ТекстЗапроса;	
КонецФункции //ПолучитьТекстЗапросаДляПоиска()

Функция ПолучитьЗначениеИзЗапроса(РезультатЗапроса,МетаданныеИмя,ПараметрыПоиска) Экспорт 
	пЗначениеИзЗапроса = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	ВыборкаКоличество = Выборка.Количество();
	Если ВыборкаКоличество = 0 Тогда		
		ДобавитьЗначениеВКэш(Неопределено,МетаданныеИмя,ПараметрыПоиска);
		ТекстОшибки = ""ВНИМАНИЕ! Не найдена ""+МетаданныеИмя + Символы.ПС;
		Для каждого ЭлПараметрыПоиска из ПараметрыПоиска цикл
			ТекстОшибки = ТекстОшибки + "" - Ключ ""+ЭлПараметрыПоиска.Ключ + "" Значение [""+ЭлПараметрыПоиска.Значение+""]"" + Символы.ПС;
		Конеццикла;
		Сообщить(ТекстОшибки);
	ИначеЕсли ВыборкаКоличество > 1 Тогда
		ТекстОшибки = ""ВНИМАНИЕ! Найдено более 1 ""+МетаданныеИмя + Символы.ПС;
		Для каждого ЭлПараметрыПоиска из ПараметрыПоиска цикл
			ТекстОшибки = ТекстОшибки + "" - Ключ ""+ЭлПараметрыПоиска.Ключ + "" Значение [""+ЭлПараметрыПоиска.Значение+""]"" + Символы.ПС;
		Конеццикла;
		Сообщить(ТекстОшибки);
		Пока Выборка.Следующий() Цикл
			ДобавитьЗначениеВКэш(Неопределено,МетаданныеИмя,ПараметрыПоиска);
		КонецЦикла;		
	Иначе
		Выборка.Следующий();
		пЗначениеИзЗапроса = Выборка.Ссылка;
		ДобавитьЗначениеВКэш(пЗначениеИзЗапроса,МетаданныеИмя,ПараметрыПоиска);
	Конецесли;
	Возврат пЗначениеИзЗапроса;
КонецФункции //ПолучитьЗначениеИзЗапроса()
"}
},
{0,
{"ЗагрузкаДанныхИзМакета",0,0,"","Макет = ПолучитьМакет(""СоответствиеПолей_ЗагрузкаИзSalesPortal"");

Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
	ИмяПоляКлиенты = СокрЛП(Макет.Область(НомерСтроки,1).Текст);
	ИмяПоляГруппыКлиентов = СокрЛП(Макет.Область(НомерСтроки,2).Текст);
	ИмяПараметраФункции = СокрЛП(Макет.Область(НомерСтроки,3).Текст);
	
	СтрокаТЗСоответствиеИменПолейРодителейИДетей = ТЗСоответствиеИменПолейРодителейИДетей.Добавить();
	СтрокаТЗСоответствиеИменПолейРодителейИДетей.ИмяПоляКлиенты = ИмяПоляКлиенты;
	СтрокаТЗСоответствиеИменПолейРодителейИДетей.ИмяПоляГруппыКлиентов = ИмяПоляГруппыКлиентов;
	СтрокаТЗСоответствиеИменПолейРодителейИДетей.ИмяПараметраФункции = ИмяПараметраФункции;
	
КонецЦикла;
"}
},
{0,
{"РегламентныеЗадания",0,0,"","	СписокАдресовЭлектроннойПочты = Новый СписокЗначений();
	Для каждого ЭлМассиваКонтроллеровРегламентныхЗаданий из МассивКонтроллеровРегламентныхЗаданий цикл
		СписокАдресовЭлектроннойПочты.Добавить(ЭлМассиваКонтроллеровРегламентныхЗаданий);			
	Конеццикла;
	
	МассивОшибок = Новый Массив();
	Для каждого ЭлМассиваКонтролируемыхРегламентныхЗаданий из МассивКонтролируемыхРегламентныхЗаданий цикл
		ИмяРеглЗадания = ЭлМассиваКонтролируемыхРегламентныхЗаданий;
		Отбор = Новый Структура();
		Отбор.Вставить(""Метаданные"",ИмяРеглЗадания);
		Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		
		Для Каждого РеглЗадание из Регламентные Цикл
			Если НЕ РеглЗадание.Использование Тогда
				ТекстОшибки = ""Ошибка! отключено использование контролируемого регламентного задания [""+РеглЗадание.Наименование+""]""
					+"" Использование = Ложь"" ;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			Конецесли;
			ДолжноБытьВыполненоСегодня = Ложь;
			Расписание = РеглЗадание.Расписание;			
			ЗапускаетсяДнейВНеделю = Расписание.ДниНедели.Количество()+1;
			Если Расписание.ПериодПовтораДней = 1
				И ЗапускаетсяДнейВНеделю = 7 Тогда
				ДолжноБытьВыполненоСегодня = Истина;
			Иначе
				Если Расписание.ТребуетсяВыполнение(ДатаПроверки) Тогда
					ДолжноБытьВыполненоСегодня = Истина;
				Конецесли;
			Конецесли;
			Если НЕ ДолжноБытьВыполненоСегодня Тогда
				Продолжить;
			Конецесли;
			ПоследнееЗадание = РеглЗадание.ПоследнееЗадание;
			Если ПоследнееЗадание = Неопределено Тогда
				ТекстОшибки = ""Ошибка! не удалось получить последнее фоновое задание ""
					"" для регламентного задания [""+ИмяРеглЗадания+""]""
					+"" Это может быть следующее: "" + Символы.ПС
					+""1) в течении дня службу 1с перезапускали и список фоновых заданий очистился и это не ошибка;"" + Символы.ПС
					+""2) вообще отключены регламентные задания и это ошибка.""+ Символы.ПС
					+""3) не запускалось регламентное задания и это ошибка."";
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;				
			КонецЕсли;
			СостояниеПоследнегоЗадания = ПоследнееЗадание.Состояние;
			Если СостояниеПоследнегоЗадания = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				ТекстОшибки = ""Ошибка! задание не выполнилось успешно. "" + Символы.ПС
					+"" регламентное задание [""+РеглЗадание.Наименование+""] ""
					+"" СостояниеПоследнегоЗадания [""+СостояниеПоследнегоЗадания+""]"";
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;						
			Конецесли;
			ДатаНачалаПоследнегоЗадания = ПоследнееЗадание.Начало;
			ДатаЗавершенияПоследнегоЗадания = ПоследнееЗадание.Конец;
			
			Если СостояниеПоследнегоЗадания = СостояниеФоновогоЗадания.Активно Тогда
				ДлительностьВыполненияЧасов = Окр((ТекущаяДата() - ДатаНачалаПоследнегоЗадания)/3600,2);
				Если ДлительностьВыполненияЧасов > 3 Тогда
					ТекстОшибки = ""Ошибка! задание выполняется уже больше 3-х часов. ""
						+"" регламентное задание [""+РеглЗадание.Наименование+""] "" + Символы.ПС
						+"" ДатаНачалаПоследнегоЗадания [""+ДатаНачалаПоследнегоЗадания+""]"" + Символы.ПС
						+"" ДлительностьВыполненияЧасов [""+ДлительностьВыполненияЧасов+""]"";
					МассивОшибок.Добавить(ТекстОшибки);					
				Конецесли;
				Продолжить;						
			Конецесли;			
			
			Если НачалоДня(ДатаПроверки) <> НачалоДня(ДатаНачалаПоследнегоЗадания) Тогда
				ТекстОшибки = ""Ошибка! сегодня не выполнялось""
					+"" регламентное задание [""+РеглЗадание.Наименование+""] "" + Символы.ПС
					+"" ДатаНачалаПоследнегоЗадания [""+ДатаНачалаПоследнегоЗадания+""]"" + Символы.ПС
					+"" ДатаЗавершенияПоследнегоЗадания [""+ДатаЗавершенияПоследнегоЗадания+""]""
					;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;						
			Конецесли;
		КонецЦикла;
		
	Конеццикла;
"}
}
}
}
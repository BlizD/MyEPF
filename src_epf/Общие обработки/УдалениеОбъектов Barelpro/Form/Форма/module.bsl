Перем НарушенаПоследовательностьНажатияКнопок;
Перем ИнформационнаяБазаФайловая;
Перем СпЗамен;
Перем СХБЗ, СХБЗ_Доп;   //структура хранения базы данных

//основные процедуры

Процедура ЦиклОбновитьОбъектыПоиска(МД, ТипМД, МассивОбъектов)
	
	СчетчикТотал = МД.Количество();
	Счетчик = 1;
	
	Для Каждого ЭлементМД Из МД Цикл
		
		//визуализация
		Состояние(ТипМД + ": " + Счетчик + " из " + СчетчикТотал);
		Счетчик = Счетчик + 1;
		
		ИмяДокумента = ЭлементМД.Имя;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) КАК КолВсего
		                      |ИЗ
		                      |	" + ЭлементМД.ПолноеИмя() + " КАК Т
		                      |");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.КолВсего > 0 Тогда
				
				НоваяСтрока = ОбъектыПоиска.Добавить();
				НоваяСтрока.ТипМД = ТипМД;
				НоваяСтрока.ОбъектМД = ЭлементМД.Имя;
				НоваяСтрока.КолВсего = Выборка.КолВсего;
				НоваяСтрока.Синоним = ЭлементМД.Синоним;
				
				МассивОбъектов.Добавить(ЭлементМД);
				
				Запрос = Новый Запрос("ВЫБРАТЬ 
				                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Ссылка) КАК КолПомеченных
				                      |ИЗ
				                      |	" + ЭлементМД.ПолноеИмя() + " КАК Т
				                      |ГДЕ
				                      |	Т.ПометкаУдаления");
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					НоваяСтрока.КолПомеченных = Выборка.КолПомеченных;
					
				КонецЕсли;
				
				Если ТипМД = "Документ" Тогда
					
					НоваяСтрока.ТекстЗапроса_БезДвижений = 
					"ИЗ
					|	Документ." + ЭлементМД.Имя + " КАК ТекДокумент
					|ГДЕ
					|	(НЕ ТекДокумент.ПометкаУдаления)
					|	";
					
					Для Каждого МДРегистра Из Метаданные.Документы[ЭлементМД.Имя].Движения Цикл
						
						НоваяСтрока.ТекстЗапроса_БезДвижений = НоваяСтрока.ТекстЗапроса_БезДвижений + "
						|И 1 НЕ В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ " + МДРегистра.ПолноеИмя() + " КАК Р ГДЕ Р.Регистратор = ТекДокумент.Ссылка)";
						
					КонецЦикла;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекДокумент.Ссылка) КАК КолБезДвижений
					|" + НоваяСтрока.ТекстЗапроса_БезДвижений;
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						НоваяСтрока.КолБезДвижений = Выборка.КолБезДвижений;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьОбъектыПоиска()
	
	ОбъектыПоиска.Очистить();
	
	МассивОбъектов = Новый Массив;
	
	ЦиклОбновитьОбъектыПоиска(Метаданные.Справочники, "Справочник", МассивОбъектов);
	ЦиклОбновитьОбъектыПоиска(Метаданные.Документы, "Документ", МассивОбъектов);	
	
	ОбъектыПоиска.Сортировать("КолПомеченных Убыв");
	
	Если МассивОбъектов.Количество()= 0 ИЛИ ИнформационнаяБазаФайловая ИЛИ ПустаяСтрока(Server) ИЛИ ПустаяСтрока(DataBase) ИЛИ ПустаяСтрока(Uid) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = "driver={SQL Server}; Server=" + Server + "; Database=" + Database + "; Uid=" + Uid + "; Pwd=" + Pwd + ";";
	Connection.Open();
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandText = ЭтотОбъект.ПолучитьМакет("TSQL_ОбъемыТаблиц").ПолучитьТекст();
	Выборка = Command.Execute();
	
	ТЗ = ПолучитьСтруктуруХраненияБазыДанных(МассивОбъектов, Истина);
	
	Пока Выборка.EOF() = 0 Цикл
		
		Table_Name = Выборка.Fields("Table_Name").Value;
		Строка = ТЗ.Найти(Table_Name, "ИмяТаблицыХранения");
		Если Строка <> Неопределено Тогда
			
			ИмяТаблицыСтр = Строка.ИмяТаблицы;
			ПозТочки = Найти(ИмяТаблицыСтр, ".");
			ТипСтр = Лев(ИмяТаблицыСтр, ПозТочки - 1);
			ОбъектСтр = Сред(ИмяТаблицыСтр, ПозТочки + 1);
			ПозТочки = Найти(ОбъектСтр, ".");
			Если ПозТочки > 0 Тогда
				ОбъектСтр = Лев(ОбъектСтр, ПозТочки - 1);
			КонецЕсли;
			
			НайденныеСтроки = ОбъектыПоиска.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", ТипСтр, ОбъектСтр));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Строка = НайденныеСтроки[0]; 
				
				Строка.Total_Table_Size = Строка.Total_Table_Size + Число(СтрЗаменить(Выборка.Fields("Total_Table_Size").Value, " KB", ""));
				Строка.Data_Size = Строка.Data_Size + Число(СтрЗаменить(Выборка.Fields("Data_Size").Value, " KB", ""));
				Строка.Index_Size = Строка.Index_Size + Число(СтрЗаменить(Выборка.Fields("Index_Size").Value, " KB", ""));
				Строка.Unused_space = Строка.Unused_space + Число(СтрЗаменить(Выборка.Fields("Unused_space").Value, " KB", ""));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Выборка.MoveNext();
		
	КонецЦикла;
	
	Для Каждого Строка Из ОбъектыПоиска Цикл
		
		Строка.ВесОднойЗаписи = Строка.Total_Table_Size / Строка.КолВсего;
		
	КонецЦикла;
	
	ОбъектыПоиска.Сортировать("ВесОднойЗаписи Убыв");
	
КонецПроцедуры

Процедура НайтиПомеченные()
	
	НарушенаПоследовательностьНажатияКнопок = Истина;
	
	Помеченные.Очистить();
	              
	НайденныеСтроки = ОбъектыПоиска.НайтиСтроки(Новый Структура("Пометка", Истина));
	СчетчикТотал = НайденныеСтроки.Количество();
	Счетчик = 0;
	
	Для Каждого СтрокаСписка Из НайденныеСтроки Цикл
		
		//визуализация
		Состояние("Поиск помеченных объектов: Виды:" + Счетчик + " из " + СчетчикТотал);
		
		Запрос = Новый Запрос("Выбрать Т.Ссылка КАК ПомеченныйОбъект Из " + 
		СтрокаСписка.ТипМД + "." + СтрокаСписка.ОбъектМД + " как Т Где Т.ПометкаУдаления");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Помеченные.Добавить();
			НоваяСтрока.ТипМД = СтрокаСписка.ТипМД;
			НоваяСтрока.ОбъектМД = СтрокаСписка.ОбъектМД;
			НоваяСтрока.ОбъектБД = Выборка.ПомеченныйОбъект;
			
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура НайтиБезДвижений()
	
	НарушенаПоследовательностьНажатияКнопок = Истина;
	
	ДокументыБезДвижений.Очистить();
	
	НайденныеСтроки = ОбъектыПоиска.НайтиСтроки(Новый Структура("Пометка, ТипМД", Истина, "Документ"));
	
	СчетчикТотал = НайденныеСтроки.Количество();
	Счетчик = 0;
	              
	Для Каждого СтрокаСписка Из НайденныеСтроки Цикл
		
		//визуализация
		Состояние("Поиск документов без движений: Виды:" + Счетчик + " из " + СчетчикТотал);
		
		СтрокаСписка.КолБезДвижений = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекДокумент.Ссылка КАК Документ
		|" + СтрокаСписка.ТекстЗапроса_БезДвижений + "
		|	" + ?(ЗначениеЗаполнено(ДатаНачала), "И ТекДокумент.Дата >= &ДатаНачала","") + "
		|	" + ?(ЗначениеЗаполнено(ДатаОкончания), "И ТекДокумент.Дата <= &ДатаОкончания", "");
		
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
		
		ДокВыборка = Запрос.Выполнить().Выбрать();
		
		ТоталКол2 = ДокВыборка.Количество();
		
		Пока ДокВыборка.Следующий() Цикл
			
			НоваяСтрока = ДокументыБезДвижений.Добавить();
			НоваяСтрока.ТипМД = СтрокаСписка.ТипМД;
			НоваяСтрока.ОбъектМД = СтрокаСписка.ОбъектМД;
			НоваяСтрока.ОбъектБД = ДокВыборка.Документ;
			
			СтрокаСписка.КолБезДвижений = СтрокаСписка.КолБезДвижений + 1;
				
		КонецЦикла;
				
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
		
		
КонецПроцедуры

Процедура ЗаполнитьСхемуАнализа()
	
	НарушенаПоследовательностьНажатияКнопок = Ложь;
	
	СтруктураМетаданных.Очистить();
	
	ТипыДанных = Помеченные.Выгрузить( ,"ТипМД, ОбъектМД");
	ТипыДанных.Свернуть("ТипМД, ОбъектМД");
	
	ТипыДанных2 = ДокументыБезДвижений.Выгрузить( ,"ТипМД, ОбъектМД");
	ТипыДанных2.Свернуть("ТипМД, ОбъектМД");
	Для Каждого Строка Из ТипыДанных2 Цикл
		
		НоваяСтрока = ТипыДанных.Добавить();
		НоваяСтрока.ТипМД = Строка.ТипМД;
		НоваяСтрока.ОбъектМД = Строка.ОбъектМД;
		
	КонецЦикла;
	ТипыДанных.Свернуть("ТипМД, ОбъектМД");
	
	//таблица СХБЗ потом будет использоваться для получения имен таблиц SQL при удалении объектов БД средствами SQL
	СХБЗ = ПолучитьСтруктуруХраненияБазыДанных(, Истина);
	СХБЗ.Колонки.Добавить("ТипМД");
	СХБЗ.Колонки.Добавить("ОбъектМД");
	
	СХБЗ_Доп = Новый ТаблицаЗначений;
	СХБЗ_Доп.Колонки.Добавить("ТипМД");
	СХБЗ_Доп.Колонки.Добавить("ОбъектМД");
	СХБЗ_Доп.Колонки.Добавить("ИмяТаблицыХранения");
	СХБЗ_Доп.Колонки.Добавить("Коннектор");
	
	СчетчикТотал = СХБЗ.Количество();
	Счетчик = 1;
	
	Для Каждого Строка Из СХБЗ Цикл
		
		//визуализация
		Состояние("Заполнение схемы анализа: " + Окр(Счетчик / СчетчикТотал * 100, 0) + "%");
		Счетчик = Счетчик + 1;
		ОбработкаПрерыванияПользователя();
		
		Если Не ПустаяСтрока(Строка.ИмяТаблицы) Тогда
			
			//для документов при удалении средствами SQL добавляем таблицы ЖурналДокументов и Последовательность
			Если Найти(Строка.Метаданные, "ЖурналДокументов.") = 1 Тогда
			
				Для Каждого МДДокумент Из Метаданные.НайтиПоПолномуИмени(Строка.ИмяТаблицы).РегистрируемыеДокументы Цикл
				
					НайденныеСтроки = ТипыДанных.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", "Документ", МДДокумент.Имя));
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						НоваяСтрока = СХБЗ_Доп.Добавить();
						НоваяСтрока.ТипМД = "Документ";
						НоваяСтрока.ОбъектМД = МДДокумент.Имя;
						НоваяСтрока.ИмяТаблицыХранения = Строка.ИмяТаблицыХранения;
						НоваяСтрока.Коннектор = "_DocumentRRef";
						
					КонецЕсли;
					
				КонецЦикла;
				
				Продолжить;
			
			КонецЕсли;
			
			Если Найти(Строка.Метаданные, "Последовательность.")= 1 Тогда
			
				Для Каждого МДДокумент Из Метаданные.НайтиПоПолномуИмени(Строка.Метаданные).Документы Цикл
				
					НайденныеСтроки = ТипыДанных.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", "Документ", МДДокумент.Имя));
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						НоваяСтрока = СХБЗ_Доп.Добавить();
						НоваяСтрока.ТипМД = "Документ";
						НоваяСтрока.ОбъектМД = МДДокумент.Имя;
						НоваяСтрока.ИмяТаблицыХранения = Строка.ИмяТаблицыХранения;
						Если Строка.Назначение = "ГраницыПоследовательности" Тогда
							
							НоваяСтрока.Коннектор = "_Recorder_RRRef";
							
						Иначе
							
							НоваяСтрока.Коннектор = "_RecorderRRef";
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Продолжить;
			
			КонецЕсли;
			
			Если 
				Строка.ИмяТаблицы = ""
				ИЛИ Найти(Строка.ИмяТаблицы, "РегистрНакопления.") = 1 И Строка.Назначение <> "Основная"
				ИЛИ Найти(Строка.ИмяТаблицы, "РегистрСведений.") = 1 И Строка.Назначение <> "Основная"
				ИЛИ Найти(Строка.ИмяТаблицы, "РегистрБухгалтерии.") = 1 И Строка.Назначение <> "Основная"
				ИЛИ Найти(Строка.ИмяТаблицы, "РегистрРасчета.") = 1 И (Строка.Назначение <> "Основная" ИЛИ Найти(Строка.ИмяТаблицы, ".Перерасчет.") > 0)
				ИЛИ Найти(Строка.ИмяТаблицы, "Перечисление.") = 1
				ИЛИ Найти(Строка.ИмяТаблицы, "КритерийОтбора.") = 1
			Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			//заполнение SQL-имен таблиц объекта МД
			Поз = Найти(Строка.ИмяТаблицы, "Справочник.");
			Если Поз = 1 Тогда
				
				Строка.ТипМД = "Справочник";
				
			Иначе
				
				Поз = Найти(Строка.ИмяТаблицы, "Документ.");
				Если Поз = 1 Тогда
					
					Строка.ТипМД = "Документ";
					
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если Поз > 0 Тогда
				
				ТекОбъектМД = СтрЗаменить(Строка.ИмяТаблицы, Строка.ТипМД + ".", "");
				Поз = Найти(ТекОбъектМД, ".");
				Если Поз > 0 Тогда
					
					Строка.ОбъектМД = Лев(ТекОбъектМД, Поз - 1);
					
				Иначе
					
					Строка.ОбъектМД = ТекОбъектМД;
					
				КонецЕсли;
				
			КонецЕсли;
				
				
			//Запрос = Новый Запрос("Выбрать Первые 1 1 Из " + Строка.ИмяТаблицы);
			//Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			
			Для Каждого Строка2 Из Строка.Поля Цикл
				
				Если Не ПустаяСтрока(Строка2.Метаданные) И Строка2.ИмяПоля <> "НомерСтроки"
					ИЛИ (Строка2.ИмяПоля = "Владелец" ИЛИ Строка2.ИмяПоля = "Родитель") И Лев(Строка.ИмяТаблицы, 11) = "Справочник."
					Тогда
					
						ИмяТаблицыВЗапросе = Строка.ИмяТаблицы;
						ИмяРеквизита = Строка2.ИмяПоля;
						
						Если Строка2.ИмяПоля = "Владелец" И Лев(Строка.ИмяТаблицы, 11) = "Справочник." И Найти(Строка.Метаданные, ".ТабличнаяЧасть.") = 0 Тогда
							
							МДВладельцы = МетаданныеНайтиПоПолномуИмени(Строка.Метаданные).Владельцы;
							Для Каждого МДВладелец ИЗ МДВладельцы Цикл
								
								СоздатьЗапросВСхемеАнализа(ТипыДанных, МДВладелец.ПолноеИмя(), ИмяТаблицыВЗапросе, "Владелец");
								
							КонецЦикла;
							
						ИначеЕсли Строка2.ИмяПоля = "Родитель"  И Лев(Строка.ИмяТаблицы, 11) = "Справочник."  И Найти(Строка.Метаданные, ".ТабличнаяЧасть.") = 0 Тогда

							МД = МетаданныеНайтиПоПолномуИмени(Строка.Метаданные);
							СоздатьЗапросВСхемеАнализа(ТипыДанных, Строка.ИмяТаблицы, ИмяТаблицыВЗапросе, "Родитель");
							
						Иначе
							
							МД = МетаданныеНайтиПоПолномуИмени(Строка2.Метаданные);
							Если МД <> Неопределено Тогда
								
								МассивТипов = МД.Тип.Типы();
								
								Для Каждого ТипРеквизита Из МассивТипов Цикл
									
									МДТипаРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
									Если МДТипаРеквизита <> Неопределено Тогда
										
										ПолноеИмяМДТипа = МДТипаРеквизита.ПолноеИмя();
										
										//запись регистра сведений с ведущим измерением должна удаляться вместе с объектом, на который ссылается это измерение
										Если Найти(Строка2.Метаданные, "РегистрСведений.") = 1 Тогда
											Если Найти(Строка2.Метаданные, ".Измерение.") > 0 Тогда
												Если МД.Ведущее Тогда
													
													//но эту запись надо удалить, если удаление средствами SQL
													Поз = Найти(ПолноеИмяМДТипа, ".");
													ТипМД = Лев(ПолноеИмяМДТипа, Поз - 1);
													ОбъектМД = Сред(ПолноеИмяМДТипа, Поз + 1);
													Если ТипыДанных.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", ТипМД, ОбъектМД)).Количество() > 0 Тогда
													
														//для составных типов надо брать только поле,у которого на конце RRef
														Если Найти(Строка2.ИмяПоляХранения, "RRef") > 0 Тогда
															
															НоваяСтрока = СХБЗ_Доп.Добавить();
															НоваяСтрока.ТипМД = ТипМД;
															НоваяСтрока.ОбъектМД = ОбъектМД;
															НоваяСтрока.ИмяТаблицыХранения = Строка.ИмяТаблицыХранения;
															НоваяСтрока.Коннектор = Строка2.ИмяПоляХранения;
														
														КонецЕсли;
													КонецЕсли;
													
													Продолжить;
													
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										
										СоздатьЗапросВСхемеАнализа(ТипыДанных, ПолноеИмяМДТипа, ИмяТаблицыВЗапросе, ИмяРеквизита);
										
									КонецЕсли;
									
								КонецЦикла;
							
							КонецЕсли;
							
						КонецЕсли;
						
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//отдельно строим запросы для субконто регистров бухгалтерии
	Для Каждого МДРегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		
		Выборка = ПланыВидовХарактеристик[МДРегистрБухгалтерии.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивТипов = Выборка.ТипЗначения.Типы();
			Для Каждого ТипРеквизита Из МассивТипов Цикл
				
				МДТипаРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
				Если МДТипаРеквизита <> Неопределено Тогда
					
					ПолноеИмяМДТипа = МДТипаРеквизита.ПолноеИмя();
					СоздатьЗапросВСхемеАнализа(ТипыДанных, ПолноеИмяМДТипа, "РегистрБухгалтерии." + МДРегистрБухгалтерии.Имя + ".Субконто", "Значение", Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	
	СтруктураМетаданных.Сортировать("ТипМД, ОбъектМД, ИмяТаблицыВЗапросе");
	
КонецПроцедуры

Функция МетаданныеНайтиПоПолномуИмени(ПолноеИмяМД)
	
	
	МассивПолей = Новый Массив;
	СтрМД = ПолноеИмяМД;
	
	Поз = Найти(СтрМД, ".");
	Пока Поз > 0 Цикл
		
		МассивПолей.Добавить(Лев(СтрМД, Поз - 1));
		СтрМД = Сред(СтрМД, Поз + 1);
		Поз = Найти(СтрМД, ".");
		
	КонецЦикла;
	
	МассивПолей.Добавить(СтрМД);
		
	МДРез = Неопределено;
	Для А = 0 По МассивПолей.Количество() - 1 Цикл
		
		ИмяПоля = СпЗамен.Получить(МассивПолей[А]);
		Если ИмяПоля = Неопределено Тогда
			
			ИмяПоля = МассивПолей[А];
			
		КонецЕсли;
		
		Если А = 0  Тогда
			
			МдРез = Метаданные[ИмяПоля];
			
		Иначе
			
			Попытка
				
				МДРез = МДРез[ИмяПоля];
				
			Исключение
				
				МДРез = МДРез[МассивПолей[А]];
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МДРез;
	
КонецФункции

Процедура СоздатьЗапросВСхемеАнализа(ТипыДанных, ПолноеИмяМДТипа, ИмяТаблицыВЗапросе, ИмяРеквизита, Субконто = Ложь)
	
	Поз = Найти(ПолноеИмяМДТипа, ".");
	ТипМД = Лев(ПолноеИмяМДТипа, Поз - 1);
	ОбъектМД = Сред(ПолноеИмяМДТипа, Поз + 1);
	
	//есть ли среди выбранных объектов на удаление типы, на которые ссылается данный реквизит
	Если ТипыДанных.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", ТипМД, ОбъектМД)).Количество() > 0 Тогда

		//для оптимизации, чтобы не плодить запросы к одинаковым таблицам
		НайденныеСтроки = СтруктураМетаданных.НайтиСтроки(Новый Структура("ИмяТаблицыВЗапросе, ТипМД, ОбъектМД", ИмяТаблицыВЗапросе, ТипМД, ОбъектМД));
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = СтруктураМетаданных.Добавить();
			НоваяСтрока.ИмяТаблицыВЗапросе = ИмяТаблицыВЗапросе;
			НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
			НоваяСтрока.ТипМД = ТипМД;
			НоваяСтрока.ОбъектМД = ОбъектМД;
			
			Если Субконто Тогда
				
				НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ " + НоваяСтрока.ИмяТаблицыВЗапросе  + " КАК Т ГДЕ Т.Значение = &Параметр";
				
			Иначе
				
				НоваяСтрока.ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ " + НоваяСтрока.ИмяТаблицыВЗапросе  + " КАК Т ГДЕ Т." + ИмяРеквизита + " = &Параметр";
				
			КонецЕсли;
			
		Иначе
			
			Если Найти(НайденныеСтроки[0].ТекстЗапроса, "Т." + ИмяРеквизита + " = &Параметр") = 0 И НЕ Субконто Тогда
				
				НайденныеСтроки[0].ТекстЗапроса = НайденныеСтроки[0].ТекстЗапроса + " ИЛИ Т." + ИмяРеквизита + " = &Параметр";
				НайденныеСтроки[0].ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита + "; " + ИмяРеквизита;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АнализироватьИУдалять()
	
	Если Помеченные.Количество() = 0 И ДокументыБезДвижений.Количество() = 0 Тогда
		
		Предупреждение("Нет ни одной строки на закладках ""Помеченные на удаление"" и ""Документы без движений""");
		
		Возврат;
		
	КонецЕсли;
	
	Если НарушенаПоследовательностьНажатияКнопок Тогда
		
		Если Вопрос("Нарушена последовательность нажатия кнопок. После заполнения ""Помеченные на удаление"" и ""Документы без движений"" надо заполнить ""Схема анализа"". Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
	
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураМетаданных.Количество() = 0 Тогда
		
		Если Вопрос("Схема анализа не заполнена, объекты будут удаляться без проверки! Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Удалять = Вопрос("Одновременно удалять?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	СчетчикТотал = Помеченные.Количество();	
	СчетчикТотал = СчетчикТотал + ДокументыБезДвижений.Количество();	
	Счетчик = 1;
	МожноУдалять = 0;
	Удалено = 0;
	ВремяНач = ТекущаяДата();
	
	Если Удалять = КодВозвратаДиалога.Да И УдалятьСредствамиSQL Тогда
		
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.ConnectionString = "driver={SQL Server}; Server=" + Server + "; Database=" + Database + "; Uid=" + Uid + "; Pwd=" + Pwd + ";";
		Connection.Open();
		
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;

	Иначе
		
		Connection = Неопределено;
		
	КонецЕсли;
		
	//Свернем таблицу схемы анализа СтруктураМетаданных
	СхемаАнализа = Новый ТаблицаЗначений;
	СхемаАнализа.Колонки.Добавить("ТипМД");
	СхемаАнализа.Колонки.Добавить("ОбъектМД");
	СхемаАнализа.Колонки.Добавить("ТекстЗапроса");
	
	СтруктураМетаданных.Сортировать("ТипМД, ОбъектМД");
	ТекТипМД = "";
	ТекОбъектМД = "";
	Для Каждого Строка Из СтруктураМетаданных Цикл
		
		Если ТекТипМД <> Строка.ТипМД ИЛИ ТекОбъектМД <> Строка.ОбъектМД Тогда
			
			НоваяСтрока = СхемаАнализа.Добавить();
			НоваяСтрока.ТипМД = Строка.ТипМД;
			НоваяСтрока.ОбъектМД = Строка.ОбъектМД;
			НоваяСтрока.ТекстЗапроса = Строка.ТекстЗапроса;
			
			ТекТипМД = Строка.ТипМД;
			ТекОбъектМД = Строка.ОбъектМД;
			
		Иначе
			
			НоваяСтрока.ТекстЗапроса = НоваяСтрока.ТекстЗапроса + "
			|;
			|" + Строка.ТекстЗапроса;
			
		КонецЕсли;
		
	КонецЦикла;
		
	АнализОднойИзТаблиц(СхемаАнализа, Помеченные, Удалять, Счетчик, Удалено, МожноУдалять, СчетчикТотал, Command, ВремяНач);
	АнализОднойИзТаблиц(СхемаАнализа, ДокументыБезДвижений, Удалять, Счетчик, Удалено, МожноУдалять, СчетчикТотал, Command, ВремяНач);
	
КонецПроцедуры

Процедура АнализОднойИзТаблиц(СхемаАнализа, Таб, Удалять, Счетчик, Удалено, МожноУдалять, СчетчикТотал, Command, ВремяНач)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из Таб Цикл
		
		ОбработкаПрерыванияПользователя();
		
		//визуализация
		Состояние("Анализ на удаление: " + Счетчик + " из " + СчетчикТотал + ", скорость:" + Формат(Окр((ТекущаяДата() - ВремяНач) / Счетчик, 3), "ЧДЦ=3") + " сек/шт, можно удалять: " + МожноУдалять + ", удалено: " + Удалено + ", объект МД: " + Строка.ОбъектБД);
		Счетчик = Счетчик + 1;
		
		Строка.МожноУдалять = Истина;
		
		//ищем ссылки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Параметр", Строка.ОбъектБД);
		
		НайденныеСтроки = СхемаАнализа.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Запрос.Текст = НайденныеСтроки[0].ТекстЗапроса;
			Пакет = Запрос.ВыполнитьПакет();
			Для Каждого СтрокаПакета Из Пакет Цикл
				
				Если СтрокаПакета.Выбрать().Количество() > 0 Тогда
					
					Строка.МожноУдалять = Ложь;				
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Строка.МожноУдалять Тогда
			
			НайденныеСтроки = ОбъектыПоиска.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				//еще раз проверим отсутствие движений
				Если Строка.ТипМД = "Документ" Тогда
					
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1
					|"
					+ НайденныеСтроки[0].ТекстЗапроса_БезДвижений
					+ "
					|И ТекДокумент.Ссылка = &Параметр
					|И НЕ ТекДокумент.ПометкаУдаления";
					
					Если Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
						
						Строка.МожноУдалять = Ложь;				
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
				//визуализация
				НайденныеСтроки[0].МожноУдалять = НайденныеСтроки[0].МожноУдалять + 1;
				МожноУдалять = МожноУдалять + 1;
				
				//удаление
				Если Удалять = КодВозвратаДиалога.Да Тогда
					
					Если УдалятьСредствамиSQL Тогда
						
						Если ЗаписыватьВЖС Тогда
							
							ЗаписьЖурналаРегистрации("Данные. Удаление", УровеньЖурналаРегистрации.Информация, Метаданные.НайтиПоПолномуИмени(Строка.ТипМД + "." + Строка.ОбъектМД), Строка.ОбъектБД, "Удалено средствами SQL", РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
							
						КонецЕсли;
						
						
						CommandText = "";
						GUID = Строка.ОбъектБД.УникальныйИдентификатор();
						GUID = "0x" + Сред(GUID, 20, 4) + Сред(GUID, 25, 12) + Сред(GUID, 15, 4) + Сред(GUID, 10, 4) + Сред(GUID, 1, 8);
						
						НайденныеСтроки = СХБЗ.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
						Если НайденныеСтроки.Количество() > 0 Тогда
							
							Для Каждого Строка3 Из НайденныеСтроки Цикл
								
								Если Строка3.Назначение = "Основная" ИЛИ Строка3.Назначение = "РегистрацияИзменений" Тогда
									
									Коннектор = "_IDRRef";
									
								ИначеЕсли Строка3.Назначение = "ТабличнаяЧасть" Тогда
									
									Стр = Сред(Строка3.ИмяТаблицыХранения, 2);
									Стр = Лев(Стр, Найти(Стр, "_") - 1);
									Коннектор = "_" + Стр + "_IDRRef";
									
								Иначе
									
									Продолжить;
									
								КонецЕсли;
								
								CommandText = CommandText + "
								|DELETE FROM " + Строка3.ИмяТаблицыХранения + " WHERE " + Коннектор + " = " + GUID;
								
								
							КонецЦикла;
							
						КонецЕсли;
						
						НайденныеСтроки = СХБЗ_Доп.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
						Если НайденныеСтроки.Количество() > 0 Тогда
							
							Для Каждого Строка3 Из НайденныеСтроки Цикл
							
								CommandText = CommandText + "
								|DELETE FROM " + Строка3.ИмяТаблицыХранения + " WHERE " + Строка3.Коннектор + " = " + GUID;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(CommandText) Тогда
							
							Command.CommandText = CommandText;
							Command.Execute();
							
						КонецЕсли;
					Иначе
						
						Строка.ОбъектБД.ПолучитьОбъект().Удалить();
						
					КонецЕсли;
					
					Удалено = Удалено + 1;
					СтрокиКУдалению.Добавить(Строка);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//визуализация
	Для Каждого Строка Из СтрокиКУдалению Цикл
		
		Таб.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПодключениеКSQL()
	
	Попытка
		
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.ConnectionString = "driver={SQL Server}; Server=" + Server + "; Database=" + Database + "; Uid=" + Uid + "; Pwd=" + Pwd + ";";
		Connection.Open();
		Предупреждение("ОК!",,"Проверка подключения к SQL");
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		УдалятьСредствамиSQL = Ложь;
		
	КонецПопытки;	

КонецПроцедуры

Процедура Замеры()
	
	Запрос = Новый Запрос;
	ТипыДанных = Помеченные.Выгрузить( ,"ТипМД, ОбъектМД");
	ТипыДанных.Свернуть("ТипМД, ОбъектМД");
	
	ТипыДанных2 = ДокументыБезДвижений.Выгрузить( ,"ТипМД, ОбъектМД");
	ТипыДанных2.Свернуть("ТипМД, ОбъектМД");
	Для Каждого Строка Из ТипыДанных2 Цикл
		
		НоваяСтрока = ТипыДанных.Добавить();
		НоваяСтрока.ТипМД = Строка.ТипМД;
		НоваяСтрока.ОбъектМД = Строка.ОбъектМД;
		
	КонецЦикла;
	ТипыДанных.Свернуть("ТипМД, ОбъектМД");
	
	СчетчикТотал = ТипыДанных.Количество();
	Счетчик = 1;
	
	Для Каждого Строка Из ТипыДанных Цикл
		
		ОбработкаПрерыванияПользователя();
		
		//визуализация
		Состояние("Обработано объектов МД: " + Счетчик + " из " + СчетчикТотал);
		Счетчик = Счетчик + 1;
		
		НайденныеСтроки = Помеченные.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ДокументыБезДвижений.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Параметр", НайденныеСтроки[0].ОбъектБД);
		НайденныеСтроки = СтруктураМетаданных.НайтиСтроки(Новый Структура("ТипМД, ОбъектМД", Строка.ТипМД, Строка.ОбъектМД));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Запрос.Текст = НайденнаяСтрока.ТекстЗапроса;
			ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Запрос.Выполнить().Выбрать();
			НайденнаяСтрока.ВремяЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНач) / 1000;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураМетаданных.Сортировать("ВремяЗапроса Убыв");
	
КонецПроцедуры
//действия формы

Процедура Кнопка1Нажатие(Элемент)
	
	Если ЭлементыФормы.ОбъектыПоиска.ВыделенныеСтроки.Количество() < 2 Тогда
		
		Для Каждого Строка Из ОбъектыПоиска Цикл
		
			Строка.Пометка = Ложь;
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из ЭлементыФормы.ОбъектыПоиска.ВыделенныеСтроки Цикл
			
			Строка.Пометка = Ложь;
		
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)
	
	Если ЭлементыФормы.ОбъектыПоиска.ВыделенныеСтроки.Количество() < 2 Тогда
		
		Для Каждого Строка Из ОбъектыПоиска Цикл
		
			Строка.Пометка = Истина;
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из ЭлементыФормы.ОбъектыПоиска.ВыделенныеСтроки Цикл
			
			Строка.Пометка = Истина;
		
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка5Нажатие(Элемент)
	
	ОбновитьОбъектыПоиска();
	
КонецПроцедуры

Процедура Кнопка6Нажатие(Элемент)
	
	НайтиПомеченные();
	
КонецПроцедуры

Процедура Кнопка7Нажатие(Элемент)
	
	НайтиБезДвижений();
	
КонецПроцедуры

Процедура Кнопка8Нажатие(Элемент)
	
	ЗаполнитьСхемуАнализа();
	
КонецПроцедуры

Процедура ДействияФормыМожноУдалить(Кнопка)
	
	АнализироватьИУдалять();
	
КонецПроцедуры

Процедура Кнопка9Нажатие(Элемент)
	
	ПроверитьПодключениеКSQL();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ИнформационнаяБазаФайловая Тогда
		
		УдалятьСредствамиSQL = Ложь;
		ЭлементыФормы.УдалятьСредствамиSQL1.Доступность = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура Кнопка10Нажатие(Элемент)
	
	Замеры();
	
КонецПроцедуры

НарушенаПоследовательностьНажатияКнопок = Истина;

ИнформационнаяБазаФайловая = Найти(Врег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 1;

СпЗамен = Новый Соответствие;
СпЗамен.Вставить("Константа", "Константы");
СпЗамен.Вставить("ПланОбмена", "ПланыОбмена");
СпЗамен.Вставить("Справочник", "Справочники");
СпЗамен.Вставить("Документ", "Документы");
СпЗамен.Вставить("Перечисление", "Перечисления");
СпЗамен.Вставить("ЖурналДокументов", "ЖурналыДокументы");
СпЗамен.Вставить("Отчет", "Отчеты");
СпЗамен.Вставить("Обработка", "Обработки");
СпЗамен.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
СпЗамен.Вставить("ПланСчетов", "ПланыСчетов");
СпЗамен.Вставить("ПланВидовРасчета", "ПланыВидовРасчета");
СпЗамен.Вставить("РегистрСведений", "РегистрыСведений");
СпЗамен.Вставить("РегистрНакопления", "РегистрыНакопления");
СпЗамен.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
СпЗамен.Вставить("РегистрРасчета", "РегистрыРасчета");
СпЗамен.Вставить("БизнесПроцесс", "БизнесПроцессы");
СпЗамен.Вставить("Задача", "Задачи");
СпЗамен.Вставить("Последовательность", "Последовательности");
СпЗамен.Вставить("Реквизит", "Реквизиты");
СпЗамен.Вставить("ПризнакУчета", "ПризнакиУчета");
СпЗамен.Вставить("ПризнакУчетаСубконто", "ПризнакиУчетаСубконто");
СпЗамен.Вставить("Измерение", "Измерения");
СпЗамен.Вставить("Ресурс", "Ресурсы");
СпЗамен.Вставить("ТабличнаяЧасть", "ТабличныеЧасти");
СпЗамен.Вставить("РеквизитАдресации", "РеквизитыАдресации");



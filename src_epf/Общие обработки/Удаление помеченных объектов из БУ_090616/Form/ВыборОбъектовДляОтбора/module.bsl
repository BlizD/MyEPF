////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
Перем РодительскиеТипыОбъектовМетаданных;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

// Процедура добавляет объект метаданных и устанавливает флаг "Отбирать" к дереву значений
// Параметры:
//  ТекМетаданные - Строка, Полное Имя объекта метаданных
//	Отбирать      - Булево, Устанавливаемое состояние флажка текущего объекта метаданных
Процедура вДобавитьСтрокуДерева(ТекМетаданные,Отбирать)
	ПозицияТЧК  = Найти(ТекМетаданные,".");
	Если ПозицияТЧК <> 0 Тогда
		РодительскийТип = Лев(ТекМетаданные,ПозицияТЧК-1);
		ДочернийТип = Сред(ТекМетаданные,ПозицияТЧК+1);
	Иначе
		РодительскийТип = ТекМетаданные;
		ДочернийТип = "";
	КонецЕсли;
	
	СтрокаДерева = ДеревоОтбора.Строки.Найти(РодительскийТип,"Объект",Ложь);
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоОтбора.Строки.Добавить();
		СтрокаДерева.Объект = РодительскийТип;
		СтрокаДерева.Картинка = РодительскиеТипыОбъектовМетаданных[РодительскийТип].Картинка;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		СтрокаДерева.Отбирать = Отбирать;
	ИначеЕсли СтрокаДерева.Отбирать <> Отбирать  Тогда
		СтрокаДерева.Отбирать = 2;
	КонецЕсли;
	
	Если ДочернийТип <>  "" Тогда
		ДочерняяСтрокаДерева = СтрокаДерева.Строки.Найти(ДочернийТип,"Объект",Ложь);
		Если ДочерняяСтрокаДерева = Неопределено Тогда
			ДочерняяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			ДочерняяСтрокаДерева.Объект = ДочернийТип;
			ДочерняяСтрокаДерева.Картинка = РодительскиеТипыОбъектовМетаданных[РодительскийТип].КартинкаОбъекта;
			ДочерняяСтрокаДерева.Отбирать = Отбирать;
		ИначеЕсли ДочерняяСтрокаДерева.Отбирать <> Отбирать Тогда
			ДочерняяСтрокаДерева.Отбирать = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура считывает структуру метаданных текущей конфигурации
// в дерево значений
Процедура вСчитатьИзКонфигурации()
	ТекОтбор = ВладелецФормы.ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок.Метаданные;
	ДеревоОтбора.Строки.Очистить();
	Для каждого  РодительскийТип Из  РодительскиеТипыОбъектовМетаданных Цикл
		Для каждого  ДочернийТип Из  Метаданные[РодительскийТип.Значение.ИмяМножественное] Цикл
			ТекМетаданные = СокрЛП(ДочернийТип.ПолноеИмя());
			Отбирать=?(ВладелецФормы.вВходитВОтбор(ТекМетаданные,ТекОтбор),1,0);
			вДобавитьСтрокуДерева(ТекМетаданные,Отбирать);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура Вставляет характеристики Родительского Объекта Метаданных
// в структуру.
// Параметры
//	Типы                    - Структура, в которую необходимо вставить новый 
// 	ДобавляемыйТип          - Строка, имя родительского типа 
//	ИмяМножественное        - Строка, имя родительского типа во множественном числе
// 	СтрокаСоставаМетаданных - Строка, Возможные поля через запятую
// 		(Например: "Реквизиты","Измерения","ТабличныеЧасти","ПометкаУдаления"
//		,"Владелец","Родитель","НомерДокумента" и.т.д.)
//
Процедура вДобавитьРодительскийТип(Типы,ДобавляемыйТип,ИмяМножественное,СтрокаСоставаМетаданных = "")
	Если Метаданные[ИмяМножественное].Количество() <> 0 Тогда
		СтруктураСоставаМетаданных = Новый Структура;
		Строка = СокрЛП(СтрокаСоставаМетаданных);
		Пока Строка <> "" Цикл
			ПозЗПТ = Найти(Строка,",");
			Если ПозЗПТ <>  0 Тогда
				СоставМетаданного = СокрЛП(Лев(СоставМетаданного,ПозЗПТ-1));
				Строка = СокрЛП(Сред(СоставМетаданного,ПозЗПТ+1));
			Иначе
				СоставМетаданного = СокрЛП(Строка);
				Строка = "";
			КонецЕсли;
			СтруктураСоставаМетаданных.Вставить(СоставМетаданного,Истина);
		КонецЦикла;
		Структура = Новый Структура;
		Структура.Вставить("ИмяМножественное",ИмяМножественное);
		Структура.Вставить("Картинка",БиблиотекаКартинок[ДобавляемыйТип]);
		Структура.Вставить("КартинкаОбъекта",БиблиотекаКартинок[ДобавляемыйТип+"Объект"]);
		Структура.Вставить("Метаданные",Метаданные[ИмяМножественное]);
		Структура.Вставить("СоставМетаданных",СтруктураСоставаМетаданных);
		Типы.Вставить(ДобавляемыйТип,Структура)
	КонецЕсли;
КонецПроцедуры // ДобавитьРодительскийТип()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	РодительскиеТипыОбъектовМетаданных = Новый Структура;
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"Справочник","Справочники");
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"Документ","Документы");
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"ПланВидовХарактеристик","ПланыВидовХарактеристик");
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"ПланСчетов","ПланыСчетов");
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"ПланВидовРасчета","ПланыВидовРасчета");
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"БизнесПроцесс","БизнесПроцессы");
	вДобавитьРодительскийТип(РодительскиеТипыОбъектовМетаданных,"Задача","Задачи");
	вСчитатьИзКонфигурации();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ОК" Основных действий формы,
//
Процедура ОсновныеДействияФормыОК(Элемент)
	ТекОтбор = ВладелецФормы.ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок.Метаданные;
	ТекОтбор.ВидСравнения = ВидСравнения.ВСписке;
	ТекОтбор.Значение.Очистить();
	Для каждого РодительскаяСтрока Из ДеревоОтбора.Строки Цикл
		Для каждого ДочерняяСтрока Из РодительскаяСтрока.Строки Цикл
			Если ДочерняяСтрока.Отбирать = 1 Тогда
				ТекОтбор.Значение.Добавить(РодительскаяСтрока.Объект+"."+ДочерняяСтрока.Объект);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТекОтбор.Использование = Истина;
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ДереваОтбора

// Процедура вызывается при нажатии кнопки "УстановитьФлажки" командной панели формы,
//
Процедура КоманднаяПанельДереваОтбораУстановитьФлажки(Кнопка)
	Для каждого РодительскаяСтрока Из ДеревоОтбора.Строки Цикл
		РодительскаяСтрока.Отбирать = 1;
		Для каждого ДочерняяСтрока Из РодительскаяСтрока.Строки Цикл
			ДочерняяСтрока.Отбирать = 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнятьФлажки" командной панели формы,
//
Процедура КоманднаяПанельДереваОтбораСнятьФлажки(Кнопка)
	Для каждого РодительскаяСтрока Из ДеревоОтбора.Строки Цикл
		РодительскаяСтрока.Отбирать = 0;
		Для каждого ДочерняяСтрока Из РодительскаяСтрока.Строки Цикл
			ДочерняяСтрока.Отбирать = 0;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОтметитьПомеченныеНаУдаление" командной панели формы,
//
Процедура КоманднаяПанельДереваОтбораОтметитьПомеченныеНаУдаление(Кнопка)
	Для каждого РодительскаяСтрока Из ДеревоОтбора.Строки Цикл
		РодительскаяСтрока.Отбирать = 0;
		Для каждого ДочерняяСтрока Из РодительскаяСтрока.Строки Цикл
			ДочерняяСтрока.Отбирать = 0;
		КонецЦикла;
	КонецЦикла;
	
	ПомеченныеМД = УдаляемыеОбъекты.Выгрузить();
	ПомеченныеМД.Свернуть("Метаданные");
	Для каждого ПомеченныйМД Из ПомеченныеМД Цикл
		вДобавитьСтрокуДерева(ПомеченныйМД.Метаданные,1);
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДереваОтбора

// Процедура вызывается при выоде строки дерева отбора
//
Процедура ДеревоОтбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Объект.ОтображатьКартинку = Истина;
КонецПроцедуры

// Процедура вызывается при изменении флажка дерева отбора
//
Процедура ДеревоОтбораПриИзмененииФлажка(Элемент, Колонка)
	ТекущиеДанные = ЭлементыФормы.ДеревоОтбора.ТекущиеДанные;
	Если ТекущиеДанные.Отбирать = 2 Тогда
		ТекущиеДанные.Отбирать = 0;
	КонецЕсли;	
	Если ТекущиеДанные.Уровень() = 1 Тогда
		Если ТекущиеДанные.родитель.Отбирать <> ТекущиеДанные.Отбирать Тогда
			ТекущиеДанные.родитель.Отбирать = 2;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.Отбирать <> 2 Тогда
			Для каждого СтрокиДерева Из ТекущиеДанные.Строки Цикл
				СтрокиДерева.Отбирать = ТекущиеДанные.Отбирать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	МассивТиповКонтактнойИнформации = Метаданные.ПодпискиНаСобытия.ЗаполнитьКонтактнуюИнформацию.Источник.Типы();
	
	Для Каждого ТипСправочника Из МассивТиповКонтактнойИнформации Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипСправочника);
		
		НоваяСтрока = КонтактнаяИнформация.Добавить();
		НоваяСтрока.ПредставлениеСправочника = ОбъектМетаданных.Представление();
		НоваяСтрока.ИмяФормыОбъекта = ОбъектМетаданных.ОсновнаяФормаОбъекта.Имя;
		НоваяСтрока.ПолноеИмяФормыОбъекта = ОбъектМетаданных.ОсновнаяФормаОбъекта.ПолноеИмя() + ".Форма.Модуль.txt";
		
	КонецЦикла;
	
	ПараметрыВыгрузки = Новый Структура("КаталогBin, ПутьКБазе, Пользователь, Пароль, Каталог");
	ЗаполнитьПараметрыПоиска();
	ЗаполнитьПараметрыВставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Работа с текстами конфигурации в веб-клиенте не возможна.'"));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
		Кавычка = """";
		ПараметрыВыгрузки.КаталогBin = КаталогПрограммы();
		ПараметрыВыгрузки.ПутьКБазе = СтрокаСоединенияИнформационнойБазы();
		ПараметрыВыгрузки.ПутьКБазе = СтрЗаменить(ПараметрыВыгрузки.ПутьКБазе, Кавычка, Кавычка + Кавычка);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьВстраивание(Команда)
	
	ВыгрузитьТекстыМодулей();
	ПолучитьТекстыМодулейИзФайлов();
	ЗаписатьТекстыМодулей();
	ЗагрузитьТекстыМодулей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыПоиска()
	
	ПараметрыПоиска = Новый Структура("ПриЧтенииНаСервере, ОбработкаПроверкиЗаполнения, ПриЧтенииНаСервереКИ, ОбработкаПроверкиЗаполненияКИ, ОбработчикиСобытийФормы, ПодключаемыйПриИзменении, ПодключаемыйНачалоВыбора");
	ПараметрыПоиска.ПриЧтенииНаСервере = "Процедура ПриЧтенииНаСервере(ТекущийОбъект)";
	ПараметрыПоиска.ПриЧтенииНаСервереКИ = "УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);";
	
	ПараметрыПоиска.ОбработкаПроверкиЗаполнения = "Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)";
	ПараметрыПоиска.ОбработкаПроверкиЗаполненияКИ = "УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);";
	
	ПараметрыПоиска.ОбработчикиСобытийФормы =
	"////////////////////////////////////////////////////////////////////////////////
	|// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ";
	
	ПараметрыПоиска.ПодключаемыйПриИзменении = "&НаКлиенте
	|Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)";
	ПараметрыПоиска.ПодключаемыйНачалоВыбора = "&НаКлиенте
	|Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВставки()
	
	ПараметрыВставки = Новый Структура("ПриЧтенииНаСервере, ПриЧтенииНаСервереПолный, ОбработкаПроверкиЗаполнения, ОбработкаПроверкиЗаполненияПолный, ОбработчикиСобытийФормы, ПодключаемыеОбработчики");
	
	ПараметрыВставки.ПриЧтенииНаСервере = "
	|	// СтандартныеПодсистемы.КонтактнаяИнформация
	|	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	|	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	|";
	
	ПараметрыВставки.ОбработкаПроверкиЗаполнения = "
	|	// СтандартныеПодсистемы.КонтактнаяИнформация
	|	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	|	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	|";
	
	ПараметрыВставки.ПриЧтенииНаСервереПолный = "
	|&НаСервере
	|Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	|	
	|	// СтандартныеПодсистемы.КонтактнаяИнформация
	|	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	|	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	|	
	|КонецПроцедуры
	|";
	
	ПараметрыВставки.ОбработкаПроверкиЗаполненияПолный = "
	|&НаСервере
	|Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	|	
	|	// СтандартныеПодсистемы.КонтактнаяИнформация
	|	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	|	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	|	
	|КонецПроцедуры
	|";
	
	ПараметрыВставки.ОбработчикиСобытийФормы = 
	"////////////////////////////////////////////////////////////////////////////////
	|// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
	|";
	
	ПараметрыВставки.ПодключаемыеОбработчики = "
	|&НаКлиенте
	|Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	|	
	|	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	|	
	|КонецПроцедуры
	|
	|&НаКлиенте
	|Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	|	
	|	Результат = УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	|	
	|КонецПроцедуры
	|
	|&НаКлиенте
	|Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	|	
	|	Результат = УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	|	
	|КонецПроцедуры
	|
	|&НаКлиенте
	|Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	|	
	|	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	|	
	|КонецПроцедуры
	|
	|&НаСервере
	|Процедура ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	|	
	|	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	|	
	|КонецПроцедуры";
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьТекстыМодулей()
	
	#Если НЕ ВебКлиент Тогда
		ПараметрыВыгрузки.Каталог = ПолучитьИмяВременногоФайла("CodeUnload") + "\";
	#КонецЕсли
	
	СоздатьКаталог(ПараметрыВыгрузки.Каталог);
	
	ЗапуститьПриложение(Кавычка + ПараметрыВыгрузки.КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
	+ " /IBConnectionString " + Кавычка + ПараметрыВыгрузки.ПутьКБазе + Кавычка
	+ " /N "                  + Кавычка + ПараметрыВыгрузки.Пользователь + Кавычка
	+ " /P "                  + Кавычка + ПараметрыВыгрузки.Пароль + Кавычка
	+ " /DumpConfigFiles "    + Кавычка + ПараметрыВыгрузки.Каталог + Кавычка
	+ " -Module"
	,
	,
	Истина,
	NULL);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьТекстыМодулей()
	
	#Если НЕ ВебКлиент Тогда
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	
	ЗапуститьПриложение(Кавычка + ПараметрыВыгрузки.КаталогBin + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString " + Кавычка + ПараметрыВыгрузки.ПутьКБазе + Кавычка
		+ " /N "                  + Кавычка + ПараметрыВыгрузки.Пользователь + Кавычка
		+ " /P "                  + Кавычка + ПараметрыВыгрузки.Пароль + Кавычка
		+ " /LoadConfigFiles "    + Кавычка + ПараметрыВыгрузки.Каталог + Кавычка
		+ " -Module"
		+ " -AllWritable"
		,
		,
		Истина,
		NULL);
	
	УдалитьФайлы(Лев(ПараметрыВыгрузки.Каталог, СтрДлина(ПараметрыВыгрузки.Каталог) - 1));
	
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьТекстыМодулей()
	
	КодировкаМодулей = КодировкаТекста.UTF8;
	СоздатьКаталог(ПараметрыВыгрузки.Каталог);
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		ТекстМодуляФормыСписка = ПолучитьИзВременногоХранилища(ОбъектКонтактнойИнформации.АдресТекстаМодуля);
		ЗаписьТекста = Новый ЗаписьТекста(ПараметрыВыгрузки.Каталог + ОбъектКонтактнойИнформации.ПолноеИмяФормыОбъекта, КодировкаМодулей);
		ЗаписьТекста.Записать(ТекстМодуляФормыСписка);
		ЗаписьТекста.Закрыть();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстыМодулейИзФайлов()
	
	КодировкаМодулей = КодировкаТекста.UTF8;
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ЗначениеЗаполнено(ОбъектКонтактнойИнформации.ПолноеИмяФормыОбъекта) Тогда
			ПолноеИмяФайлаМодуляФормыОбъекта = ПараметрыВыгрузки.Каталог + ОбъектКонтактнойИнформации.ПолноеИмяФормыОбъекта;
			ФайлМодуля = Новый Файл(ПолноеИмяФайлаМодуляФормыОбъекта);
			Если ФайлМодуля.Существует() Тогда
				Чтение = Новый ЧтениеТекста(ФайлМодуля.ПолноеИмя, КодировкаМодулей);
				Содержимое = Чтение.Прочитать();
				
				ПроверитьОбработчики(Содержимое, ОбъектКонтактнойИнформации);
				ПроверитьПодключаемыеОбработчики(Содержимое, ОбъектКонтактнойИнформации);
				
				ОбъектКонтактнойИнформации.АдресТекстаМодуля = ПоместитьВоВременноеХранилище(Содержимое, УникальныйИдентификатор);
				
				Чтение.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлы(Лев(ПараметрыВыгрузки.Каталог, СтрДлина(ПараметрыВыгрузки.Каталог) - 1));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработчики(Содержимое, ОбъектКонтактнойИнформации)
	
	ПроверитьОбработчик("ПриЧтенииНаСервере", ПараметрыПоиска.ПриЧтенииНаСервереКИ, ПараметрыВставки.ПриЧтенииНаСервере,
		ПараметрыВставки.ПриЧтенииНаСервереПолный, Содержимое, ОбъектКонтактнойИнформации);
	ПроверитьОбработчик("ОбработкаПроверкиЗаполнения", ПараметрыПоиска.ОбработкаПроверкиЗаполненияКИ, ПараметрыВставки.ОбработкаПроверкиЗаполнения,
		ПараметрыВставки.ОбработкаПроверкиЗаполненияПолный, Содержимое, ОбъектКонтактнойИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработчик(ИмяСобытия, ПоискКодОбработчикаКИ, ВставкаКодОбработчика, ВставкаКодОбработчикаПолный, Содержимое, ОбъектКонтактнойИнформации)
	
	Если СтрНайти(Содержимое, ПоискКодОбработчикаКИ) = 0 Тогда
		
		НачалоОбработчика = СтрНайти(Содержимое, ПараметрыПоиска[ИмяСобытия]);
		
		Если НачалоОбработчика <> 0 Тогда
			
			ФрагментПоиска = Прав(Содержимое, СтрДлина(Содержимое) - НачалоОбработчика + 1);
			
			КонецОбработчика = СтрНайти(ФрагментПоиска, "КонецПроцедуры") + НачалоОбработчика;
			
			Содержимое = Лев(Содержимое, КонецОбработчика - 2) + ВставкаКодОбработчика + Сред(Содержимое, КонецОбработчика - 2);
			
		Иначе
			СтрокаДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Необходимо выбрать обработчик события ""%1"", указав в нем процедуру ""%1""'"),
				ИмяСобытия);
			ОбъектКонтактнойИнформации.Статус = ОбъектКонтактнойИнформации.Статус + СтрокаДействия + Символы.ПС;
			
			НачалоОбработчикиСобытийФормы = СтрНайти(Содержимое, ПараметрыПоиска.ОбработчикиСобытийФормы);
			
			Если НачалоОбработчикиСобытийФормы = 0 Тогда
				
				Содержимое = ПараметрыВставки.ОбработчикиСобытийФормы + ВставкаКодОбработчикаПолный + Символы.ПС + Содержимое;
				
			Иначе
				
				КонецОбработчикиСобытийФормы = НачалоОбработчикиСобытийФормы + СтрДлина(ПараметрыПоиска.ОбработчикиСобытийФормы) + 1;
				
				Содержимое = Лев(Содержимое, КонецОбработчикиСобытийФормы - 1) + ВставкаКодОбработчикаПолный + Сред(Содержимое, КонецОбработчикиСобытийФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключаемыеОбработчики(Содержимое, ОбъектКонтактнойИнформации)
	
	НачалоПодключаемыйПриИзменении = СтрНайти(Содержимое, ПараметрыПоиска.ПодключаемыйПриИзменении);
	
	Если НачалоПодключаемыйПриИзменении <> 0 Тогда
		
		ВырезатьПроцедуру(ПараметрыПоиска.ПодключаемыйПриИзменении, Содержимое);
		ВырезатьПроцедуру(ПараметрыПоиска.ПодключаемыйНачалоВыбора, Содержимое);
		
		Содержимое = Лев(Содержимое, НачалоПодключаемыйПриИзменении - 2) + ПараметрыВставки.ПодключаемыеОбработчики + Сред(Содержимое, НачалоПодключаемыйПриИзменении - 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВырезатьПроцедуру(ЗаголовокПроцедуры, ТекстМодуля)
	
	НачалоПроцедуры = СтрНайти(ТекстМодуля, ЗаголовокПроцедуры);
	
	Если НачалоПроцедуры <> 0 Тогда
		
		ФрагментПоиска = Прав(ТекстМодуля, СтрДлина(ТекстМодуля) - НачалоПроцедуры + 1);
		
		ОкончаниеПроцедуры = СтрНайти(ФрагментПоиска, "КонецПроцедуры") + НачалоПроцедуры;
		
		ТекстМодуля = Лев(ТекстМодуля, НачалоПроцедуры - 2) + Сред(ТекстМодуля, ОкончаниеПроцедуры + 14);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
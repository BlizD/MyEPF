{3,
{42,0,1,60,0,1,0,1,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Расстановка фрагментов кода для перехода на версию 2.2.3 (подсистема Базовая функциональность)"}
},0,0,1,1,1,0,0,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{117,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0,02023637-7868-4a5f-8576-835a76e0c9ba}
},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{127,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаВнедритьПодсистему",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{128,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВнедритьПодсистемуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{115,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаЗапуститьКонфигуратор",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{116,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗапуститьКонфигураторРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{118,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{129,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ВыгрузкаМодулейКаталог",1,0,
{1,0},
{1,0},
{1,
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ВыгрузкаМодулейКаталогНачалоВыбора",0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ВыгрузкаМодулейКаталогПриИзменении",0,0},1,
{21,
{130,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаМодулейКаталогКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{131,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаМодулейКаталогРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{140,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Декорация1",
{1,1,
{"ru"," "}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{141,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"Декорация1КонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru"," "}
},0},6,1,
{10,
{142,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Декорация1РасширеннаяПодсказка",
{1,1,
{"ru","При нажатии на кнопку ""Расставить фрагменты кода"" будут удалены все вызовы метода ОбщегоНазначенияКлиентСервер.ПеренестиОтборыВДинамическийСписок (устарел в 2.2.3.30)."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,1,
{"ru","При нажатии на кнопку ""Расставить фрагменты кода"" будут удалены все вызовы метода ОбщегоНазначенияКлиентСервер.ПеренестиОтборыВДинамическийСписок (устарел в 2.2.3.30)."}
},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{138,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСлужебныеПараметры",
{1,1,
{"ru","Служебные параметры"}
},
{1,1,
{"ru","Группа служебные параметры"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,1,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{132,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ВыгружатьМодули",4,0,
{1,0},
{1,0},
{1,
{15}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{133,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгружатьМодулиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{134,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгружатьМодулиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{135,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗагружатьМодули",4,0,
{1,0},
{1,0},
{1,
{18}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{136,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗагружатьМодулиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{137,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагружатьМодулиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},0,0,1,
{10,
{139,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСлужебныеПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0},"#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеАктуальны = НЕ КонфигурацияБазыДанныхИзмененаДинамически() И НЕ КонфигурацияИзменена();
	
	ВыгружатьМодули = Истина;
	ЗагружатьМодули = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Работа с текстами конфигурации в веб-клиенте не возможна.'""));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборКаталога = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Каталог = Элемент.ТекстРедактирования;
	ВыборКаталога.Заголовок = НСтр(""ru = 'Каталог выгрузки/загрузки модулей'"");
	Если ВыборКаталога.Выбрать() Тогда
		ВыгрузкаМодулейКаталог = ВыборКаталога.Каталог;
		ВыгрузкаМодулейКаталогПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогПриИзменении(Элемент)
	Если Не ПустаяСтрока(ВыгрузкаМодулейКаталог) Тогда
		Слэш = ПолучитьРазделительПути();
		Если Не СтрЗаканчиваетсяНа(ВыгрузкаМодулейКаталог, Слэш) Тогда
			ВыгрузкаМодулейКаталог = ВыгрузкаМодулейКаталог + Слэш;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВнедритьПодсистему(Команда)
	ВыполнитьСценарий(Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигуратор(Команда)
	ОткрытьКонфигуратор(Неопределено, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка / Загрузка текстов модулей.

&НаКлиенте
Процедура ВыполнитьСценарий(ВыборПользователя, Сценарий) Экспорт
	// Плюсы сценарного выполнения:
	//   Изоляция обработчиков.
	//     Текущий шаг может ничего не знать о следующем или предыдущем шаге.
	//   Единый обработчик оповещения.
	//     Избавляет от необходимости ""разворачивать"" стек в обратную сторону
	//     после закрытия диалога с пользователем.
	//   Удобная группировка кода.
	//     Код, вызывающий диалог и обрабатывающий ответ располагаются в одной функции.
	//   Простая последовательность шагов.
	//   Удобное отключение шагов.
	
	Если Сценарий = Неопределено Тогда
		Сценарий = Новый Структура;
		Сценарий.Вставить(""Шаги"", Новый Массив);
		Сценарий.Шаги.Добавить(""ПроверитьКонфигурацияИзменена"");
		Сценарий.Шаги.Добавить(""ПроверитьСоединения"");
		Сценарий.Шаги.Добавить(""ВвестиЛогинПароль"");
		Сценарий.Шаги.Добавить(""ВыгрузитьТекстыМодулей"");
		Сценарий.Шаги.Добавить(""ИзменитьТекстыМодулей"");
		Сценарий.Шаги.Добавить(""ЗагрузитьТекстыМодулей"");
		Сценарий.Шаги.Добавить(""ОчиститьКаталогМодулей"");
		Сценарий.Шаги.Добавить(""ОткрытьКонфигуратор"");
		Сценарий.Шаги.Добавить(""ПоказатьРучныеДействия"");
		Сценарий.Вставить(""ШагиВГраница"", Сценарий.Шаги.ВГраница());
		Сценарий.Вставить(""СледующийШагИндекс"", 0);
		Сценарий.Вставить(""ТекущийШаг"", Неопределено);
		Сценарий.Вставить(""ТекущийШагУточнение"", """");
		Сценарий.Вставить(""БылаОстановка"", Ложь);
		Сценарий.Вставить(""Обработчик"", Новый ОписаниеОповещения(""ВыполнитьСценарий"", ЭтотОбъект, Сценарий));
		НайтиСледующийШаг(Сценарий);
	КонецЕсли;
	
	Пока ВыполнитьШаг(ВыборПользователя, Сценарий) Цикл
		Если Не НайтиСледующийШаг(Сценарий) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция НайтиСледующийШаг(Сценарий)
	Если Сценарий.СледующийШагИндекс > Сценарий.ШагиВГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	Сценарий.ТекущийШаг = Сценарий.Шаги.Получить(Сценарий.СледующийШагИндекс);
	Сценарий.ТекущийШагУточнение = """";
	Сценарий.СледующийШагИндекс = Сценарий.СледующийШагИндекс + 1;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьШаг(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШаг = ""ПроверитьКонфигурацияИзменена"" Тогда
		Возврат ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ВвестиЛогинПароль"" Тогда
		Возврат ВвестиЛогинПароль(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПроверитьСоединения"" Тогда
		Возврат ПроверитьСоединения(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ВыгрузитьТекстыМодулей"" Тогда
		Возврат ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ИзменитьТекстыМодулей"" Тогда
		Возврат ИзменитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ЗагрузитьТекстыМодулей"" Тогда
		Возврат ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ОчиститьКаталогМодулей"" Тогда
		Возврат ОчиститьКаталогМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПоказатьРучныеДействия"" Тогда
		Возврат ПоказатьРучныеДействия(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ОткрытьКонфигуратор"" Тогда
		Возврат ОткрытьКонфигуратор(ВыборПользователя, Сценарий);
	
	КонецЕсли;
	
	// Альтернативы этим веткам условий:
	//  ""Вычислить()"" - неприемлемо использовать только для минимизации кода;
	//  ""ВыполнитьОбработкуОповещения()"" - не выгодно, т.к. поддерживаются только процедуры,
	//      а следовательно следующий шаг придется запускать из предыдущего шага;
	//      Т.е. исчезает такой большой плюс как изоляция обработчиков от асинхронной логики.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка модифицированности конфигурации.

&НаКлиенте
Функция ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		Если МетаданныеАктуальны Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр(""ru = 'Основная конфигурация отличается от конфигурации базы данных.
		|Перед запуском обработки по расстановке фрагментов кода
		|рекомендуется обновить конфигурацию базы данных.'"");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(""ИгнорироватьИзменения"", НСтр(""ru = 'Пропустить'""));
		Кнопки.Добавить(""ЗакрытьПрограмму"",      НСтр(""ru = 'Закрыть программу'""));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 60, ""ИгнорироватьИзменения""); // 
		
		Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = ""ЗакрытьПрограмму"" Тогда
			// Дождавшись завершения сценария инициировать завершение сеанса.
			ПодключитьОбработчикОжидания(""ЗакрытьПрограмму"", 0.1, Истина);
			Возврат Ложь; // Отменить сценарий.
		ИначеЕсли ВыборПользователя = ""ИгнорироватьИзменения"" Тогда
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПрограмму()
	ЗавершитьРаботуСистемы(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ввод логина и пароля

&НаКлиенте
Функция ВвестиЛогинПароль(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			ВыгрузкаМодулейПользователь = """";
			Возврат Истина; // Ввод имени пользователя не требуется.
		КонецЕсли;
		
		ПолноеИмяФормы = ПолноеИмяФормы(""ПараметрыАвторизации"");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""Пользователь"", ВыгрузкаМодулейПользователь);
		ПараметрыФормы.Вставить(""Пароль"", ВыгрузкаМодулейПароль);
		
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, , , , Сценарий.Обработчик);
		
		Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ТипЗнч(ВыборПользователя) = Тип(""Структура"") Тогда
			ВыгрузкаМодулейПользователь = ВыборПользователя.Пользователь;
			ВыгрузкаМодулейПароль       = ВыборПользователя.Пароль;
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соединения, которые могут препятствовать выгрузке.

&НаКлиенте
Функция ПроверитьСоединения(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		Если МожноВыгрузитьМодули() Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр(""ru = 'Для выгрузки текстов модулей конфигурации необходимо
		|закрыть конфигуратор и другие соединения,
		|которые могут препятствовать выгрузке.
		|Текущий сеанс завершать не нужно.'"");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 15, КодВозвратаДиалога.Повторить, , КодВозвратаДиалога.Повторить);
		
		Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь; // Отменить сценарий.
		Иначе
			Сценарий.ТекущийШагУточнение = """";
			Возврат ПроверитьСоединения(ВыборПользователя, Сценарий); // Повторная проверка.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноВыгрузитьМодули()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ""DESIGNER"" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка модулей.

&НаКлиенте
Функция ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Очистка каталога выгрузки...'""));
	
	Если ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
		УдалитьФайлы(Лев(ВыгрузкаМодулейКаталог, СтрДлина(ВыгрузкаМодулейКаталог) - 1));
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Выгрузка текстов модулей...'""));
	
	#Если Не ВебКлиент Тогда
		Если Не ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
			Сценарий.Вставить(""ОчиститьКаталогВыгрузки"", Истина);
			ВыгрузкаМодулейКаталог = ПолучитьИмяВременногоФайла(""CodeUnload"") + ""\"";
			СоздатьКаталог(ВыгрузкаМодулейКаталог);
		КонецЕсли;
		
		Кавычка = """""""";
		КодВозврата = NULL;
		ЗапуститьПриложение(Кавычка + КаталогПрограммы() + ""1cv8.exe"" + Кавычка
			+ "" DESIGNER""
			+ "" /IBConnectionString "" + Кавычка + ПутьККонфигурации() + Кавычка
			+ "" /N ""                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
			+ "" /P ""                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
			+ "" /DumpConfigFiles ""    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
			+ "" -Module""
			,
			,
			Истина,
			КодВозврата);
		//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
		//	метаданных конфигурации.
		//		<Каталог выгрузки> - каталог расположения файлов свойств;
		//		Module - признак необходимости выгрузки модулей;
		//		Template - признак необходимости выгрузки шаблонов;
		//		Help - признак необходимости выгрузки справочной информации;
		//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расстановка фрагментов кода.

&НаКлиенте
Функция ИзменитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр(""ru = 'Изменение текстов модулей...'""));
	
	// 1. Удаление ПеренестиОтборыВДинамическийСписок из всех форм.
	//    1.1. Найти процедуру ПриСозданииНаСервере. Взять к анализу ее содержимое.
	//         Процедуры нет = удаление не требуется.
	//    1.2. Найти вызов ПеренестиОтборыВДинамическийСписок.
	//         Вызова нет = удаление не требуется.
	//    1.3. Удалить вызов ПеренестиОтборыВДинамическийСписок из ПриСозданииНаСервере.
	
	КодировкаМодулей = КодировкаТекста.UTF8;
	СимволыПСТаб = Символы.ПС + Символы.Таб;
	
	ПриСозданииНаСервере_Поиск = ПриСозданииНаСервере_УсловияПоиска();
	ШаблонВызова = ""ОбщегоНазначенияКлиентСервер.ПеренестиОтборыВДинамическийСписок("";
	
	НайденныеФайлы = НайтиФайлы(ВыгрузкаМодулейКаталог, ""*.Форма.Модуль.txt"", Ложь);
	Для Каждого Файл Из НайденныеФайлы Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаМодулей);
		МодульФормы = ЧтениеТекста.Прочитать();
		ЧтениеТекста = Неопределено;
		
		// 1.1.
		Результат = ТелоПроцедуры(МодульФормы, ПриСозданииНаСервере_Поиск);
		Если Не Результат.Найдена Тогда
			Продолжить;
		КонецЕсли;
		МодульФормы = Результат.ТекстМодуля;
		ПриСозданииНаСервере_БывшееТело = Результат.БывшееТело;
		
		// 1.2.
		НайденныеВызовы = МестаИспользованияМетода(Результат.БывшееТело, ШаблонВызова);
		Если НайденныеВызовы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// 1.3.
		ПриСозданииНаСервере_Тело = ПриСозданииНаСервере_БывшееТело;
		Для Каждого Вызов Из НайденныеВызовы Цикл
			ПриСозданииНаСервере_Тело = СтрЗаменить(ПриСозданииНаСервере_Тело, Вызов.Тело, """");
		КонецЦикла;
		ПриСозданииНаСервере_Тело = СокрП(ПриСозданииНаСервере_Тело) + Символы.ПС;
		
		МодульФормы = СтрЗаменить(МодульФормы, ПриСозданииНаСервере_Поиск.Заглушка, ПриСозданииНаСервере_Тело);
		
		ЗаписьТекста = Новый ЗаписьТекста(Файл.ПолноеИмя, КодировкаМодулей);
		ЗаписьТекста.Записать(МодульФормы);
		ЗаписьТекста = Неопределено;
	КонецЦикла;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаКлиенте
Функция ПриСозданииНаСервере_УсловияПоиска()
	УровниПоиска = Новый Массив;
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Комментарий = ""&НаСервере"";
	УровеньПоиска.Объявление  = ""Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)""; // Не локализуется.
	УровеньПоиска.Завершение  = ""КонецПроцедуры"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровниПоиска.Добавить(УровеньПоиска);
	
	УсловияПоиска = Новый Структура;
	УсловияПоиска.Вставить(""Уровни"", УровниПоиска);
	УсловияПоиска.Вставить(""УровниКоличество"", УровниПоиска.Количество());
	УсловияПоиска.Вставить(""Заглушка"", ""#ПриСозданииНаСервере_Тело#"");
	
	Возврат УсловияПоиска;
КонецФункции

&НаКлиенте
Функция ТелоПроцедуры(ТекстМодуля, УсловияПоиска)
	Результат = Новый Структура(""ТекстМодуля, БывшееТело, Найдена"");
	Результат.Найдена = Ложь;
	
	ВставляемыйФрагмент = УсловияПоиска.Заглушка; //  Символы.ПС + Символы.Таб + + Символы.ПС
	
	Для НомерУровня = 1 По УсловияПоиска.УровниКоличество Цикл
		УровеньПоиска = УсловияПоиска.Уровни[НомерУровня-1];
		
		Позиция = СтрНайти(ТекстМодуля, УровеньПоиска.Объявление);
		Если Позиция = 0 Тогда
			// Накопление вставляемого фрагмента.
			ВставляемыйФрагмент = (
				?(УровеньПоиска.Комментарий = """", """", УровеньПоиска.Комментарий + Символы.ПС)
				+ УровеньПоиска.Объявление
				+ ?(НомерУровня = 1, ВставляемыйФрагмент, Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС)
				+ УровеньПоиска.Завершение);
		Иначе
			// Найдено!
			Результат.Найдена = Истина;
			Если НомерУровня = 1 Тогда // Сама процедура.
				Остаток = Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина);
				ПозицияЗавершения = СтрНайти(Остаток, УровеньПоиска.Завершение);
				
				Результат.БывшееТело = Лев(Остаток, ПозицияЗавершения - 1);
				Результат.ТекстМодуля = (
					Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
					+ ВставляемыйФрагмент
					+ Сред(Остаток, ПозицияЗавершения));
			Иначе // Место, куда ее вставлять.
				Результат.БывшееТело = """";
				Результат.ТекстМодуля = (
					Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
					+ Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС
					+ Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина));
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Результат.БывшееТело = """";
	Результат.ТекстМодуля = СокрЛП(ВставляемыйФрагмент + Символы.ПС + Символы.ПС + ТекстМодуля);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция МестаИспользованияМетода(ТекстМодуля, ПолноеИмяМетода)
	Остаток = СокрЛП(ТекстМодуля);
	ПолноеИмяМетодаДлина = СтрДлина(ПолноеИмяМетода);
	
	Вызовы = Новый Массив;
	Шаблон = Новый ФиксированнаяСтруктура(""Тело, Параметры, Количество"", """", Неопределено, 0);
	Пока Истина Цикл
		Позиция = СтрНайти(Остаток, ПолноеИмяМетода);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Остаток = Сред(Остаток, Позиция + ПолноеИмяМетодаДлина);
		Позиция = СтрНайти(Остаток, "");"");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Тело = Лев(Остаток, Позиция - 1);
		Остаток = Сред(Остаток, Позиция + 2);
		
		Вызов = Новый Структура(Шаблон);
		Вызов.Тело = ПолноеИмяМетода + Тело + "");"";
		Вызов.Параметры = СтрокаВМассив(Тело);
		Вызов.Количество = Вызов.Параметры.Количество();
		Если Вызов.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Вызовы.Добавить(Вызов);
	КонецЦикла;
	
	Возврат Вызовы;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка модулей.

&НаКлиенте
Функция ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр(""ru = 'Загрузка текстов модулей...'""));
	
	Кавычка = """""""";
	КодВозврата = Null;
	
	#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(Кавычка + КаталогПрограммы() + ""1cv8.exe"" + Кавычка
			+ "" DESIGNER""
			+ "" /IBConnectionString "" + Кавычка + ПутьККонфигурации() + Кавычка
			+ "" /N ""                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
			+ "" /P ""                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
			+ "" /LoadConfigFiles ""    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
			+ "" -Module""
			+ "" -AllWritable""
			,
			,
			Истина,
			КодВозврата);
		//	/LoadConfigFiles <каталог загрузки> [-Module] [-Template] [-Help] [-AllWritable] - загрузка свойств объектов
		//	метаданных конфигурации.
		//		<Каталог загрузки> - каталог расположения файлов свойств;
		//		Module - признак необходимости загрузки модулей;
		//		Template - признак необходимости загрузки шаблонов;
		//		Help - признак необходимости загрузки справочной информации;
		//		AllWritable - признак загрузки свойств только доступных для записи объектов.
		//	Если команда пакетного режима запуска прошла успешно, возвращает код возврата 0, в противном случае  - 1 (101,
		//	если в данных имеются ошибки).
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Очистка временных файлов.

&НаКлиенте
Функция ОчиститьКаталогМодулей(ВыборПользователя, Сценарий)
	Если Не Сценарий.Свойство(""ОчиститьКаталогВыгрузки"") Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Очистка каталога выгрузки/загрузки модулей...'""));
	
	#Если Не ВебКлиент Тогда
		УдалитьФайлы(ВыгрузкаМодулейКаталог, ""*"");
		ВыгрузкаМодулейКаталог = """";
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ручные шаги.

&НаКлиенте
Функция ПоказатьРучныеДействия(ВыборПользователя, Сценарий)
	ТекстПредупреждения = 
		НСтр(""ru = 'Расстановка фрагментов кода успешно завершена.
		|Для просмотра изменений в конфигураторе нажмите:
		|""""Конфигурация"""" - """"Конфигурация базы данных"""" - """"Сравнить, объединить с конфигурацией БД"""".'"");
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Новый Структура(""Текст"", ТекстПредупреждения));
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запуск конфигуратора.

&НаКлиенте
Функция ОткрытьКонфигуратор(ВыборПользователя, Сценарий)
	Состояние(НСтр(""ru = 'Запуск конфигуратора.'""));
	
	Кавычка = """""""";
	#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(Кавычка + КаталогПрограммы() + ""1cv8.exe"" + Кавычка
			+ "" DESIGNER""
			+ "" /IBConnectionString "" + Кавычка + ПутьККонфигурации() + Кавычка
			+ "" /N ""                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
			+ "" /P ""                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка);
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

&НаКлиенте
Функция ПолноеИмяФормы(КраткоеИмяФормы)
	ПозицияТочки = СтрНайти(ИмяФормы, ""."");
	ЭтотОбъектВид = Лев(ИмяФормы, ПозицияТочки - 1);
	Остаток = Сред(ИмяФормы, ПозицияТочки + 1);
	
	ПозицияТочки = СтрНайти(Остаток, ""."");
	ЭтотОбъектТип = Лев(Остаток, ПозицияТочки - 1);
	
	Возврат ЭтотОбъектВид + ""."" + ЭтотОбъектТип + "".Форма."" + КраткоеИмяФормы;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВМассив(Строка, Разделитель = "","", ПропускатьПустые = Истина, Сокращать = Истина)
	МассивПодстрок = Новый Массив;
	Остаток = Строка;
	РазделительДлина = СтрДлина(Разделитель);
	Пока Истина Цикл
		Позиция = СтрНайти(Остаток, Разделитель);
		Если Позиция = 0 Тогда
			Подстрока = Остаток;
			Остаток = """";
		Иначе
			Подстрока = Лев(Остаток, Позиция - 1);
			Остаток = Сред(Остаток, Позиция + РазделительДлина);
		КонецЕсли;
		Если Сокращать Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		Если Не ПропускатьПустые Или Не ПустаяСтрока(Подстрока) Тогда
			МассивПодстрок.Добавить(Подстрока);
		КонецЕсли;
		Если Остаток = """" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивПодстрок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Файловая система.

&НаКлиенте
Функция ПутьККонфигурации()
	Кавычка = """""""";
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	Возврат ПутьККонфигурации;
КонецФункции

#КонецОбласти",
{4,9,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",b4eecce7-8a21-428e-b59c-f0533d48c9fa}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ВыгрузкаМодулейКаталог",
{1,1,
{"ru","Каталог выгрузки/загрузки модулей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ВыгрузкаМодулейПользователь",
{1,1,
{"ru","Выгрузка модулей пользователь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ВыгрузкаМодулейПароль",
{1,1,
{"ru","Выгрузка модулей пароль"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"МетаданныеАктуальны",
{1,1,
{"ru","Метаданные актуальны"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"Кавычка",
{1,1,
{"ru","Кавычка"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ВыгружатьМодули",
{1,1,
{"ru","Выгружать модули"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{18},0,"ЗагружатьМодули",
{1,1,
{"ru","Загружать модули"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ВыгрузкаМодулейКаталогИспользование",
{1,1,
{"ru","Выгрузка модулей каталог использование"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,2,"ОбъектыМетаданных.ФормаОбъектаЕстьКритичныеОшибки","",
{0},
{0},"ОбъектыМетаданных.ФормаСпискаЕстьКритичныеОшибки","",
{0},
{0},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCe0LHRitC10LrRgtGL0JzQtdGC0LDQtNCw0L3Q
vdGL0YU8L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9uPg0KCQkJ
PGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlz
b24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx0YrQ
tdC60YLRi9Cc0LXRgtCw0LTQsNC90L3Ri9GFLtCk0L7RgNC80LDQntCx0YrQtdC6
0YLQsNCV0YHRgtGM0JrRgNC40YLQuNGH0L3Ri9C10J7RiNC40LHQutC4PC9sZWZ0
Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0K
CQkJCQk8cmlnaHQgeHNpOnR5cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0K
CQkJCTwvaXRlbT4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBh
cmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx
0YrQtdC60YLRi9Cc0LXRgtCw0LTQsNC90L3Ri9GFLtCk0L7RgNC80LDQodC/0LjR
gdC60LDQldGB0YLRjNCa0YDQuNGC0LjRh9C90YvQtdCe0YjQuNCx0LrQuDwvbGVm
dD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlwZT4N
CgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpib29sZWFuIj50cnVlPC9yaWdodD4N
CgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJ
CTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+
DQoJCQkJCTxkY3Njb3I6dXNlPmZhbHNlPC9kY3Njb3I6dXNlPg0KCQkJCQk8ZGNz
Y29yOnBhcmFtZXRlcj7QptCy0LXRgtCi0LXQutGB0YLQsDwvZGNzY29yOnBhcmFt
ZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+
MDpiOTYyNzg1NS02NzczLTRhNTktYjdkMy1mOWUyZTU2NWNkOWU8L2Rjc2Nvcjp2
YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6
dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFy
YW1ldGVyPtCi0L7Qu9GM0LrQvtCf0YDQvtGB0LzQvtGC0YA8L2Rjc2NvcjpwYXJh
bWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InhzOmJvb2xlYW4i
PnRydWU8L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9h
cHBlYXJhbmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4N
CgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCe0LHRitC10LrRgtGL0JzQtdGC0LDQ
tNCw0L3QvdGL0YXQpNC+0YDQvNCw0J7QsdGK0LXQutGC0LDQotC10LrRgdGC0J7R
iNC40LHQutC4PC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJCQk8L3NlbGVjdGlvbj4N
CgkJCTxmaWx0ZXI+DQoJCQkJPGl0ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Db21w
YXJpc29uIj4NCgkJCQkJPGxlZnQgeHNpOnR5cGU9ImRjc2NvcjpGaWVsZCI+0J7Q
sdGK0LXQutGC0YvQnNC10YLQsNC00LDQvdC90YvRhS7QpNC+0YDQvNCw0J7QsdGK
0LXQutGC0LDQldGB0YLRjNCa0YDQuNGC0LjRh9C90YvQtdCe0YjQuNCx0LrQuDwv
bGVmdD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlw
ZT4NCgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpib29sZWFuIj50cnVlPC9yaWdo
dD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0K
CQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1
ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCm0LLQtdGC0KLQtdC60YHRgtCw
PC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJCQk8ZGNzY29yOnZhbHVlIHhzaTp0eXBl
PSJ2OHVpOkNvbG9yIj4wOmI5NjI3ODU1LTY3NzMtNGE1OS1iN2QzLWY5ZTJlNTY1
Y2Q5ZTwvZGNzY29yOnZhbHVlPg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8L2Fw
cGVhcmFuY2U+DQoJCTwvaXRlbT4NCgkJPGl0ZW0+DQoJCQk8c2VsZWN0aW9uPg0K
CQkJCTxpdGVtPg0KCQkJCQk8ZmllbGQ+0J7QsdGK0LXQutGC0YvQnNC10YLQsNC0
0LDQvdC90YvRhdCk0L7RgNC80LDQodC/0LjRgdC60LDQotC10LrRgdGC0J7RiNC4
0LHQutC4PC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJCQk8L3NlbGVjdGlvbj4NCgkJ
CTxmaWx0ZXI+DQoJCQkJPGl0ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Db21wYXJp
c29uIj4NCgkJCQkJPGxlZnQgeHNpOnR5cGU9ImRjc2NvcjpGaWVsZCI+0J7QsdGK
0LXQutGC0YvQnNC10YLQsNC00LDQvdC90YvRhS7QpNC+0YDQvNCw0KHQv9C40YHQ
utCw0JXRgdGC0YzQmtGA0LjRgtC40YfQvdGL0LXQntGI0LjQsdC60Lg8L2xlZnQ+
DQoJCQkJCTxjb21wYXJpc29uVHlwZT5FcXVhbDwvY29tcGFyaXNvblR5cGU+DQoJ
CQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6Ym9vbGVhbiI+dHJ1ZTwvcmlnaHQ+DQoJ
CQkJPC9pdGVtPg0KCQkJPC9maWx0ZXI+DQoJCQk8YXBwZWFyYW5jZT4NCgkJCQk8
ZGNzY29yOml0ZW0geHNpOnR5cGU9IlNldHRpbmdzUGFyYW1ldGVyVmFsdWUiPg0K
CQkJCQk8ZGNzY29yOnBhcmFtZXRlcj7QptCy0LXRgtCi0LXQutGB0YLQsDwvZGNz
Y29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1
aTpDb2xvciI+MDpiOTYyNzg1NS02NzczLTRhNTktYjdkMy1mOWUyZTU2NWNkOWU8
L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJh
bmNlPg0KCQk8L2l0ZW0+DQoJPC9jb25kaXRpb25hbEFwcGVhcmFuY2U+DQo8L1Nl
dHRpbmdzPg==}
},
{0,0},
{0,2,
{7,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗапуститьКонфигуратор",
{1,1,
{"ru","Запустить конфигуратор"}
},
{1,1,
{"ru","Запустить конфигуратор"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,e93f538e-dfaf-4a91-a9b6-c053555bcf60},"",-1,-1,1,0,""},"ЗапуститьКонфигуратор",3,0,0,
{0,0},1,0},
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВнедритьПодсистему",
{1,1,
{"ru","Расставить фрагменты кода"}
},
{1,1,
{"ru","Выгрузить тексты модулей и проверить внедрение"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,9fecbaff-2a05-4da6-9ef1-807e754b928d},"",-1,-1,1,0,""},"ВнедритьПодсистему",0,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}
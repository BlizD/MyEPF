#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеАктуальны = НЕ КонфигурацияБазыДанныхИзмененаДинамически() И НЕ КонфигурацияИзменена();
	
	ВыгружатьМодули = Истина;
	ЗагружатьМодули = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Работа с текстами конфигурации в веб-клиенте не возможна.'"));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборКаталога = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Каталог = Элемент.ТекстРедактирования;
	ВыборКаталога.Заголовок = НСтр("ru = 'Каталог выгрузки/загрузки модулей'");
	Если ВыборКаталога.Выбрать() Тогда
		ВыгрузкаМодулейКаталог = ВыборКаталога.Каталог;
		ВыгрузкаМодулейКаталогПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогПриИзменении(Элемент)
	Если Не ПустаяСтрока(ВыгрузкаМодулейКаталог) Тогда
		Слэш = ПолучитьРазделительПути();
		Если Не СтрЗаканчиваетсяНа(ВыгрузкаМодулейКаталог, Слэш) Тогда
			ВыгрузкаМодулейКаталог = ВыгрузкаМодулейКаталог + Слэш;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВнедритьПодсистему(Команда)
	ВыполнитьСценарий(Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигуратор(Команда)
	ОткрытьКонфигуратор(Неопределено, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка / Загрузка текстов модулей.

&НаКлиенте
Процедура ВыполнитьСценарий(ВыборПользователя, Сценарий) Экспорт
	// Плюсы сценарного выполнения:
	//   Изоляция обработчиков.
	//     Текущий шаг может ничего не знать о следующем или предыдущем шаге.
	//   Единый обработчик оповещения.
	//     Избавляет от необходимости "разворачивать" стек в обратную сторону
	//     после закрытия диалога с пользователем.
	//   Удобная группировка кода.
	//     Код, вызывающий диалог и обрабатывающий ответ располагаются в одной функции.
	//   Простая последовательность шагов.
	//   Удобное отключение шагов.
	
	Если Сценарий = Неопределено Тогда
		Сценарий = Новый Структура;
		Сценарий.Вставить("Шаги", Новый Массив);
		Сценарий.Шаги.Добавить("ПроверитьКонфигурацияИзменена");
		Сценарий.Шаги.Добавить("ПроверитьСоединения");
		Сценарий.Шаги.Добавить("ВвестиЛогинПароль");
		Сценарий.Шаги.Добавить("ВыгрузитьТекстыМодулей");
		Сценарий.Шаги.Добавить("ИзменитьТекстыМодулей");
		Сценарий.Шаги.Добавить("ЗагрузитьТекстыМодулей");
		Сценарий.Шаги.Добавить("ОчиститьКаталогМодулей");
		Сценарий.Шаги.Добавить("ОткрытьКонфигуратор");
		Сценарий.Шаги.Добавить("ПоказатьРучныеДействия");
		Сценарий.Вставить("ШагиВГраница", Сценарий.Шаги.ВГраница());
		Сценарий.Вставить("СледующийШагИндекс", 0);
		Сценарий.Вставить("ТекущийШаг", Неопределено);
		Сценарий.Вставить("ТекущийШагУточнение", "");
		Сценарий.Вставить("БылаОстановка", Ложь);
		Сценарий.Вставить("Обработчик", Новый ОписаниеОповещения("ВыполнитьСценарий", ЭтотОбъект, Сценарий));
		НайтиСледующийШаг(Сценарий);
	КонецЕсли;
	
	Пока ВыполнитьШаг(ВыборПользователя, Сценарий) Цикл
		Если Не НайтиСледующийШаг(Сценарий) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция НайтиСледующийШаг(Сценарий)
	Если Сценарий.СледующийШагИндекс > Сценарий.ШагиВГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	Сценарий.ТекущийШаг = Сценарий.Шаги.Получить(Сценарий.СледующийШагИндекс);
	Сценарий.ТекущийШагУточнение = "";
	Сценарий.СледующийШагИндекс = Сценарий.СледующийШагИндекс + 1;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьШаг(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШаг = "ПроверитьКонфигурацияИзменена" Тогда
		Возврат ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ВвестиЛогинПароль" Тогда
		Возврат ВвестиЛогинПароль(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПроверитьСоединения" Тогда
		Возврат ПроверитьСоединения(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ВыгрузитьТекстыМодулей" Тогда
		Возврат ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ИзменитьТекстыМодулей" Тогда
		Возврат ИзменитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ЗагрузитьТекстыМодулей" Тогда
		Возврат ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ОчиститьКаталогМодулей" Тогда
		Возврат ОчиститьКаталогМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПоказатьРучныеДействия" Тогда
		Возврат ПоказатьРучныеДействия(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ОткрытьКонфигуратор" Тогда
		Возврат ОткрытьКонфигуратор(ВыборПользователя, Сценарий);
	
	КонецЕсли;
	
	// Альтернативы этим веткам условий:
	//  "Вычислить()" - неприемлемо использовать только для минимизации кода;
	//  "ВыполнитьОбработкуОповещения()" - не выгодно, т.к. поддерживаются только процедуры,
	//      а следовательно следующий шаг придется запускать из предыдущего шага;
	//      Т.е. исчезает такой большой плюс как изоляция обработчиков от асинхронной логики.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка модифицированности конфигурации.

&НаКлиенте
Функция ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		Если МетаданныеАктуальны Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Основная конфигурация отличается от конфигурации базы данных.
		|Перед запуском обработки по расстановке фрагментов кода
		|рекомендуется обновить конфигурацию базы данных.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ИгнорироватьИзменения", НСтр("ru = 'Пропустить'"));
		Кнопки.Добавить("ЗакрытьПрограмму",      НСтр("ru = 'Закрыть программу'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 60, "ИгнорироватьИзменения"); // 
		
		Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = "ЗакрытьПрограмму" Тогда
			// Дождавшись завершения сценария инициировать завершение сеанса.
			ПодключитьОбработчикОжидания("ЗакрытьПрограмму", 0.1, Истина);
			Возврат Ложь; // Отменить сценарий.
		ИначеЕсли ВыборПользователя = "ИгнорироватьИзменения" Тогда
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПрограмму()
	ЗавершитьРаботуСистемы(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ввод логина и пароля

&НаКлиенте
Функция ВвестиЛогинПароль(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			ВыгрузкаМодулейПользователь = "";
			Возврат Истина; // Ввод имени пользователя не требуется.
		КонецЕсли;
		
		ПолноеИмяФормы = ПолноеИмяФормы("ПараметрыАвторизации");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Пользователь", ВыгрузкаМодулейПользователь);
		ПараметрыФормы.Вставить("Пароль", ВыгрузкаМодулейПароль);
		
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, , , , Сценарий.Обработчик);
		
		Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ТипЗнч(ВыборПользователя) = Тип("Структура") Тогда
			ВыгрузкаМодулейПользователь = ВыборПользователя.Пользователь;
			ВыгрузкаМодулейПароль       = ВыборПользователя.Пароль;
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соединения, которые могут препятствовать выгрузке.

&НаКлиенте
Функция ПроверитьСоединения(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		Если МожноВыгрузитьМодули() Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки текстов модулей конфигурации необходимо
		|закрыть конфигуратор и другие соединения,
		|которые могут препятствовать выгрузке.
		|Текущий сеанс завершать не нужно.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 15, КодВозвратаДиалога.Повторить, , КодВозвратаДиалога.Повторить);
		
		Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь; // Отменить сценарий.
		Иначе
			Сценарий.ТекущийШагУточнение = "";
			Возврат ПроверитьСоединения(ВыборПользователя, Сценарий); // Повторная проверка.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноВыгрузитьМодули()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка модулей.

&НаКлиенте
Функция ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Очистка каталога выгрузки...'"));
	
	Если ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
		УдалитьФайлы(Лев(ВыгрузкаМодулейКаталог, СтрДлина(ВыгрузкаМодулейКаталог) - 1));
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выгрузка текстов модулей...'"));
	
	#Если Не ВебКлиент Тогда
		Если Не ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
			Сценарий.Вставить("ОчиститьКаталогВыгрузки", Истина);
			ВыгрузкаМодулейКаталог = ПолучитьИмяВременногоФайла("CodeUnload") + "\";
			СоздатьКаталог(ВыгрузкаМодулейКаталог);
		КонецЕсли;
		
		Кавычка = """";
		КодВозврата = NULL;
		ЗапуститьПриложение(Кавычка + КаталогПрограммы() + "1cv8.exe" + Кавычка
			+ " DESIGNER"
			+ " /IBConnectionString " + Кавычка + ПутьККонфигурации() + Кавычка
			+ " /N "                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
			+ " /P "                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
			+ " /DumpConfigFiles "    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
			+ " -Module"
			,
			,
			Истина,
			КодВозврата);
		//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
		//	метаданных конфигурации.
		//		<Каталог выгрузки> - каталог расположения файлов свойств;
		//		Module - признак необходимости выгрузки модулей;
		//		Template - признак необходимости выгрузки шаблонов;
		//		Help - признак необходимости выгрузки справочной информации;
		//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расстановка фрагментов кода.

&НаКлиенте
Функция ИзменитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр("ru = 'Изменение текстов модулей...'"));
	
	// 1. Удаление ПеренестиОтборыВДинамическийСписок из всех форм.
	//    1.1. Найти процедуру ПриСозданииНаСервере. Взять к анализу ее содержимое.
	//         Процедуры нет = удаление не требуется.
	//    1.2. Найти вызов ПеренестиОтборыВДинамическийСписок.
	//         Вызова нет = удаление не требуется.
	//    1.3. Удалить вызов ПеренестиОтборыВДинамическийСписок из ПриСозданииНаСервере.
	
	КодировкаМодулей = КодировкаТекста.UTF8;
	СимволыПСТаб = Символы.ПС + Символы.Таб;
	
	ПриСозданииНаСервере_Поиск = ПриСозданииНаСервере_УсловияПоиска();
	ШаблонВызова = "ОбщегоНазначенияКлиентСервер.ПеренестиОтборыВДинамическийСписок(";
	
	НайденныеФайлы = НайтиФайлы(ВыгрузкаМодулейКаталог, "*.Форма.Модуль.txt", Ложь);
	Для Каждого Файл Из НайденныеФайлы Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаМодулей);
		МодульФормы = ЧтениеТекста.Прочитать();
		ЧтениеТекста = Неопределено;
		
		// 1.1.
		Результат = ТелоПроцедуры(МодульФормы, ПриСозданииНаСервере_Поиск);
		Если Не Результат.Найдена Тогда
			Продолжить;
		КонецЕсли;
		МодульФормы = Результат.ТекстМодуля;
		ПриСозданииНаСервере_БывшееТело = Результат.БывшееТело;
		
		// 1.2.
		НайденныеВызовы = МестаИспользованияМетода(Результат.БывшееТело, ШаблонВызова);
		Если НайденныеВызовы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// 1.3.
		ПриСозданииНаСервере_Тело = ПриСозданииНаСервере_БывшееТело;
		Для Каждого Вызов Из НайденныеВызовы Цикл
			ПриСозданииНаСервере_Тело = СтрЗаменить(ПриСозданииНаСервере_Тело, Вызов.Тело, "");
		КонецЦикла;
		ПриСозданииНаСервере_Тело = СокрП(ПриСозданииНаСервере_Тело) + Символы.ПС;
		
		МодульФормы = СтрЗаменить(МодульФормы, ПриСозданииНаСервере_Поиск.Заглушка, ПриСозданииНаСервере_Тело);
		
		ЗаписьТекста = Новый ЗаписьТекста(Файл.ПолноеИмя, КодировкаМодулей);
		ЗаписьТекста.Записать(МодульФормы);
		ЗаписьТекста = Неопределено;
	КонецЦикла;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаКлиенте
Функция ПриСозданииНаСервере_УсловияПоиска()
	УровниПоиска = Новый Массив;
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Комментарий = "&НаСервере";
	УровеньПоиска.Объявление  = "Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)"; // Не локализуется.
	УровеньПоиска.Завершение  = "КонецПроцедуры";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровниПоиска.Добавить(УровеньПоиска);
	
	УсловияПоиска = Новый Структура;
	УсловияПоиска.Вставить("Уровни", УровниПоиска);
	УсловияПоиска.Вставить("УровниКоличество", УровниПоиска.Количество());
	УсловияПоиска.Вставить("Заглушка", "#ПриСозданииНаСервере_Тело#");
	
	Возврат УсловияПоиска;
КонецФункции

&НаКлиенте
Функция ТелоПроцедуры(ТекстМодуля, УсловияПоиска)
	Результат = Новый Структура("ТекстМодуля, БывшееТело, Найдена");
	Результат.Найдена = Ложь;
	
	ВставляемыйФрагмент = УсловияПоиска.Заглушка; //  Символы.ПС + Символы.Таб + + Символы.ПС
	
	Для НомерУровня = 1 По УсловияПоиска.УровниКоличество Цикл
		УровеньПоиска = УсловияПоиска.Уровни[НомерУровня-1];
		
		Позиция = СтрНайти(ТекстМодуля, УровеньПоиска.Объявление);
		Если Позиция = 0 Тогда
			// Накопление вставляемого фрагмента.
			ВставляемыйФрагмент = (
				?(УровеньПоиска.Комментарий = "", "", УровеньПоиска.Комментарий + Символы.ПС)
				+ УровеньПоиска.Объявление
				+ ?(НомерУровня = 1, ВставляемыйФрагмент, Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС)
				+ УровеньПоиска.Завершение);
		Иначе
			// Найдено!
			Результат.Найдена = Истина;
			Если НомерУровня = 1 Тогда // Сама процедура.
				Остаток = Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина);
				ПозицияЗавершения = СтрНайти(Остаток, УровеньПоиска.Завершение);
				
				Результат.БывшееТело = Лев(Остаток, ПозицияЗавершения - 1);
				Результат.ТекстМодуля = (
					Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
					+ ВставляемыйФрагмент
					+ Сред(Остаток, ПозицияЗавершения));
			Иначе // Место, куда ее вставлять.
				Результат.БывшееТело = "";
				Результат.ТекстМодуля = (
					Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
					+ Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС
					+ Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина));
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Результат.БывшееТело = "";
	Результат.ТекстМодуля = СокрЛП(ВставляемыйФрагмент + Символы.ПС + Символы.ПС + ТекстМодуля);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция МестаИспользованияМетода(ТекстМодуля, ПолноеИмяМетода)
	Остаток = СокрЛП(ТекстМодуля);
	ПолноеИмяМетодаДлина = СтрДлина(ПолноеИмяМетода);
	
	Вызовы = Новый Массив;
	Шаблон = Новый ФиксированнаяСтруктура("Тело, Параметры, Количество", "", Неопределено, 0);
	Пока Истина Цикл
		Позиция = СтрНайти(Остаток, ПолноеИмяМетода);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Остаток = Сред(Остаток, Позиция + ПолноеИмяМетодаДлина);
		Позиция = СтрНайти(Остаток, ");");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Тело = Лев(Остаток, Позиция - 1);
		Остаток = Сред(Остаток, Позиция + 2);
		
		Вызов = Новый Структура(Шаблон);
		Вызов.Тело = ПолноеИмяМетода + Тело + ");";
		Вызов.Параметры = СтрокаВМассив(Тело);
		Вызов.Количество = Вызов.Параметры.Количество();
		Если Вызов.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Вызовы.Добавить(Вызов);
	КонецЦикла;
	
	Возврат Вызовы;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка модулей.

&НаКлиенте
Функция ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр("ru = 'Загрузка текстов модулей...'"));
	
	Кавычка = """";
	КодВозврата = Null;
	
	#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(Кавычка + КаталогПрограммы() + "1cv8.exe" + Кавычка
			+ " DESIGNER"
			+ " /IBConnectionString " + Кавычка + ПутьККонфигурации() + Кавычка
			+ " /N "                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
			+ " /P "                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
			+ " /LoadConfigFiles "    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
			+ " -Module"
			+ " -AllWritable"
			,
			,
			Истина,
			КодВозврата);
		//	/LoadConfigFiles <каталог загрузки> [-Module] [-Template] [-Help] [-AllWritable] - загрузка свойств объектов
		//	метаданных конфигурации.
		//		<Каталог загрузки> - каталог расположения файлов свойств;
		//		Module - признак необходимости загрузки модулей;
		//		Template - признак необходимости загрузки шаблонов;
		//		Help - признак необходимости загрузки справочной информации;
		//		AllWritable - признак загрузки свойств только доступных для записи объектов.
		//	Если команда пакетного режима запуска прошла успешно, возвращает код возврата 0, в противном случае  - 1 (101,
		//	если в данных имеются ошибки).
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Очистка временных файлов.

&НаКлиенте
Функция ОчиститьКаталогМодулей(ВыборПользователя, Сценарий)
	Если Не Сценарий.Свойство("ОчиститьКаталогВыгрузки") Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Очистка каталога выгрузки/загрузки модулей...'"));
	
	#Если Не ВебКлиент Тогда
		УдалитьФайлы(ВыгрузкаМодулейКаталог, "*");
		ВыгрузкаМодулейКаталог = "";
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ручные шаги.

&НаКлиенте
Функция ПоказатьРучныеДействия(ВыборПользователя, Сценарий)
	ТекстПредупреждения = 
		НСтр("ru = 'Расстановка фрагментов кода успешно завершена.
		|Для просмотра изменений в конфигураторе нажмите:
		|""Конфигурация"" - ""Конфигурация базы данных"" - ""Сравнить, объединить с конфигурацией БД"".'");
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Новый Структура("Текст", ТекстПредупреждения));
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запуск конфигуратора.

&НаКлиенте
Функция ОткрытьКонфигуратор(ВыборПользователя, Сценарий)
	Состояние(НСтр("ru = 'Запуск конфигуратора.'"));
	
	Кавычка = """";
	#Если Не ВебКлиент Тогда
		ЗапуститьПриложение(Кавычка + КаталогПрограммы() + "1cv8.exe" + Кавычка
			+ " DESIGNER"
			+ " /IBConnectionString " + Кавычка + ПутьККонфигурации() + Кавычка
			+ " /N "                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
			+ " /P "                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка);
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

&НаКлиенте
Функция ПолноеИмяФормы(КраткоеИмяФормы)
	ПозицияТочки = СтрНайти(ИмяФормы, ".");
	ЭтотОбъектВид = Лев(ИмяФормы, ПозицияТочки - 1);
	Остаток = Сред(ИмяФормы, ПозицияТочки + 1);
	
	ПозицияТочки = СтрНайти(Остаток, ".");
	ЭтотОбъектТип = Лев(Остаток, ПозицияТочки - 1);
	
	Возврат ЭтотОбъектВид + "." + ЭтотОбъектТип + ".Форма." + КраткоеИмяФормы;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВМассив(Строка, Разделитель = ",", ПропускатьПустые = Истина, Сокращать = Истина)
	МассивПодстрок = Новый Массив;
	Остаток = Строка;
	РазделительДлина = СтрДлина(Разделитель);
	Пока Истина Цикл
		Позиция = СтрНайти(Остаток, Разделитель);
		Если Позиция = 0 Тогда
			Подстрока = Остаток;
			Остаток = "";
		Иначе
			Подстрока = Лев(Остаток, Позиция - 1);
			Остаток = Сред(Остаток, Позиция + РазделительДлина);
		КонецЕсли;
		Если Сокращать Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		Если Не ПропускатьПустые Или Не ПустаяСтрока(Подстрока) Тогда
			МассивПодстрок.Добавить(Подстрока);
		КонецЕсли;
		Если Остаток = "" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивПодстрок;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Файловая система.

&НаКлиенте
Функция ПутьККонфигурации()
	Кавычка = """";
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	Возврат ПутьККонфигурации;
КонецФункции

#КонецОбласти
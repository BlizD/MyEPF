{3,
{42,0,1,70,20,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Конвертация кода для перехода на версию 2.2.2 (подсистема Оценка производительности)"}
},0,0,1,1,1,0,1,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",0,0},
{11,06ee6a21-061e-47f8-81c5-92ae8b8f3b5d,198ea630-fda2-4cda-8a23-f999f4c67ee6,239f0103-8de9-4fdf-b485-eb5531da7e51,3772996b-41f4-4c47-a5a8-ea397db424ae,3f01ed62-97f8-465b-b4f7-6517ac2bc994,5174ad3f-0569-42fd-8adf-011d8206db6c,5d41082e-9619-42ec-b96f-98b082b3a2f0,679b62d9-ff72-4329-bf3a-c0c32b311dd2,71e0226e-ebb2-4e33-8745-0a94a01bbf15,d7e9e72c-8fa7-430c-a3e9-aeadfd57dfc7,f3613d5c-20c6-46e5-b4d5-7d712ece1296},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаКомандаВыполнить",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКомандаВыполнитьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаЗадатьКаталогВыгрузки",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗадатьКаталогВыгрузкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НадписьПояснение",
{1,1,
{"ru","Конвертация обращений к предопределенным ключевым операциям

Порядок использования:
1. Включить в конфигураторе возможность изменения модулей
2. Закрыть конфигуратор
3. Открыть ИБ под пользователем с административными правами, без пароля
4. Открыть обработку
5. Нажать «Выполнить»
6. Зайти в конфигуратор
7. Выполнить проверку модулей
8. Проверить правильность конвертации с помощью отчета о сравнении"}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"НадписьПояснениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","<b>Конвертация</><b> обращений к предопределенным ключевым операциям</>

Порядок использования:
1. Включить в конфигураторе возможность изменения модулей
2. Закрыть конфигуратор
3. Открыть ИБ под пользователем с административными правами, без пароля
4. Открыть обработку
5. Нажать «Выполнить»
6. Зайти в конфигуратор
7. Выполнить проверку модулей
8. Проверить правильность конвертации с помощью отчета о сравнении"}
},1},0,1,
{10,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НадписьПояснениеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0},"
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБаза = СтрНайти(СтрокаСоединения, ""File="");
	Если ФайловаяБаза > 0 Тогда
		ПервыйСимволПути = ФайловаяБаза + 6;
		СтрокаСоединения = Сред(СтрокаСоединения, ПервыйСимволПути);
		ПоследнийСимволПути = СтрНайти(СтрокаСоединения, "";"");
		СтрокаСоединения = Лев(СтрокаСоединения, ПоследнийСимволПути - 2);
		
		КаталогИБ = ""/F"""""" + СтрокаСоединения + """""""";
		
	Иначе
		ПозицияСервераНачало = СтрНайти(СтрокаСоединения, ""Srvr="") + 6;
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияСервераНачало);
		ПозицияСервераКонец = СтрНайти(СтрокаСоединения, "";"");
		ИмяСервера = Лев(СтрокаСоединения, ПозицияСервераКонец - 2);
		
		ПозицияИБНачало = СтрНайти(СтрокаСоединения, ""Ref="") + 5;
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияИБНачало);
		ПозицияИБКонец = СтрНайти(СтрокаСоединения, "";"");
		ИмяИБ = Лев(СтрокаСоединения, ПозицияИБКонец - 2);
		
		КаталогИБ = ""/S"""""" + ИмяСервера + ""\"" + ИмяИБ + """""""";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Работа с конвертацией обращений к предопределенным ключевым операциям в веб-клиенте не возможна.'""));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Выполняется замена фрагментов кода в модулях конфигурации'""));
	Результат = ПреобразоватьОбращенияККлючевымОперациям();
	Если Результат.ЧислоЗамен > 0 Тогда 
		Состояние(НСтр(""ru = 'Загрузка модулей из текстовых файлов'""));
		ЗагрузитьМодулиВКонфигурацию();
	КонецЕсли;	
	Если Не ПустаяСтрока(Результат.Ошибки) Тогда
		Документ = Новый ТекстовыйДокумент();
		Документ.УстановитьТекст(Результат.Ошибки);
		Документ.Показать(НСтр(""ru = 'Пропущенные модули'""));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(""ru = 'Было проведено замен:'"") + "" "" + Результат.ЧислоЗамен);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьКаталогВыгрузки(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр(""ru = 'Укажите каталог с выгруженными модулями конфигурации'"");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогВыгрузкиМодулей      = ДиалогОткрытияФайла.Каталог;
		ЗаданКаталогВыгрузкиМодулей = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОчиститьКаталогСМодулями()
	УдалитьФайлы(КаталогВыгрузкиМодулей, ""*"");
КонецПроцедуры

&НаСервере
Функция ПреобразоватьОбращенияККлючевымОперациям()
	
	Если Не ЗаданКаталогВыгрузкиМодулей Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
		ИмяКаталога = КаталогВременныхФайлов() + ""ВыгрузкаМодулей"" + Формат(ТекущаяДата, ""ДФ=ddMMyyyyHHmmss"");
		СоздатьКаталог(ИмяКаталога);
		КаталогВыгрузкиМодулей = ИмяКаталога;
		
		ОчиститьКаталогСМодулями();
		ВыгрузитьМодулиКонфигурации();
	КонецЕсли;
	
	ЧислоЗамен = 0;
	Ошибки = """";
	ОбработанныеФайлы = Новый Массив;
	ПодсистемыДляКонвертации = СписокПодсистемДляКонвертации();
	СоставПодсистемыОценкаПроизводительности = СоставПодсистемыОценкаПроизводительности();
	Для Каждого ИмяПодсистемы Из ПодсистемыДляКонвертации Цикл
		ИерархияПодсистемы = СтрРазделить(ИмяПодсистемы, ""."", Ложь);
		Подсистема = Метаданные;
		Для Каждого УровеньИерархии Из ИерархияПодсистемы Цикл
			Подсистема = Подсистема.Подсистемы[УровеньИерархии];
			
			СоставПодсистемы = Подсистема.Состав;
			Для Каждого ЭлементПодсистемы Из СоставПодсистемы Цикл
				
				Если СоставПодсистемыОценкаПроизводительности.Найти(ЭлементПодсистемы) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, ""*."" + ЭлементПодсистемы.Имя + "".*.txt"");
				ТекстФайла = Новый ТекстовыйДокумент;
				
				Для Каждого Файл Из МассивФайлов Цикл 		
					
					Если ОбработанныеФайлы.Найти(Файл.ИмяБезРасширения) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = НСтр(""ru = 'Выполняется конвертация фрагментов кода в модуле'"") + "" [ИмяФайлаМодуля]"";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, ""[ИмяФайлаМодуля]"", Файл.Имя);
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
					
					ТекстФайла.Прочитать(Файл.ПолноеИмя);
					СтрокаТекста = ТекстФайла.ПолучитьТекст();
					ПреобразоватьОбращенияККлючевымОперациямВТексте(Файл.Имя, ИмяПодсистемы, СтрокаТекста, ЧислоЗамен, Ошибки);
					
					ТекстФайла.УстановитьТекст(СтрокаТекста);
					ТекстФайла.Записать(Файл.ПолноеИмя);
					
					ОбработанныеФайлы.Добавить(Файл.ИмяБезРасширения);
					
				КонецЦикла;
			КонецЦикла;

		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура(""ЧислоЗамен,Ошибки"", ЧислоЗамен, Ошибки);
		
КонецФункции

&НаСервере
Функция СоставПодсистемыОценкаПроизводительности()
	
	Результат = Новый Массив;
	
	Состав = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.ОценкаПроизводительности.Состав;
	Для Каждого Элемент Из Состав Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьОбращенияККлючевымОперациямВТексте(ИмяФайлаМодуля, ИмяПодсистемы, СтрокаТекста, ЧислоЗамен, Ошибки)
	
	НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста);
	Пока НачалоФрагмента <> Неопределено Цикл
		
		КонецФрагмента = НайтиКонецФрагмента(СтрокаТекста, НачалоФрагмента);
		Если КонецФрагмента.Позиция = 0 Тогда
			ТекстСообщения = ""[ИмяФайлаМодуля]: "" + НСтр(""ru = 'для вхождения в позиции'"") + "" [НачалоФрагмента] ""
				+ ?(НачалоФрагмента.Вариант = 1, НСтр(""ru = 'не обнаружена закрывающая скобка.'""), НСтр(""ru = 'не обнаружен конец строки.'""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""[НачалоФрагмента]"", НачалоФрагмента.Позиция);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""[ИмяФайлаМодуля]"", ИмяФайлаМодуля);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Ошибки = Ошибки + Символы.ПС + ТекстСообщения;
			Возврат;
		КонецЕсли;
		
		// Замена обращения к элементу справочника на кавычку (начало строки).
		ИсходнаяСтрока = СтрокаТекста;
		УдаленоСимволов = ЗаменитьФрагмент(СтрокаТекста, НачалоФрагмента.Позиция, НачалоФрагмента.Позиция + НачалоФрагмента.Длина - 1, """""""");
		
		Если НачалоФрагмента.Вариант = 1 Тогда
			// Замена закрывающей скобки на кавычку (конец строки).
			ЗаменитьФрагмент(СтрокаТекста, КонецФрагмента.Позиция - УдаленоСимволов, 
							КонецФрагмента.Позиция - УдаленоСимволов + КонецФрагмента.Длина - 1, """""""");
		Иначе
			// Добавление закрывающей кавычки.
			ЗакрывающийСимвол = ?(КонецФрагмента.Вариант = 3, "";"", ?(КонецФрагмента.Вариант = 4, "","", "")""));
			ЗаменитьФрагмент(СтрокаТекста, КонецФрагмента.Позиция - УдаленоСимволов, 
							КонецФрагмента.Позиция - УдаленоСимволов + КонецФрагмента.Длина - 1, """""""" + ЗакрывающийСимвол);
		КонецЕсли;
		ЧислоЗамен = ЧислоЗамен + 1;
			
		НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиНачалоФрагмента(Знач СтрокаТекста)
	
	СтруктураВозврата = Новый Структура(""Позиция,Вариант,Длина"");
	
	СтрокаТекста 	= НРег(СтрокаТекста);
	
	ПервыйВариант = ""предопределенноезначение(""""справочник.ключевыеоперации."";
	ВторойВариант = ""справочники.ключевыеоперации."";
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
			СтруктураВозврата.Позиция = Итерация;
			СтруктураВозврата.Вариант = 1;
			СтруктураВозврата.Длина = СтрДлина(ПервыйВариант);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			СтруктураВозврата.Позиция = Итерация;
			СтруктураВозврата.Вариант = 2;
			СтруктураВозврата.Длина = СтрДлина(ВторойВариант);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиКонецФрагмента(Знач СтрокаТекста, Знач НачалоФрагмента)
	
	СтруктураВозврата = Новый Структура(""Позиция,Вариант,Длина"");
	
	СтрокаТекста 	= НРег(СтрокаТекста);
	
	ПервыйВариант = """""")"";
	ВторойВариант = "")"";
	ТретийВариант = "";"";
	ЧетвертыйВариант = "","";
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0
		И СтрНайти(СтрокаТекста, ТретийВариант) = 0 И СтрНайти(СтрокаТекста, ЧетвертыйВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	НачальнаяПозицияПоиска = НачалоФрагмента.Позиция + НачалоФрагмента.Длина + 1;
	Для Итерация = НачальнаяПозицияПоиска По СтрДлина(СтрокаТекста) Цикл
		
		Если НачалоФрагмента.Вариант = 1 Тогда
			Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 1;
				СтруктураВозврата.Длина = СтрДлина(ПервыйВариант);
				Возврат СтруктураВозврата;
			КонецЕсли;
			
			Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 2;
				СтруктураВозврата.Длина = СтрДлина(ВторойВариант);
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;
		
		Если НачалоФрагмента.Вариант = 2 Тогда
			Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 2;
				СтруктураВозврата.Длина = СтрДлина(ВторойВариант);
				Возврат СтруктураВозврата;
			ИначеЕсли Сред(СтрокаТекста, Итерация, СтрДлина(ТретийВариант)) = (ТретийВариант) Тогда
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 3;
				СтруктураВозврата.Длина = СтрДлина(ТретийВариант);
				Возврат СтруктураВозврата;
			ИначеЕсли Сред(СтрокаТекста, Итерация, СтрДлина(ЧетвертыйВариант)) = (ЧетвертыйВариант) Тогда
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 4;
				СтруктураВозврата.Длина = СтрДлина(ЧетвертыйВариант);
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции

// Заменяет фрагмент строки на переданный.
//
// Параметры:
//	СтрокаТекста - Строка - Строка, в которой выполняется замена.
//	Начало - Число - Позиция первого символа заменяемого фрагмента.
//	Конец - Число - Позиция последнего символа заменяемого фрагмента.
//	НовыйФрагмент - Строка - Новый фрагмент текста, который будет вставлен вместо имеющегося.
//
&НаСервере
Функция ЗаменитьФрагмент(СтрокаТекста, Начало, Конец, НовыйФрагмент)
	
	СтрокаТекста = Лев(СтрокаТекста, Начало-1) + НовыйФрагмент + Сред(СтрокаТекста, Конец+1);	
	УдаленоСимволов = Конец - Начало + 1 - СтрДлина(НовыйФрагмент);
	
	Возврат УдаленоСимволов;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьМодулиВКонфигурацию()
		
	СтрокаЗапускаПлатформы = КаталогПрограммы() + ""1cv8.exe"";
	
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + "" DESIGNER ""
		+ КаталогКонфигурации + "" /N""""""
		+ Пользователь + """""" /P"""""" + Пароль
		+ """""" /LoadConfigFiles """""" + КаталогВыгрузкиМодулей
		+ """""" -Module"";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьМодулиКонфигурации()

	СтрокаЗапускаПлатформы = """""""" + КаталогПрограммы() + ""1cv8.exe"""""";
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + "" DESIGNER ""
		+ КаталогКонфигурации + "" /N""""""
		+ Пользователь + """""" /P"""""" + Пароль
		+ """""" /DumpConfigFiles """""" + КаталогВыгрузкиМодулей
		+ """""" -Module"";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);

КонецПроцедуры

&НаСервере
Функция СписокВсехПодсистем()
	
	СписокПодсистем = Новый Массив;
	ПолучитьСписокПодсистемИзДерева(СписокПодсистем, Метаданные.Подсистемы, """");
	
	Возврат СписокПодсистем;
	
КонецФункции

&НаСервере
Функция СписокПодсистемДляКонвертации();
	
	СписокПодсистем = СписокВсехПодсистем();
	СписокИспользуемыхПодсистем = СписокИспользуемыхПодсистем();
	
	ПодсистемыДляКонвертации = Новый Массив;
	Для Каждого ИмяПодсистемы Из СписокПодсистем Цикл
		Если СписокИспользуемыхПодсистем.Найти(ИмяПодсистемы) = Неопределено Тогда 
			ПодсистемыДляКонвертации.Добавить(ИмяПодсистемы);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПодсистемыДляКонвертации;
	
КонецФункции

&НаСервере
Функция СписокИспользуемыхПодсистем()
	
	Результат = Новый Массив;
	СтандартныеПодсистемы = Метаданные.Подсистемы.Найти(""СтандартныеПодсистемы"");
	Если СтандартныеПодсистемы <> Неопределено Тогда
		СписокПодсистем = СтандартныеПодсистемы.Подсистемы;
		ПолучитьСписокПодсистемИзДерева(Результат, СписокПодсистем, """")
	КонецЕсли;
	
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Результат[Индекс] = ""СтандартныеПодсистемы."" + Результат[Индекс];
	КонецЦикла;
	Результат.Добавить(""СтандартныеПодсистемы"");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокПодсистемИзДерева(СписокПодсистем, ВложенныеПодсистемы, ПутьКПодсистеме)
	
	Если ВложенныеПодсистемы.Количество() > 0 Тогда 
		Для каждого Подсистема Из ВложенныеПодсистемы Цикл
			РезервныйПуть = ПутьКПодсистеме;
			ПутьКПодсистеме = ПутьКПодсистеме + ""."" + Строка(Подсистема.Имя);
			ПолучитьСписокПодсистемИзДерева(СписокПодсистем, Подсистема.Подсистемы, ПутьКПодсистеме);
			СписокПодсистем.Добавить(Сред(ПутьКПодсистеме, 2));
			ПутьКПодсистеме = РезервныйПуть;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр(""ru = 'Помощник внедрения БСП'"", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти",
{4,6,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",098f30b2-bfc6-4881-b35b-b738239d7638}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ИмяАдминистратораИБ",
{1,1,
{"ru","Имя администратора ИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"КаталогВыгрузкиМодулей",
{1,1,
{"ru","Каталог выгрузки модулей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"КаталогИБ",
{1,1,
{"ru","Каталог ИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ПарольАдминистратораИБ",
{1,1,
{"ru","Пароль администратора ИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"ЗаданКаталогВыгрузкиМодулей",
{1,1,
{"ru","Задан каталог выгрузки модулей"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,2,
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнить",
{1,1,
{"ru","Выполнить"}
},
{1,1,
{"ru","Команда выполнить"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},"КомандаВыполнить",2,0,0,
{0,0},1,0},
{7,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗадатьКаталогВыгрузки",
{1,1,
{"ru","Задать каталог выгрузки"}
},
{1,1,
{"ru","Задать каталог выгрузки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗадатьКаталогВыгрузки",3,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	Если ФайловаяБаза > 0 Тогда
		ПервыйСимволПути = ФайловаяБаза + 6;
		СтрокаСоединения = Сред(СтрокаСоединения, ПервыйСимволПути);
		ПоследнийСимволПути = СтрНайти(СтрокаСоединения, ";");
		СтрокаСоединения = Лев(СтрокаСоединения, ПоследнийСимволПути - 2);
		
		КаталогИБ = "/F""" + СтрокаСоединения + """";
		
	Иначе
		ПозицияСервераНачало = СтрНайти(СтрокаСоединения, "Srvr=") + 6;
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияСервераНачало);
		ПозицияСервераКонец = СтрНайти(СтрокаСоединения, ";");
		ИмяСервера = Лев(СтрокаСоединения, ПозицияСервераКонец - 2);
		
		ПозицияИБНачало = СтрНайти(СтрокаСоединения, "Ref=") + 5;
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияИБНачало);
		ПозицияИБКонец = СтрНайти(СтрокаСоединения, ";");
		ИмяИБ = Лев(СтрокаСоединения, ПозицияИБКонец - 2);
		
		КаталогИБ = "/S""" + ИмяСервера + "\" + ИмяИБ + """";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Работа с конвертацией обращений к предопределенным ключевым операциям в веб-клиенте не возможна.'"));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется замена фрагментов кода в модулях конфигурации'"));
	Результат = ПреобразоватьОбращенияККлючевымОперациям();
	Если Результат.ЧислоЗамен > 0 Тогда 
		Состояние(НСтр("ru = 'Загрузка модулей из текстовых файлов'"));
		ЗагрузитьМодулиВКонфигурацию();
	КонецЕсли;	
	Если Не ПустаяСтрока(Результат.Ошибки) Тогда
		Документ = Новый ТекстовыйДокумент();
		Документ.УстановитьТекст(Результат.Ошибки);
		Документ.Показать(НСтр("ru = 'Пропущенные модули'"));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Было проведено замен:'") + " " + Результат.ЧислоЗамен);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьКаталогВыгрузки(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите каталог с выгруженными модулями конфигурации'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогВыгрузкиМодулей      = ДиалогОткрытияФайла.Каталог;
		ЗаданКаталогВыгрузкиМодулей = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОчиститьКаталогСМодулями()
	УдалитьФайлы(КаталогВыгрузкиМодулей, "*");
КонецПроцедуры

&НаСервере
Функция ПреобразоватьОбращенияККлючевымОперациям()
	
	Если Не ЗаданКаталогВыгрузкиМодулей Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
		ИмяКаталога = КаталогВременныхФайлов() + "ВыгрузкаМодулей" + Формат(ТекущаяДата, "ДФ=ddMMyyyyHHmmss");
		СоздатьКаталог(ИмяКаталога);
		КаталогВыгрузкиМодулей = ИмяКаталога;
		
		ОчиститьКаталогСМодулями();
		ВыгрузитьМодулиКонфигурации();
	КонецЕсли;
	
	ЧислоЗамен = 0;
	Ошибки = "";
	ОбработанныеФайлы = Новый Массив;
	ПодсистемыДляКонвертации = СписокПодсистемДляКонвертации();
	СоставПодсистемыОценкаПроизводительности = СоставПодсистемыОценкаПроизводительности();
	Для Каждого ИмяПодсистемы Из ПодсистемыДляКонвертации Цикл
		ИерархияПодсистемы = СтрРазделить(ИмяПодсистемы, ".", Ложь);
		Подсистема = Метаданные;
		Для Каждого УровеньИерархии Из ИерархияПодсистемы Цикл
			Подсистема = Подсистема.Подсистемы[УровеньИерархии];
			
			СоставПодсистемы = Подсистема.Состав;
			Для Каждого ЭлементПодсистемы Из СоставПодсистемы Цикл
				
				Если СоставПодсистемыОценкаПроизводительности.Найти(ЭлементПодсистемы) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*." + ЭлементПодсистемы.Имя + ".*.txt");
				ТекстФайла = Новый ТекстовыйДокумент;
				
				Для Каждого Файл Из МассивФайлов Цикл 		
					
					Если ОбработанныеФайлы.Найти(Файл.ИмяБезРасширения) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = НСтр("ru = 'Выполняется конвертация фрагментов кода в модуле'") + " [ИмяФайлаМодуля]";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", Файл.Имя);
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
					
					ТекстФайла.Прочитать(Файл.ПолноеИмя);
					СтрокаТекста = ТекстФайла.ПолучитьТекст();
					ПреобразоватьОбращенияККлючевымОперациямВТексте(Файл.Имя, ИмяПодсистемы, СтрокаТекста, ЧислоЗамен, Ошибки);
					
					ТекстФайла.УстановитьТекст(СтрокаТекста);
					ТекстФайла.Записать(Файл.ПолноеИмя);
					
					ОбработанныеФайлы.Добавить(Файл.ИмяБезРасширения);
					
				КонецЦикла;
			КонецЦикла;

		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ЧислоЗамен,Ошибки", ЧислоЗамен, Ошибки);
		
КонецФункции

&НаСервере
Функция СоставПодсистемыОценкаПроизводительности()
	
	Результат = Новый Массив;
	
	Состав = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.ОценкаПроизводительности.Состав;
	Для Каждого Элемент Из Состав Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьОбращенияККлючевымОперациямВТексте(ИмяФайлаМодуля, ИмяПодсистемы, СтрокаТекста, ЧислоЗамен, Ошибки)
	
	НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста);
	Пока НачалоФрагмента <> Неопределено Цикл
		
		КонецФрагмента = НайтиКонецФрагмента(СтрокаТекста, НачалоФрагмента);
		Если КонецФрагмента.Позиция = 0 Тогда
			ТекстСообщения = "[ИмяФайлаМодуля]: " + НСтр("ru = 'для вхождения в позиции'") + " [НачалоФрагмента] "
				+ ?(НачалоФрагмента.Вариант = 1, НСтр("ru = 'не обнаружена закрывающая скобка.'"), НСтр("ru = 'не обнаружен конец строки.'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НачалоФрагмента]", НачалоФрагмента.Позиция);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайлаМодуля]", ИмяФайлаМодуля);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Ошибки = Ошибки + Символы.ПС + ТекстСообщения;
			Возврат;
		КонецЕсли;
		
		// Замена обращения к элементу справочника на кавычку (начало строки).
		ИсходнаяСтрока = СтрокаТекста;
		УдаленоСимволов = ЗаменитьФрагмент(СтрокаТекста, НачалоФрагмента.Позиция, НачалоФрагмента.Позиция + НачалоФрагмента.Длина - 1, """");
		
		Если НачалоФрагмента.Вариант = 1 Тогда
			// Замена закрывающей скобки на кавычку (конец строки).
			ЗаменитьФрагмент(СтрокаТекста, КонецФрагмента.Позиция - УдаленоСимволов, 
							КонецФрагмента.Позиция - УдаленоСимволов + КонецФрагмента.Длина - 1, """");
		Иначе
			// Добавление закрывающей кавычки.
			ЗакрывающийСимвол = ?(КонецФрагмента.Вариант = 3, ";", ?(КонецФрагмента.Вариант = 4, ",", ")"));
			ЗаменитьФрагмент(СтрокаТекста, КонецФрагмента.Позиция - УдаленоСимволов, 
							КонецФрагмента.Позиция - УдаленоСимволов + КонецФрагмента.Длина - 1, """" + ЗакрывающийСимвол);
		КонецЕсли;
		ЧислоЗамен = ЧислоЗамен + 1;
			
		НачалоФрагмента = НайтиНачалоФрагмента(СтрокаТекста);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиНачалоФрагмента(Знач СтрокаТекста)
	
	СтруктураВозврата = Новый Структура("Позиция,Вариант,Длина");
	
	СтрокаТекста 	= НРег(СтрокаТекста);
	
	ПервыйВариант = "предопределенноезначение(""справочник.ключевыеоперации.";
	ВторойВариант = "справочники.ключевыеоперации.";
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Итерация = 1 По СтрДлина(СтрокаТекста) Цикл
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
			СтруктураВозврата.Позиция = Итерация;
			СтруктураВозврата.Вариант = 1;
			СтруктураВозврата.Длина = СтрДлина(ПервыйВариант);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
			СтруктураВозврата.Позиция = Итерация;
			СтруктураВозврата.Вариант = 2;
			СтруктураВозврата.Длина = СтрДлина(ВторойВариант);
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиКонецФрагмента(Знач СтрокаТекста, Знач НачалоФрагмента)
	
	СтруктураВозврата = Новый Структура("Позиция,Вариант,Длина");
	
	СтрокаТекста 	= НРег(СтрокаТекста);
	
	ПервыйВариант = """)";
	ВторойВариант = ")";
	ТретийВариант = ";";
	ЧетвертыйВариант = ",";
	
	Если СтрНайти(СтрокаТекста, ПервыйВариант) = 0 И СтрНайти(СтрокаТекста, ВторойВариант) = 0
		И СтрНайти(СтрокаТекста, ТретийВариант) = 0 И СтрНайти(СтрокаТекста, ЧетвертыйВариант) = 0 Тогда
		Возврат 0;
	КонецЕсли;	
	
	НачальнаяПозицияПоиска = НачалоФрагмента.Позиция + НачалоФрагмента.Длина + 1;
	Для Итерация = НачальнаяПозицияПоиска По СтрДлина(СтрокаТекста) Цикл
		
		Если НачалоФрагмента.Вариант = 1 Тогда
			Если Сред(СтрокаТекста, Итерация, СтрДлина(ПервыйВариант)) = (ПервыйВариант) Тогда 
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 1;
				СтруктураВозврата.Длина = СтрДлина(ПервыйВариант);
				Возврат СтруктураВозврата;
			КонецЕсли;
			
			Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда 
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 2;
				СтруктураВозврата.Длина = СтрДлина(ВторойВариант);
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;
		
		Если НачалоФрагмента.Вариант = 2 Тогда
			Если Сред(СтрокаТекста, Итерация, СтрДлина(ВторойВариант)) = (ВторойВариант) Тогда
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 2;
				СтруктураВозврата.Длина = СтрДлина(ВторойВариант);
				Возврат СтруктураВозврата;
			ИначеЕсли Сред(СтрокаТекста, Итерация, СтрДлина(ТретийВариант)) = (ТретийВариант) Тогда
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 3;
				СтруктураВозврата.Длина = СтрДлина(ТретийВариант);
				Возврат СтруктураВозврата;
			ИначеЕсли Сред(СтрокаТекста, Итерация, СтрДлина(ЧетвертыйВариант)) = (ЧетвертыйВариант) Тогда
				СтруктураВозврата.Позиция = Итерация;
				СтруктураВозврата.Вариант = 4;
				СтруктураВозврата.Длина = СтрДлина(ЧетвертыйВариант);
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции

// Заменяет фрагмент строки на переданный.
//
// Параметры:
//	СтрокаТекста - Строка - Строка, в которой выполняется замена.
//	Начало - Число - Позиция первого символа заменяемого фрагмента.
//	Конец - Число - Позиция последнего символа заменяемого фрагмента.
//	НовыйФрагмент - Строка - Новый фрагмент текста, который будет вставлен вместо имеющегося.
//
&НаСервере
Функция ЗаменитьФрагмент(СтрокаТекста, Начало, Конец, НовыйФрагмент)
	
	СтрокаТекста = Лев(СтрокаТекста, Начало-1) + НовыйФрагмент + Сред(СтрокаТекста, Конец+1);	
	УдаленоСимволов = Конец - Начало + 1 - СтрДлина(НовыйФрагмент);
	
	Возврат УдаленоСимволов;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьМодулиВКонфигурацию()
		
	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER "
		+ КаталогКонфигурации + " /N"""
		+ Пользователь + """ /P""" + Пароль
		+ """ /LoadConfigFiles """ + КаталогВыгрузкиМодулей
		+ """ -Module";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьМодулиКонфигурации()

	СтрокаЗапускаПлатформы = """" + КаталогПрограммы() + "1cv8.exe""";
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER "
		+ КаталогКонфигурации + " /N"""
		+ Пользователь + """ /P""" + Пароль
		+ """ /DumpConfigFiles """ + КаталогВыгрузкиМодулей
		+ """ -Module";
				  
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);

КонецПроцедуры

&НаСервере
Функция СписокВсехПодсистем()
	
	СписокПодсистем = Новый Массив;
	ПолучитьСписокПодсистемИзДерева(СписокПодсистем, Метаданные.Подсистемы, "");
	
	Возврат СписокПодсистем;
	
КонецФункции

&НаСервере
Функция СписокПодсистемДляКонвертации();
	
	СписокПодсистем = СписокВсехПодсистем();
	СписокИспользуемыхПодсистем = СписокИспользуемыхПодсистем();
	
	ПодсистемыДляКонвертации = Новый Массив;
	Для Каждого ИмяПодсистемы Из СписокПодсистем Цикл
		Если СписокИспользуемыхПодсистем.Найти(ИмяПодсистемы) = Неопределено Тогда 
			ПодсистемыДляКонвертации.Добавить(ИмяПодсистемы);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПодсистемыДляКонвертации;
	
КонецФункции

&НаСервере
Функция СписокИспользуемыхПодсистем()
	
	Результат = Новый Массив;
	СтандартныеПодсистемы = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если СтандартныеПодсистемы <> Неопределено Тогда
		СписокПодсистем = СтандартныеПодсистемы.Подсистемы;
		ПолучитьСписокПодсистемИзДерева(Результат, СписокПодсистем, "")
	КонецЕсли;
	
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Результат[Индекс] = "СтандартныеПодсистемы." + Результат[Индекс];
	КонецЦикла;
	Результат.Добавить("СтандартныеПодсистемы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокПодсистемИзДерева(СписокПодсистем, ВложенныеПодсистемы, ПутьКПодсистеме)
	
	Если ВложенныеПодсистемы.Количество() > 0 Тогда 
		Для каждого Подсистема Из ВложенныеПодсистемы Цикл
			РезервныйПуть = ПутьКПодсистеме;
			ПутьКПодсистеме = ПутьКПодсистеме + "." + Строка(Подсистема.Имя);
			ПолучитьСписокПодсистемИзДерева(СписокПодсистем, Подсистема.Подсистемы, ПутьКПодсистеме);
			СписокПодсистем.Добавить(Сред(ПутьКПодсистеме, 2));
			ПутьКПодсистеме = РезервныйПуть;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Помощник внедрения БСП'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
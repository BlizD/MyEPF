&НаСервере
Перем КартинкиКонфигурации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Файл = Новый Файл(ИмяПапки);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяПапки, "*");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодОбработчикаКомандыПриИзменении(Элемент)
	
	ОписаниеОбъекта = Новый Структура("Модуль,Синоним,Картинка,ПолноеИмя");
	ОписаниеОбъекта.Вставить("Модуль", КодОбработчикаКоманды);
	КодДляРазмещенияВМенеджерПечати = КодДляМенеджераПечати(ОписаниеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураКонфигурации

&НаКлиенте
Процедура СтруктураКонфигурацииПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		КодОбработчикаКоманды = ТекущиеДанные.Модуль;
		КодДляРазмещенияВМенеджерПечати = ТекущиеДанные.КодДляРазмещенияВМенеджерПечати;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АнализироватьКонфигурацию(Команда)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ВыполнитьАнализКомандПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМетаданные(Команда)
	ЗагрузитьСтруктуруКонфигурации();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВставкуКода(Команда)
	Если АнализВыполнен Тогда
		ВыполнитьВставкуКодаАнализВыполнен(Истина);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставкуКодаАнализВыполнен", ЭтотОбъект);
		ВыполнитьАнализКомандПечати(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодменюПечатьВФормах(Команда)
	Состояние(НСтр("ru = 'Анализ форм...'"));
	НайтиФормыИспользующиеГруппуПечать();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВнедрение(Команда)
	ВыполнитьПроверкуПодключенияПодменюПечатьВФормах(СписокФормСВнедрением());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбрабатываемыеМодули.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбрабатываемыеМодули.ВставкаВыполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);

КонецПроцедуры

// анализ конфигурации

&НаКлиенте
Функция ВыполнитьАнализКомандПечати(ОбработчикРезультата = Неопределено)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьАнализКомандПечатиЗавершение", ЭтотОбъект, ОбработчикРезультата);
	ЗапроситьУчетныеДанные(ОписаниеОповещения);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьАнализКомандПечатиЗавершение(УчетныеДанныеПолучены, ОбработчикРезультата) Экспорт
	
	АнализВыполнен = Ложь;
	
	Если ВыгрузитьТекстыМодулей() Тогда
		Состояние(НСтр("ru = 'Загрузка структуры конфигурации...'"));
		ЗагрузитьСтруктуруКонфигурации();
		
		Состояние(НСтр("ru = 'Чтение текстов модулей команд...'"));
		ПрочитатьТекстыМодулей();
		
		Состояние(НСтр("ru = 'Анализ команд...'"));
		СформироватьКодДляВставкиВМенеджерыПечати();
		
		Состояние(НСтр("ru = 'Анализ форм...'"));
		НайтиФормыИспользующиеГруппуПечать();
		
		Состояние(НСтр("ru = 'Подготовка кода для вставки в модули...'"));

		ПодготовитьТекстыДляВставки();
		
		ПроверитьНеобходимостьВставкиКодаВМодулях();
		
		Состояние(НСтр("ru = 'Анализ конфигурации завершен.'"));
		
		АнализВыполнен = Истина;
	Иначе
		ПоказатьПредупреждение(, ТекстНеУдалосьВыгрузитьМодули());
	КонецЕсли;
		
	Окно.Активизировать();
	
	Если ОбработчикРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, АнализВыполнен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФормыИспользующиеГруппуПечать()
	ФормыСГруппойКомандПечать.Очистить();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ПараметрыФормы = Новый Структура("АвтоТест", Истина);
	СписокВсехФормКонфигурации = СписокВсехФормКонфигурации();
	Счетчик = 1;
	Для Каждого ОписаниеФормы Из СписокВсехФормКонфигурации Цикл
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Анализ форм... (%1 из %2)'"), Счетчик, СписокВсехФормКонфигурации.Количество());
		Состояние(ТекстСостояния, 100 * Счетчик / СписокВсехФормКонфигурации.Количество(), ОписаниеФормы.ИмяФормы);
		Счетчик = Счетчик + 1;
		
		Попытка
			Форма = ПолучитьФорму(ОписаниеФормы.ИмяФормы, ПараметрыФормы);
		Исключение
			ТекстовыйДокумент.ДобавитьСтроку(ОписаниеФормы.ИмяФормы);
			Продолжить;
		КонецПопытки;
		
		Если Форма = Неопределено Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ОписаниеФормы.ИмяФормы);
			Продолжить;
		КонецЕсли;
		
		ВладелецГруппыПечать = ВладелецГруппыПечать(Форма);
		Если Не ПустаяСтрока(ВладелецГруппыПечать) Тогда
			СведенияОФорме = ФормыСГруппойКомандПечать.Добавить();
			СведенияОФорме.ИмяФормы = ОписаниеФормы.ИмяФормы;
			СведенияОФорме.ИмяЭлемента = ВладелецГруппыПечать;
			СведенияОФорме.ИмяОбъекта = ОписаниеФормы.ИмяОбъекта;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
		ТекстовыйДокумент.ВставитьСтроку(0, НСтр("ru = 'Не удалось получить следующие формы для анализа:'"));
		ТекстовыйДокумент.Показать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СписокВсехФормКонфигурации()
	КоллекцииОбъектовМетаданных = Новый Массив;
	КоллекцииОбъектовМетаданных.Добавить("ОбщиеФормы");
	КоллекцииОбъектовМетаданных.Добавить("Справочники");
	КоллекцииОбъектовМетаданных.Добавить("Документы");
	КоллекцииОбъектовМетаданных.Добавить("ЖурналыДокументов");
	КоллекцииОбъектовМетаданных.Добавить("Отчеты");
	КоллекцииОбъектовМетаданных.Добавить("Обработки");
	КоллекцииОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	КоллекцииОбъектовМетаданных.Добавить("РегистрыСведений");
	КоллекцииОбъектовМетаданных.Добавить("РегистрыНакопления");
	КоллекцииОбъектовМетаданных.Добавить("РегистрыБухгалтерии");
	КоллекцииОбъектовМетаданных.Добавить("РегистрыРасчета");
	КоллекцииОбъектовМетаданных.Добавить("БизнесПроцессы");
	КоллекцииОбъектовМетаданных.Добавить("Задачи");
	
	Результат = Новый Массив;
	Для Каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[КоллекцияОбъектовМетаданных] Цикл
			Если Метаданные[КоллекцияОбъектовМетаданных] = Метаданные.ОбщиеФормы Тогда
				Результат.Добавить(Новый Структура("ИмяФормы,ИмяОбъекта", ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных.ПолноеИмя()));
			Иначе
				Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
					Результат.Добавить(Новый Структура("ИмяФормы,ИмяОбъекта", Форма.ПолноеИмя(), ОбъектМетаданных.ПолноеИмя()));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Процедура ПроверитьНеобходимостьВставкиКодаВМодулях()
	
	ТекстыМодулей = Новый Соответствие;
	Для Каждого Модуль Из ОбрабатываемыеМодули Цикл
		ТекстМодуля = Новый ТекстовыйДокумент;
		Файл = Новый Файл(Модуль.ПутьКФайлу);
		Если Файл.Существует() Тогда
			ТекстМодуля.Прочитать(Модуль.ПутьКФайлу);
		КонецЕсли;
		ТекстыМодулей.Вставить(Модуль.ПутьКФайлу, ТекстМодуля);
	КонецЦикла;
	
	Для Каждого Модуль Из ОбрабатываемыеМодули Цикл
		ТекстМодуля = ТекстыМодулей[Модуль.ПутьКФайлу];
		Если СтрНайти(ТекстМодуля.ПолучитьТекст(), Модуль.ТекстДляВставки) Тогда
			Модуль.ВставкаВыполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// вставка кода

&НаКлиенте
Процедура ВыполнитьВставкуКодаАнализВыполнен(РезультатАнализа, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не РезультатАнализа Тогда
		Возврат;
	КонецЕсли;
		
	АнализВыполнен = Истина;
	Состояние(НСтр("ru = 'Вставка текста в модули...'"));
	ВставитьКодВФайлыКонфигурации();
	ЗагрузкаВыполнена = Не ЗагрузитьТекстыМодулей();
	Окно.Активизировать();
	
	Если ЗагрузкаВыполнена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось загрузить модули в конфигурацию.'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Вставка кода подсистемы ""Печать"" завершена.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКодВФайлыКонфигурации()
	
	ТекстыМодулей = Новый Соответствие;
	Для Каждого Модуль Из ОбрабатываемыеМодули Цикл
		ТекстМодуля = Новый ТекстовыйДокумент;
		Файл = Новый Файл(Модуль.ПутьКФайлу);
		Если Файл.Существует() Тогда
			ТекстМодуля.Прочитать(Модуль.ПутьКФайлу);
		Иначе
			ТекстМодуля.Записать(Модуль.ПутьКФайлу);
		КонецЕсли;
		ТекстыМодулей.Вставить(Модуль.ПутьКФайлу, ТекстМодуля);
	КонецЦикла;
	
	Для Каждого Модуль Из ОбрабатываемыеМодули Цикл
		Если Модуль.ВставкаВыполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстМодуля = ТекстыМодулей[Модуль.ПутьКФайлу];
		Если Модуль.ИмяПроцедуры = "ДобавитьКомандыПечати" Тогда
			ВставитьКодВПроцедуруМодуля(ТекстМодуля, Модуль.ИмяПроцедуры,
				ШаблонПроцедуры_ДобавитьКомандыПечати(), Модуль.ТекстДляВставки);
		ИначеЕсли Модуль.ИмяПроцедуры = "ПриСозданииНаСервере" Тогда
			ВставитьКодВПроцедуруМодуля(ТекстМодуля, Модуль.ИмяПроцедуры,
				ШаблонПроцедуры_ПриСозданииНаСервере(), Модуль.ТекстДляВставки, "УправлениеПечатью.ПриСозданииНаСервере");
		ИначеЕсли Модуль.ИмяПроцедуры = "Подключаемый_ВыполнитьКомандуПечати" Тогда
			ВставитьПроцедуруВМодуль(ТекстМодуля, Модуль.ИмяПроцедуры, Модуль.ТекстДляВставки);
		ИначеЕсли Модуль.ИмяПроцедуры = "ПередДобавлениемКомандПечати" Тогда
			ВставитьКодВПроцедуруМодуля(ТекстМодуля, Модуль.ИмяПроцедуры,
				ШаблонПроцедуры_ПередДобавлениемКомандПечати(), Модуль.ТекстДляВставки);
		КонецЕсли;
		
		Модуль.ВставкаВыполнена = Истина;
	КонецЦикла;
	
	Для Каждого ТекстМодуля Из ТекстыМодулей Цикл
		ТекстМодуля.Значение.Записать(ТекстМодуля.Ключ);
	КонецЦикла;
КонецПроцедуры

// Вставляет код в конец процедуры. Если такой процедуры нет, создает ее в начале модуля.
&НаКлиенте
Процедура ВставитьКодВПроцедуруМодуля(ТекстМодуля, ИмяПроцедуры, ШаблонПроцедуры, Знач ТекстДляВставки, Знач ТекстДляПроверки = "")
	ПроцедураНайдена = Ложь;
	ТекстДляПоиска = "Процедура " + ИмяПроцедуры;
	ТекстПроцедуры = Новый ТекстовыйДокумент;
	Если СтрНайти(ТекстМодуля.ПолучитьТекст(), ТекстДляПоиска) > 0 Тогда
		Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
			Строка = СокрЛ(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
			Если СтрНачинаетсяС(Строка, ТекстДляПоиска) Тогда
				Если Не ПроцедураНайдена Тогда
					ПроцедураНайдена = Истина;
					ТекстДляПоиска = "КонецПроцедуры";
					Продолжить;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			Если ПроцедураНайдена Тогда
				ТекстПроцедуры.ДобавитьСтроку(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстДляПроверки) Тогда
		ТекстДляПроверки = ТекстДляВставки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстДляПроверки) Тогда
		Если СтрНайти(ТекстПроцедуры.ПолучитьТекст(), ТекстДляПроверки) > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВозможноеМестоВставки = НомерСтроки;
	
	Если Не ПроцедураНайдена Тогда
		ТекстДляВставки = Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПроцедуры, ТекстДляВставки);
			
		НомерСтроки = 1;
		
		ВозможноеМестоВставки = 1;
		Для НомерСтроки = 1 По ТекстМодуля.КоличествоСтрок() Цикл
			Строка = СокрЛП(ТекстМодуля.ПолучитьСтроку(НомерСтроки));
			Если СтрНачинаетсяС(Строка, "#Если") Или СтрНачинаетсяС(Строка, "Перем") Тогда
				ВозможноеМестоВставки = НомерСтроки + 1;
			ИначеЕсли СтрНачинаетсяС(Строка, "&") Или СтрНачинаетсяС(Строка, "Процедура") Или СтрНачинаетсяС(Строка, "Функция") Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ТекстМодуля.ВставитьСтроку(ВозможноеМестоВставки, ТекстДляВставки + Символы.ПС);
КонецПроцедуры

// Вставляет процедуру в конец модуля, если такой процедуры в модуле нет.
&НаКлиенте
Процедура ВставитьПроцедуруВМодуль(ТекстМодуля, ИмяПроцедуры, Знач ТекстДляВставки)
	ТекстДляПоиска = "Процедура " + ИмяПроцедуры;
	Если СтрНайти(ТекстМодуля.ПолучитьТекст(), ТекстДляПоиска) > 0 Тогда
		Возврат;
	КонецЕсли;

	ВозможноеМестоВставки = 1;
	Для НомерСтроки = -ТекстМодуля.КоличествоСтрок() По -1 Цикл
		Строка = СокрЛП(ТекстМодуля.ПолучитьСтроку(-НомерСтроки));
		Если СтрНачинаетсяС(Строка, "КонецПроцедуры") Или СтрНачинаетсяС(Строка, "КонецФункции") Или СтрНачинаетсяС(Строка, "Перем") Тогда
			ВозможноеМестоВставки = -НомерСтроки + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекстМодуля.ВставитьСтроку(ВозможноеМестоВставки, Символы.ПС + ТекстДляВставки + Символы.ПС);
КонецПроцедуры

// анализ объекта

&НаСервере
Функция ОсновнаяФормаОбъекта(ПолноеИмяОбъектаМетаданных)
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	Возврат ОбъектМетаданных.ОсновнаяФормаОбъекта;
КонецФункции

&НаСервере
Функция ПутьКФайлуМодуляМенеджера(ПолноеИмяОбъектаМетаданных)
	
	ШаблонИмениФайла = "%1\%2.МодульМенеджера.txt";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяПапки, ПолноеИмяОбъектаМетаданных);
	
КонецФункции

&НаСервере
Функция ПутьКФайлуМодуляФормы(ПолноеИмяФормы)
	
	ШаблонИмениФайла = "%1\%2.Форма.Модуль.txt";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяПапки, ПолноеИмяФормы)
	
КонецФункции

&НаСервере
Функция ПутьКФайлуОбщегоМодуля(ПолноеИмяМодуля)
	
	ШаблонИмениФайла = "%1\%2.Модуль.txt";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяПапки, ПолноеИмяМодуля)
	
КонецФункции

&НаСервере
Функция ИмяОбъекта(ПолноеИмяОбъектаМетаданных)
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	Возврат ОбъектМетаданных.Имя;
КонецФункции

&НаКлиенте
Функция ПрочитатьТекстыМодулей(Коллекция = Неопределено)
	Если Коллекция = Неопределено Тогда
		Коллекция = СтруктураКонфигурации;
	КонецЕсли;
	Для Каждого ОписаниеОбъектаМетаданных Из Коллекция.ПолучитьЭлементы() Цикл
		Если Не ПустаяСтрока(ОписаниеОбъектаМетаданных.ПутьКФайлу) Тогда
			Файл = Новый Файл(ОписаниеОбъектаМетаданных.ПутьКФайлу);
			Если Файл.Существует() Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ОписаниеОбъектаМетаданных.ПутьКФайлу);
				ОписаниеОбъектаМетаданных.Модуль = ТекстовыйДокумент.ПолучитьТекст();
			КонецЕсли;
		КонецЕсли;
		ПрочитатьТекстыМодулей(ОписаниеОбъектаМетаданных);
	КонецЦикла;
КонецФункции

// Подготовка текстов для вставки.

&НаКлиенте
Процедура СформироватьКодДляВставкиВМенеджерыПечати(Коллекция = Неопределено)
	Если Коллекция = Неопределено Тогда
		Коллекция = СтруктураКонфигурации;
	КонецЕсли;
	Для Каждого ОписаниеОбъектаМетаданных Из Коллекция.ПолучитьЭлементы() Цикл
		СформироватьКодДляВставкиВМенеджерыПечати(ОписаниеОбъектаМетаданных);
		Если ОписаниеОбъектаМетаданных.ЭтоКоманда И Не ПустаяСтрока(ОписаниеОбъектаМетаданных.Модуль) Тогда
			ОписаниеОбъектаМетаданных.КодДляРазмещенияВМенеджерПечати = КодДляМенеджераПечати(ОписаниеОбъектаМетаданных);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТекстыДляВставки()
	ОбрабатываемыеМодули.Очистить();
	
	Для Каждого Элемент Из ТекстыКомандДляВставки() Цикл
		ПолноеИмяОбъектаМетаданных = Элемент.Ключ;
		КоллекцияТекстов = Элемент.Значение;
		
		Для Каждого ТекстКоманды Из КоллекцияТекстов Цикл
			ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
			ОбрабатываемыйМодуль.ПолноеИмя = ПолноеИмяОбъектаМетаданных;
			ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуМодуляМенеджера(ПолноеИмяОбъектаМетаданных);
			ОбрабатываемыйМодуль.ИмяПроцедуры = "ДобавитьКомандыПечати";
			ОбрабатываемыйМодуль.ТекстДляВставки = ТекстКоманды;
		КонецЦикла;
		
		Попытка
			ФормаОбъекта = ОсновнаяФормаОбъекта(ПолноеИмяОбъектаМетаданных);
		Исключение
			ФормаОбъекта = Неопределено;
		КонецПопытки;
		
		ФормыОбъекта = ФормыСГруппойКомандПечать.НайтиСтроки(Новый Структура("ИмяОбъекта", ПолноеИмяОбъектаМетаданных));
		Для Каждого ОписаниеФормы Из ФормыОбъекта Цикл
			ПутьКФайлуМодуляФормы = ПутьКФайлуМодуляФормы(ОписаниеФормы.ИмяФормы);
			
			ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
			ОбрабатываемыйМодуль.ПолноеИмя = ОписаниеФормы.ИмяФормы;
			ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуМодуляФормы;
			ОбрабатываемыйМодуль.ИмяПроцедуры = "ПриСозданииНаСервере";
			ОбрабатываемыйМодуль.ТекстДляВставки = ТекстДляВставкиВПроцедуру_ПриСозданииНаСервере(ОписаниеФормы.ИмяЭлемента);
			
			ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
			ОбрабатываемыйМодуль.ПолноеИмя = ОписаниеФормы.ИмяФормы;
			ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуМодуляФормы;
			ОбрабатываемыйМодуль.ИмяПроцедуры = "Подключаемый_ВыполнитьКомандуПечати";
			
			ТекстДляВставки = ТекстДляВставкиВМодульФормыСписка();
			Если ФормаОбъекта <> Неопределено И ОписаниеФормы.ИмяФормы = ФормаОбъекта.ПолноеИмя() Тогда
				ТекстДляВставки = ТекстДляВставкиВМодульФормыОбъекта();
			КонецЕсли;
			ОбрабатываемыйМодуль.ТекстДляВставки = ТекстДляВставки;
			
			ОписаниеФормы.Обработано = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОписаниеФормы Из ФормыСГруппойКомандПечать Цикл
		Если Не ОписаниеФормы.Обработано Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеФормы.ИмяОбъекта);
			ЭтоОбщаяФорма = Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных);
			Попытка
				ФормаОбъекта = ОсновнаяФормаОбъекта(ПолноеИмяОбъектаМетаданных);
			Исключение
				ФормаОбъекта = Неопределено;
			КонецПопытки;
			ПутьКФайлуМодуляФормы = ПутьКФайлуМодуляФормы(ОписаниеФормы.ИмяФормы);
			
			ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
			ОбрабатываемыйМодуль.ПолноеИмя = ОписаниеФормы.ИмяФормы;
			ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуМодуляФормы;
			ОбрабатываемыйМодуль.ИмяПроцедуры = "ПриСозданииНаСервере";
			ОбрабатываемыйМодуль.ТекстДляВставки = ТекстДляВставкиВПроцедуру_ПриСозданииНаСервере(ОписаниеФормы.ИмяЭлемента);
			
			ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
			ОбрабатываемыйМодуль.ПолноеИмя = ОписаниеФормы.ИмяФормы;
			ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуМодуляФормы;
			ОбрабатываемыйМодуль.ИмяПроцедуры = "Подключаемый_ВыполнитьКомандуПечати";
			
			ТекстДляВставки = ТекстДляВставкиВМодульФормыСписка();
			Если Не ЭтоОбщаяФорма И ФормаОбъекта <> Неопределено И ОписаниеФормы.ИмяФормы = ФормаОбъекта.ПолноеИмя() Тогда
				ТекстДляВставки = ТекстДляВставкиВМодульФормыОбъекта();
			КонецЕсли;
			ОбрабатываемыйМодуль.ТекстДляВставки = ТекстДляВставки;
			
			Если ЭтоОбщаяФорма Тогда
				ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
				ОбрабатываемыйМодуль.ПолноеИмя = "ОбщийМодуль.УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати";
				ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуОбщегоМодуля("ОбщийМодуль.УправлениеПечатьюПереопределяемый");
				ОбрабатываемыйМодуль.ИмяПроцедуры = "ПередДобавлениемКомандПечати";
				ОбрабатываемыйМодуль.ТекстДляВставки = Пояснение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Символы.Таб + НСтр("ru = 'Заполнить для формы ""%1""'"), ОписаниеФормы.ИмяФормы));
			Иначе
				ОбрабатываемыйМодуль = ОбрабатываемыеМодули.Добавить();
				ОбрабатываемыйМодуль.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
				ОбрабатываемыйМодуль.ПутьКФайлу = ПутьКФайлуМодуляМенеджера(ОбъектМетаданных.ПолноеИмя());
				ОбрабатываемыйМодуль.ИмяПроцедуры = "ДобавитьКомандыПечати";
				ОбрабатываемыйМодуль.ТекстДляВставки = "";
			КонецЕсли;
			
			ОписаниеФормы.Обработано = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 0 По ОбрабатываемыеМодули.Количество()-1 Цикл
		ОбрабатываемыеМодули[НомерСтроки].Порядок = НомерСтроки;
	КонецЦикла;
	
	ОбрабатываемыеМодули.Сортировать("ПолноеИмя,Порядок");
	
КонецПроцедуры

&НаСервере
Функция ТекстыКомандДляВставки(Коллекция = Неопределено, Знач Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли;
	
	Если Коллекция = Неопределено Тогда
		Коллекция = СтруктураКонфигурации;
	КонецЕсли;
	
	Для Каждого ОписаниеОбъектаМетаданных Из Коллекция.ПолучитьЭлементы() Цикл
		Если ОписаниеОбъектаМетаданных.ЭтоКоманда Тогда
			Команда = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных.ПолноеИмя);
			
			СтрокаУсловийФО = "";
			СписокФункциональныхОпцийДляПроверки = СвязанныеСОбъектомФункциональныеОпции(Команда);
			Для Каждого Опция Из СписокФункциональныхОпцийДляПроверки Цикл
				СтрокаУсловийФО = СтрокаУсловийФО + ?(ПустаяСтрока(СтрокаУсловийФО), "", " И ")
					+ "ПолучитьФункциональнуюОпцию(""" + Опция + """)";
			КонецЦикла;
			
			Для Каждого Тип Из ОписаниеОбъектаМетаданных.ТипПараметраКоманды.Типы() Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				КодДляРазмещения = СтрЗаменить(ОписаниеОбъектаМетаданных.КодДляРазмещенияВМенеджерПечати, "КомандаПечати.МенеджерПечати = """ + ОбъектМетаданных.ПолноеИмя() + """;" + Символы.ПС + Символы.Таб, "");
				
				СтрокаУсловийПоРолям = "";
				СписокРолейДляПроверки = СтрСоединить(СписокРолейДляПроверки(Команда, ОбъектМетаданных), ",");
				Если Не ПустаяСтрока(СписокРолейДляПроверки) Тогда
					СтрокаУсловийПоРолям = "Пользователи.РолиДоступны(""" + СписокРолейДляПроверки + """)";
				КонецЕсли;
				
				СтрокаУсловий = СтрокаУсловийПоРолям;
				Если Не ПустаяСтрока(СтрокаУсловийФО) Тогда
					СтрокаУсловий = СтрокаУсловий + ?(ПустаяСтрока(СтрокаУсловий), "", " И ") + СтрокаУсловийФО;
				КонецЕсли;
				СтрокаУсловий = СтрЗаменить(СтрокаУсловий, " И ", Символы.ПС + Символы.Таб + Символы.Таб + " И ");
				Если Не ПустаяСтрока(СтрокаУсловий) Тогда
					КодДляРазмещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомандыСОграничениемВидимостиПоУсловию(), СтрокаУсловий,
						СтрЗаменить(КодДляРазмещения, Символы.ПС, Символы.ПС + Символы.Таб));
				КонецЕсли;
				
				ТекстыДляВставки = Результат[ОбъектМетаданных.ПолноеИмя()];
				Если ТекстыДляВставки = Неопределено Тогда
					ТекстыДляВставки = Новый Массив;
					Результат.Вставить(ОбъектМетаданных.ПолноеИмя(), ТекстыДляВставки);
				КонецЕсли;
				ТекстыДляВставки.Добавить(КодДляРазмещения);
				
			КонецЦикла;
		КонецЕсли;
		Результат = ТекстыКомандДляВставки(ОписаниеОбъектаМетаданных, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// шаблоны

&НаСервере
Функция ШаблонКомандыСОграничениемВидимостиПоУсловию()
	Возврат
		"	Если %1 Тогда
		|	%2
		|	КонецЕсли;";
КонецФункции

&НаКлиенте
Функция ШаблонПроцедуры_ДобавитьКомандыПечати(БезКоманд = Ложь)
	Возврат
		"// Заполняет список команд печати.
		|// 
		|// Параметры:
		|//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
		|//
		|Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		|
		|"+ ?(БезКоманд, "", "%1") + "
		|
		|КонецПроцедуры";
КонецФункции

&НаКлиенте
Функция ШаблонПроцедуры_ПриСозданииНаСервере()
	Возврат
		Пояснение("подключить обработчик к форме") + "
		|&НаСервере
		|Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		|%1
		|КонецПроцедуры";
КонецФункции

&НаКлиенте
Функция ШаблонПроцедуры_ПередДобавлениемКомандПечати()
	Возврат
		"// Переопределяет список команд печати формы.
		|Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
		|%1
		|КонецПроцедуры";
КонецФункции
	
&НаСервере
Функция ТекстДляВставкиВПроцедуру_ПриСозданииНаСервере(ИмяГруппыКоманд)
	ШаблонТекста = 
		"	// СтандартныеПодсистемы.Печать
		|	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект%1);
		|	// Конец СтандартныеПодсистемы.Печать";
		
	Текст = "";
	Если Не ПустаяСтрока(ИмяГруппыКоманд) И ИмяГруппыКоманд <> "ФормаКоманднаяПанель" Тогда
		Текст = ", Элементы." + ИмяГруппыКоманд;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Текст);
КонецФункции

&НаСервере
Функция ТекстДляВставкиВМодульФормыСписка()
	Возврат
		"// СтандартныеПодсистемы.Печать
		|&НаКлиенте
		|Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
		|	
		|	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
		|	
		|КонецПроцедуры
		|// Конец СтандартныеПодсистемы.Печать";
КонецФункции

&НаСервере
Функция ТекстДляВставкиВМодульФормыОбъекта()
	Возврат
		"// СтандартныеПодсистемы.Печать
		|&НаКлиенте
		|Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
		|	
		|	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
		|	
		|КонецПроцедуры
		|// Конец СтандартныеПодсистемы.Печать";
КонецФункции

&НаКлиенте
Функция ШаблонИмениМодуляФормы()
	Возврат "*.Форма.Модуль.txt";
КонецФункции

// Выгрузка и загрузка модулей.

&НаКлиенте
Процедура ЗапроситьУчетныеДанные(ОбработчикЗавершения)
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапроситьУчетныеДанныеВведеноИмяПользователя", ЭтотОбъект, ОбработчикЗавершения);
	ПоказатьВводСтроки(ОписаниеОповещения, ИмяПользователя, НСтр("ru = 'Имя пользователя'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьУчетныеДанныеВведеноИмяПользователя(ВведенноеИмя, ОбработчикЗавершения) Экспорт
	Если ВведенноеИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПользователя = ВведенноеИмя;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапроситьУчетныеДанныеВведенПароль", ЭтотОбъект, ОбработчикЗавершения);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, НСтр("ru = 'Пароль'"));
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьУчетныеДанныеВведенПароль(ВведенныйПароль, ОбработчикЗавершения) Экспорт
	Если ВведенныйПароль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пароль = ВведенныйПароль;
	
	ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьТекстыМодулей()
	Перем РезультатВыполненияКоманды;
	
#Если Не ВебКлиент Тогда
	
	Состояние(НСтр("ru = 'Выгрузка текстов модулей...'"));
	
	ИмяПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяПапки);
	
	ШаблонКоманды = """[КаталогПрограммы]\1cv8.exe"" DESIGNER /DisableStartupMessages "
		+ " /IBConnectionString ""[СтрокаСоединения]"""
		+ " /N ""[ИмяПользователя]"""
		+ " /P ""[Пароль]"""
		+ " /DumpConfigFiles ""[ИмяПапки]"""
		+ " -Module";
		
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("КаталогПрограммы", КаталогПрограммы());
	ПараметрыКоманды.Вставить("СтрокаСоединения", СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """"""));
	ПараметрыКоманды.Вставить("ИмяПользователя", ИмяПользователя);
	ПараметрыКоманды.Вставить("Пароль", Пароль);
	ПараметрыКоманды.Вставить("ИмяПапки", ИмяПапки);
	
	СтрокаКоманды = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКоманды, ПараметрыКоманды);
	
	ЗапуститьПриложение(СтрокаКоманды, , Истина, РезультатВыполненияКоманды);
	
	Возврат РезультатВыполненияКоманды = 0;
#КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьТекстыМодулей()
	Перем РезультатВыполненияКоманды;
	
#Если Не ВебКлиент Тогда
	
	Состояние(НСтр("ru = 'Загрузка текстов модулей...'"));
	
	ШаблонКоманды = """[КаталогПрограммы]\1cv8.exe"" DESIGNER /DisableStartupMessages "
		+ " /IBConnectionString ""[СтрокаСоединения]"""
		+ " /N ""[ИмяПользователя]"""
		+ " /P ""[Пароль]"""
		+ " /LoadConfigFiles ""[ИмяПапки]"""
		+ " -Module -AllWritable";
		
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("КаталогПрограммы", КаталогПрограммы());
	ПараметрыКоманды.Вставить("СтрокаСоединения", СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """"""));
	ПараметрыКоманды.Вставить("ИмяПользователя", ИмяПользователя);
	ПараметрыКоманды.Вставить("Пароль", Пароль);
	ПараметрыКоманды.Вставить("ИмяПапки", ИмяПапки);
	
	СтрокаКоманды = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКоманды, ПараметрыКоманды);
	
	ЗапуститьПриложение(СтрокаКоманды, , Истина, РезультатВыполненияКоманды);
	
	Возврат РезультатВыполненияКоманды = 0;
#КонецЕсли

КонецФункции

// Поиск команд печати в метаданных.

&НаСервере
Процедура ЗагрузитьСтруктуруКонфигурации()
	
	ДеревоМетаданных = РеквизитФормыВЗначение("СтруктураКонфигурации");
	ДеревоМетаданных.Строки.Очистить();
	
	КоллекцииОбъектовДляЗагрузки = Новый Массив;
	КоллекцииОбъектовДляЗагрузки.Добавить("Общие.ОбщиеКоманды");
	КоллекцииОбъектовДляЗагрузки.Добавить("Справочники");
	КоллекцииОбъектовДляЗагрузки.Добавить("Документы");
	КоллекцииОбъектовДляЗагрузки.Добавить("Обработки");
	КоллекцииОбъектовДляЗагрузки.Добавить("РегистрыСведений");
	
	КартинкиКонфигурации = КоллекцияКартинок();
	
	Для Каждого Коллекция Из КоллекцииОбъектовДляЗагрузки Цикл
		ЗагрузитьКоллекциюВДеревоОбъектовМетаданных(Коллекция, ДеревоМетаданных);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоМетаданных, "СтруктураКонфигурации");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКоллекциюВДеревоОбъектовМетаданных(ПолноеИмяКоллекцииМетаданных, ДеревоОбъектов)
	
	ЧастиИмени = СтрРазделить(ПолноеИмяКоллекцииМетаданных, ".", Ложь);
	ТекущийУровеньДерева = ДеревоОбъектов;
	Для Каждого ЧастьИмени Из ЧастиИмени Цикл
		ОписаниеОбъектаМетаданных = ТекущийУровеньДерева.Строки.Найти(ЧастьИмени, "Имя");
		Если ОписаниеОбъектаМетаданных = Неопределено Тогда
			ОписаниеОбъектаМетаданных = ТекущийУровеньДерева.Строки.Добавить();
			ОписаниеОбъектаМетаданных.Имя = ЧастьИмени;
		КонецЕсли;
		ТекущийУровеньДерева = ОписаниеОбъектаМетаданных;
	КонецЦикла;
	ИмяКоллекции = ЧастьИмени;
	
	КоллекцияОбъектовМетаданных = Метаданные[ИмяКоллекции];
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		Если ЭтоОбщаяКоманда(ОбъектМетаданных) Тогда
			Если ЭтоКомандаПечати(ОбъектМетаданных) Тогда
				ОписаниеОбъектаМетаданных = ТекущийУровеньДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеОбъектаМетаданных, ОбъектМетаданных,,"Картинка");
				ШаблонИмениФайла = "%1\ОбщаяКоманда.%2.МодульКоманды.txt";
				ОписаниеОбъектаМетаданных.ПутьКФайлу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяПапки, ОбъектМетаданных.Имя);
				ОписаниеОбъектаМетаданных.Картинка = ПутьККартинке(ОбъектМетаданных.Картинка);
				// Общие команды не обрабатываем. перенос выполнять вручную.
			КонецЕсли;
		Иначе
			КомандыПечати = КомандыПечатиОбъектаМетаданных(ОбъектМетаданных);
			Если КомандыПечати.Количество() > 0 Тогда
				ОписаниеОбъектаМетаданных = ТекущийУровеньДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеОбъектаМетаданных, ОбъектМетаданных);
				ОписаниеОбъектаМетаданных.ЭтоМенеджерПечати = Истина;
				ДобавитьКомандыОбъекта(КомандыПечати, ОписаниеОбъектаМетаданных);
				Для Каждого ОписаниеКоманды Из ОписаниеОбъектаМетаданных.Строки Цикл
					ШаблонИмениФайла = "%1\%2.Команда.%3.МодульКоманды.txt";
					ОписаниеКоманды.ПутьКФайлу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяПапки, ОбъектМетаданных.ПолноеИмя(), ОписаниеКоманды.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийУровеньДерева <> ДеревоОбъектов И ТекущийУровеньДерева.Строки.Количество() = 0 Тогда
		ДеревоОбъектов.Строки.Удалить(ТекущийУровеньДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КомандыПечатиОбъектаМетаданных(ОбъектМетаданных)
	Результат = Новый Массив;
	Для Каждого Команда Из ОбъектМетаданных.Команды Цикл
		Если ЭтоКомандаПечати(Команда) Тогда
			Результат.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДобавитьКомандыОбъекта(КомандыОбъекта, ТекущийУровеньДерева)
	Для Каждого Команда Из КомандыОбъекта Цикл
		ОписаниеОбъектаМетаданных = ТекущийУровеньДерева.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеОбъектаМетаданных, Команда,,"Картинка");
		ОписаниеОбъектаМетаданных.Картинка = ПутьККартинке(Команда.Картинка);
		ОписаниеОбъектаМетаданных.ЭтоКоманда = Истина;
		ОписаниеОбъектаМетаданных.ПолноеИмя = Команда.ПолноеИмя();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЭтоОбщаяКоманда(ОбъектМетаданных)
	Возврат Метаданные.ОбщиеКоманды.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных;
КонецФункции

&НаСервере
Функция ЭтоКомандаПечати(ОбъектМетаданныхКоманда)
	Возврат ОбъектМетаданныхКоманда.Группа.Получить() = Метаданные.ГруппыКоманд.Печать;
КонецФункции

// Формирование текста команды.

&НаКлиенте
Функция КодДляМенеджераПечати(ОписаниеКоманды)
	
	КомандаПечати = Новый Структура;
	
	ДобавитьОсновныеПараметрыКоманды(КомандаПечати, ОписаниеКоманды.Модуль, ОписаниеКоманды.ПолноеИмя);
	КомандаПечати.Вставить("Представление", ОбернутьВНСтр(ОписаниеКоманды.Синоним));
	Если ЗначениеЗаполнено(ОписаниеКоманды.Картинка) Тогда
		КомандаПечати.Вставить("Картинка", ОписаниеКоманды.Картинка);
	КонецЕсли;
	
	ДобавитьОпциюПроверкиПроведения(КомандаПечати, ОписаниеКоманды.Модуль);
	ДобавитьНеобязательныеПараметры(КомандаПечати, ОписаниеКоманды.Модуль);
	ДобавитьДополнительныеПараметры(КомандаПечати, ОписаниеКоманды.Модуль);
	
	Возврат ТекстКомандыИзСтруктуры(КомандаПечати, ОписаниеКоманды.Синоним);

КонецФункции

&НаКлиенте
Функция ТекстКомандыИзСтруктуры(КомандаПечати, Комментарий)
	
	Результат = "";
	
	Если КомандаПечати.Количество() > 0 Тогда
		Результат = Символы.Таб + "// " + Комментарий + Символы.ПС;
		Результат = Результат + Символы.Таб + "КомандаПечати = КомандыПечати.Добавить();";
		ШаблонПараметра = Символы.ПС + Символы.Таб + "КомандаПечати.%1 = %2;";
		ШаблонДополнительногоПараметра = Символы.ПС + Символы.Таб + "КомандаПечати.ДополнительныеПараметры.Вставить(""%1"", %2);";
		
		Для Каждого Параметр Из КомандаПечати Цикл
			Если Параметр.Ключ = "ДополнительныеПараметры" Тогда
				Для Каждого ДополнительныйПараметр Из Параметр.Значение Цикл
					Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДополнительногоПараметра,
						ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
				КонецЦикла;
			Иначе
				Результат = Результат + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПараметра, Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбернутьВНСтр(Знач Строка)
	Возврат "НСтр(""ru = '" + Строка + "'"")";
КонецФункции

// анализ текста команды

&НаКлиенте
Процедура ДобавитьОсновныеПараметрыКоманды(КомандаПечати, Знач Строка, МестоположениеИсходногоКода)
	
	СразуНаПринтер = Ложь;
	
	ТекстДляПоиска = "УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(";
	Позиция = СтрНайти(Строка, ТекстДляПоиска);
	Если Позиция = 0 Тогда
		ТекстДляПоиска = "УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(";
		Позиция = СтрНайти(Строка, ТекстДляПоиска);
		Если Позиция = 0 Тогда
			КомандаПечати.Вставить("Обработчик", """""; " + Пояснение("см. " + МестоположениеИсходногоКода));
			КомандаПечати.Вставить("МенеджерПечати", """""; " + Пояснение());
			КомандаПечати.Вставить("Идентификатор", """""; " + Пояснение());
			Возврат;
		Иначе
			СразуНаПринтер = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Строка = Сред(Строка, Позиция + СтрДлина(ТекстДляПоиска));
	
	ЗначенияПараметров = Новый Массив(2);
	НомерПараметра = 1;
	ЗначениеПараметра = "";
	
	ЭтоСтрока = Ложь;
	Позиция = 1;
	
	Пока Позиция <= СтрДлина(Строка) Цикл
		ТекущийСимвол = Сред(Строка, Позиция, 1);
		
		Если ТекущийСимвол = """" Тогда
			ЭтоСтрока = Не ЭтоСтрока;
		ИначеЕсли ЭтоСтрока Тогда
			ЗначениеПараметра = ЗначениеПараметра + ТекущийСимвол;
		КонецЕсли;
		
		Если Не ЭтоСтрока И (ТекущийСимвол = ")" Или ТекущийСимвол = ",") Тогда
			ЗначенияПараметров[НомерПараметра - 1] = СокрЛП(ЗначениеПараметра);
			ЗначениеПараметра = "";
			НомерПараметра = НомерПараметра + 1;
		КонецЕсли;
		
		Если НомерПараметра > ЗначенияПараметров.Количество() Или ТекущийСимвол = ")" Тогда
			Прервать;
		КонецЕсли;
		
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ЗначенияПараметров[0]) И Не ПустаяСтрока(ЗначенияПараметров[1]) Тогда
		КомандаПечати.Вставить("МенеджерПечати", """" + ЗначенияПараметров[0] + """");
		КомандаПечати.Вставить("Идентификатор", """" + ЗначенияПараметров[1] + """");
		Если СразуНаПринтер Тогда
			КомандаПечати.Вставить("СразуНаПринтер", Формат(СразуНаПринтер, "БЛ=Ложь; БИ=Истина"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОпциюПроверкиПроведения(КомандаПечати, Знач ИсходнаяСтрока)
	
	ТекстДляПоиска = "УправлениеПечатьюКлиент.ПроверитьДокументыПроведены";
	Позиция = СтрНайти(ИсходнаяСтрока, ТекстДляПоиска);
	Если Позиция > 0 Тогда
		КомандаПечати.Вставить("ПроверкаПроведенияПередПечатью", "Истина");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНеобязательныеПараметры(КомандаПечати, Знач ИсходнаяСтрока)
	
	ИменаПараметров = Новый Массив;
	ИменаПараметров.Добавить("ФорматСохранения");
	ИменаПараметров.Добавить("ЗаголовокФормы");
	ИменаПараметров.Добавить("ПереопределитьПользовательскиеНастройкиКоличества");
	ИменаПараметров.Добавить("ДополнитьКомплектВнешнимиПечатнымиФормами");
	ИменаПараметров.Добавить("ФиксированныйКомплект");
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		ЗначениеПараметра = Неопределено;
		Если ЗначениеПараметраКоманды(ИсходнаяСтрока, ИмяПараметра, ЗначениеПараметра) Тогда
			КомандаПечати.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныеПараметры(КомандаПечати, Знач ИсходнаяСтрока)
	
	ДополнительныеПараметры = Новый Структура;
	
	ИменаПараметров = Новый Массив;
	ИменаПараметров.Добавить("ОтображатьСкидки"); // УП2
	ИменаПараметров.Добавить("Тип"); // УП2
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		ЗначениеПараметра = Неопределено;
		Если ЗначениеПараметраКоманды(ИсходнаяСтрока, ИмяПараметра, ЗначениеПараметра) Тогда
			ДополнительныеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	// ДатаСведений // УП2
	ИмяПараметра = "ДатаСведений";
	ЗначениеПараметра = Неопределено;
	Если ЗначениеПараметраКоманды(ИсходнаяСтрока, ИмяПараметра, ЗначениеПараметра) Тогда
		ДополнительныеПараметры.Вставить(ИмяПараметра, "Неопределено); " + Пояснение(СтрЗаменить(ЗначениеПараметра, Символы.ПС, "") + " //"));
	КонецЕсли;
	
	КомандаПечати.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПараметраКоманды(Знач ИсходнаяСтрока, ИмяПараметра, ЗначениеПараметра)
	
	ШаблонДляПоиска = ".Вставить(""%1"",";
	ТекстДляПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДляПоиска, ИмяПараметра);
	
	Позиция = СтрНайти(ИсходнаяСтрока, ТекстДляПоиска);
	Если Позиция = 0 Тогда
		ШаблонДляПоиска = "Структура(""%1"",";
		ТекстДляПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДляПоиска, ИмяПараметра);
		Позиция = СтрНайти(ИсходнаяСтрока, ТекстДляПоиска);
	КонецЕсли;
	
	Если Позиция = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = Сред(ИсходнаяСтрока, Позиция + СтрДлина(ТекстДляПоиска));
	
	ОткрытоСкобок = 1;
	ЭтоСтрока = Ложь;
	
	Позиция = 0;
	Пока Позиция < СтрДлина(Строка) Цикл
		Позиция = Позиция + 1;
		ТекущийСимвол = Сред(Строка, Позиция, 1);
		
		Если ТекущийСимвол = """" Тогда
			ЭтоСтрока = Не ЭтоСтрока;
		КонецЕсли;
		
		Если Не ЭтоСтрока И ТекущийСимвол = "(" Тогда
			ОткрытоСкобок = ОткрытоСкобок + 1;
		КонецЕсли;
		
		Если Не ЭтоСтрока И ТекущийСимвол = ")" Тогда
			ОткрытоСкобок = ОткрытоСкобок - 1;
		КонецЕсли;
		
		Если ОткрытоСкобок = 0 Тогда
			ЗначениеПараметра = СокрЛП(Лев(Строка, Позиция - 1));
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

// поиск картинок

&НаСервере
Функция КоллекцияКартинок()
	Результат = Новый Соответствие;
	
	// картинки конфигурации
	Для Каждого Картинка Из Метаданные.ОбщиеКартинки Цикл
		ИмяКартинки = Картинка.Имя;
		Результат.Вставить(XMLСтрока(БиблиотекаКартинок[ИмяКартинки].ПолучитьДвоичныеДанные()), ИмяКартинки);
	КонецЦикла;
	
	// картинки платформы
	Результат.Вставить(XMLСтрока(БиблиотекаКартинок.Печать.ПолучитьДвоичныеДанные()), "Печать");
	Результат.Вставить(XMLСтрока(БиблиотекаКартинок.ПечатьСразу.ПолучитьДвоичныеДанные()), "ПечатьСразу");

	Возврат Результат;
КонецФункции

&НаСервере
Функция ПутьККартинке(Картинка);
	Результат = "";
	Если Картинка.Вид <> ВидКартинки.Пустая Тогда
		ИмяКартинки = КартинкиКонфигурации[XMLСтрока(Картинка.ПолучитьДвоичныеДанные())];
		Если ИмяКартинки <> Неопределено Тогда
			Результат = "БиблиотекаКартинок." + ИмяКартинки;
		Иначе
			Результат = "Неопределено; " + Пояснение("БиблиотекаКартинок.???");
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Проверка ролей и функциональных опций.

&НаСервере
Функция СвязанныеСОбъектомРоли(ОбъектМетаданных)
	Результат = Новый Массив;
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если ПравоДоступа("Просмотр", ОбъектМетаданных, Роль) Тогда
			Результат.Добавить(Роль.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция СписокРолейДляПроверки(ОбъектМетаданныхКоманда, ОбъектМетаданныхВладелецКоманды)
	РолиОбъекта = СвязанныеСОбъектомРоли(ОбъектМетаданныхВладелецКоманды);
	РолиКоманды = СвязанныеСОбъектомРоли(ОбъектМетаданныхКоманда);
	
	ЕстьОтличия = Ложь;
	Для Каждого РольКоманды Из РолиКоманды Цикл
		Если РолиОбъекта.Найти(РольКоманды) = Неопределено Тогда
			ЕстьОтличия = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОтличия Тогда
		ЕстьОтличия = РолиКоманды.Количество() <> РолиОбъекта.Количество();
	КонецЕсли;
	
	Результат = Новый Массив;
	Если ЕстьОтличия Тогда
		Результат = РолиКоманды;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СвязанныеСОбъектомФункциональныеОпции(ОбъектМетаданных)
	Результат = Новый Массив;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Если ФункциональнаяОпция.Состав.Содержит(ОбъектМетаданных) Тогда
			Результат.Добавить(ФункциональнаяОпция.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// проверка форм

&НаКлиенте
Функция СписокФормСВнедрением()
	Результат = Новый Массив;
	
	Если ПустаяСтрока(ИмяПапки) И Не ВыгрузитьТекстыМодулей() Тогда
		ПоказатьПредупреждение(, ТекстНеУдалосьВыгрузитьМодули());
		Возврат Результат;
	КонецЕсли;
	
	НомерФайла = 1;
	ФайлыМодулейФорм = НайтиФайлы(ИмяПапки, ШаблонИмениМодуляФормы());
	Для Каждого ФайлМодуляФормы Из ФайлыМодулейФорм Цикл
		Состояние(НСтр("ru = 'Поиск форм с внедрением подсистемы Печать...'"),100*НомерФайла/ФайлыМодулейФорм.Количество(), ФайлМодуляФормы.ИмяБезРасширения);
		НомерФайла = НомерФайла + 1;
		
		ТекстМодуля = Новый ТекстовыйДокумент;
		ТекстМодуля.Прочитать(ФайлМодуляФормы.ПолноеИмя);
		Строка = ТекстМодуля.ПолучитьТекст();
		ТекстДляПоиска = "УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект";
		Позиция = СтрНайти(Строка, ТекстДляПоиска);
		Если Позиция > 0 Тогда
			Строка = Сред(Строка, Позиция + СтрДлина(ТекстДляПоиска));
			Позиция = СтрНайти(Строка, ")");
			ВладелецГруппыПечать = СокрЛП(СтрЗаменить(Лев(Строка, Позиция - 1), ",", ""));
			ИмяПроверяемойФормы = СтрЗаменить(ФайлМодуляФормы.Имя, Сред(ШаблонИмениМодуляФормы(),2), "");
			Результат.Добавить(Новый Структура("ИмяФормы,Владелец", ИмяПроверяемойФормы, ВладелецГруппыПечать));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПодключенияПодменюПечатьВФормах(СписокФорм)
	Счетчик = 1;
	РезультатПроверки = Новый ТекстовыйДокумент;
	ФормыСНеподключеннымиКомандамиПечати = Новый Массив;
	Для Каждого Элемент Из СписокФорм Цикл
		ИмяПроверяемойФормы = Элемент.ИмяФормы;
		ВладелецГруппыПечатьВКоде = Элемент.Владелец;
		
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Анализ форм... (%1 из %2)'"), Счетчик, СписокФорм.Количество());
		Состояние(ТекстСостояния,100*Счетчик/СписокФорм.Количество(), ИмяПроверяемойФормы);
		Счетчик = Счетчик + 1;
		
		Попытка
			Форма = ПолучитьФорму(ИмяПроверяемойФормы, Новый Структура("АвтоТест", Истина));
		Исключение
			РезультатПроверки.ДобавитьСтроку(НСтр("ru = 'Не удалось получить форму:'") + " " + ИмяПроверяемойФормы);
			Продолжить;
		КонецПопытки;
		
		ВладелецГруппыПечатьВычисленный = ВладелецГруппыПечать(Форма);
		Если Не ПустаяСтрока(ВладелецГруппыПечатьВычисленный) Тогда
			ВладелецГруппыПечатьВычисленный = "Элементы." + ВладелецГруппыПечатьВычисленный;
			Если ВладелецГруппыПечатьВКоде <> ВладелецГруппыПечатьВычисленный И Не (ВладелецГруппыПечатьВКоде = "" И ВладелецГруппыПечатьВычисленный = "Элементы.ФормаКоманднаяПанель") Тогда
				РезультатПроверки.ДобавитьСтроку(НСтр("ru = 'Возможно неверное расположение группы Печать:'") + " " + ИмяПроверяемойФормы + "(" + ВладелецГруппыПечатьВКоде + ")");
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			КомандыПечатиПодключены = УправлениеПечатьюКомандыПечатиФормы(ИмяПроверяемойФормы);
		Исключение
			КомандыПечатиПодключены = Неопределено;
		КонецПопытки;
		
		Если КомандыПечатиПодключены = Неопределено Тогда
			РезультатПроверки.ДобавитьСтроку(НСтр("ru = 'Не подключены команды Печать:'") + " " + ИмяПроверяемойФормы);
			ФормыСНеподключеннымиКомандамиПечати.Добавить(ИмяПроверяемойФормы);
		ИначеЕсли Не КомандыПечатиПодключены Тогда
			РезультатПроверки.ДобавитьСтроку(НСтр("ru = 'Пустой список команд печати:'") + " " + ИмяПроверяемойФормы);
		КонецЕсли;
	КонецЦикла;
	Если РезультатПроверки.КоличествоСтрок() > 0 Тогда
		РезультатПроверки.Показать();
		Если ФормыСНеподключеннымиКомандамиПечати.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Обнаружены формы, по которым не удалось получить таблицу команд.
				|Исправить модули менеджеров соответствующих объектов?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ИсправитьМодулиМенеджеровДляСпискаФорм", ЭтотОбъект, ФормыСНеподключеннымиКомандамиПечати);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибок внедрения не обнаружено.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьМодулиМенеджеровДляСпискаФорм(РезультатВопроса, СписокФорм) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяОбъекта Из СписокМенеджеровОбъектовДляФорм(СписокФорм) Цикл
		Модуль = Новый ТекстовыйДокумент;
		ИмяФайла = ПутьКФайлуМодуляМенеджера(ИмяОбъекта);
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			Модуль.Прочитать(ИмяФайла);
		КонецЕсли;
		ВставитьКодВПроцедуруМодуля(Модуль, "ДобавитьКомандыПечати", ШаблонПроцедуры_ДобавитьКомандыПечати(), "");
		Модуль.Записать(ИмяФайла);
	КонецЦикла;
	ЗагрузитьТекстыМодулей();
	ПоказатьПредупреждение(, НСтр("ru = 'Исправленные модули менеджеров загружены в конфигурацию.'"));
КонецПроцедуры

&НаСервере
Функция СписокМенеджеровОбъектовДляФорм(СписокФорм)
	Результат = Новый Массив;
	Для Каждого Форма Из СписокФорм Цикл
		ИмяОбъекта = Метаданные.НайтиПоПолномуИмени(Форма).Родитель().ПолноеИмя();
		Если Результат.Найти(ИмяОбъекта) = Неопределено Тогда
			Результат.Добавить(ИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция УправлениеПечатьюКомандыПечатиФормы(ИмяПроверяемойФормы)
	Возврат УправлениеПечатью.КомандыПечатиФормы(ИмяПроверяемойФормы).Количество() > 0;
КонецФункции

&НаКлиенте
Функция ВладелецГруппыПечать(Форма)
	ИмяЭлемента = "";
	ГруппаПечать = Форма.Элементы.Найти("Печать");
	Если ГруппаПечать = Неопределено Или (ТипЗнч(ГруппаПечать) <> Тип("ГруппаФормы") Или ГруппаПечать.Вид <> ВидГруппыФормы.Подменю Или ГруппаПечать.ПодчиненныеЭлементы.Количество() = 0)Тогда
		ГруппаПечать = Форма.Элементы.Найти("ФормаПечать");
	КонецЕсли;
	Если ГруппаПечать <> Неопределено И (ТипЗнч(ГруппаПечать) = Тип("ГруппаФормы") И ГруппаПечать.Вид = ВидГруппыФормы.Подменю И ГруппаПечать.ПодчиненныеЭлементы.Количество() > 0) Тогда
		Если ГруппаПечать.Родитель <> Форма Тогда
			ИмяЭлемента = ГруппаПечать.Родитель.Имя;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяЭлемента;
КонецФункции

// прочие

&НаКлиентеНаСервереБезКонтекста
Функция Пояснение(Текст = "")
	Возврат "// " + Символ(84) + Символ(79) + Символ(68)+ Символ(79) + ": " + Текст;
КонецФункции

&НаКлиенте
Функция ТекстНеУдалосьВыгрузитьМодули()
	Возврат НСтр("ru = 'Не удалось выгрузить модули конфигурации.
				|Для выгрузки модулей необходимо закрыть конфигуратор (если он открыт),
				|а также указывать корректные логин и пароль администратора ИБ.'");
КонецФункции

#КонецОбласти

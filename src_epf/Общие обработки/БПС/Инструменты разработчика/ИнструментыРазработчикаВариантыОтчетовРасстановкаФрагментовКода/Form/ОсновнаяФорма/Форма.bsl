////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеАктуальны = НЕ КонфигурацияБазыДанныхИзмененаДинамически() И НЕ КонфигурацияИзменена();
	
	РежимОтладки = Ложь;
	ВыгружатьМодули = Истина;
	ЗагружатьМодули = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Работа с текстами конфигурации в веб-клиенте не возможна.'"));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
		Кавычка = """";
		КаталогBIN = КаталогПрограммы();
		ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
		ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборКаталога = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Каталог = Элемент.ТекстРедактирования;
	ВыборКаталога.Заголовок = НСтр("ru = 'Каталог выгрузки/загрузки модулей'");
	Если ВыборКаталога.Выбрать() Тогда
		ВыгрузкаМодулейКаталог = ВыборКаталога.Каталог;
		ВыгрузкаМодулейКаталогПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогПриИзменении(Элемент)
	Слеш = ПолучитьРазделительПути();
	Если Не СтрЗаканчиваетсяНа(ВыгрузкаМодулейКаталог, Слеш) Тогда
		ВыгрузкаМодулейКаталог = ВыгрузкаМодулейКаталог + Слеш;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВнедритьПодсистему(Команда)
	ВыполнитьСценарий(Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигуратор(Команда)
	ОткрытьКонфигуратор(Неопределено, Неопределено);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка / Загрузка текстов модулей.

&НаКлиенте
Процедура ВыполнитьСценарий(ВыборПользователя, Сценарий) Экспорт
	// Плюсы сценарного выполнения:
	//   Изоляция обработчиков.
	//     Текущий шаг может ничего не знать о следующем или предыдущем шаге.
	//   Единый обработчик оповещения.
	//     Избавляет от необходимости "разворачивать" стек в обратную сторону
	//     после закрытия диалога с пользователем.
	//   Удобная группировка кода.
	//     Код, вызывающий диалог и обрабатывающий ответ располагаются в одной функции.
	//   Простая последовательность шагов.
	//   Удобное отключение шагов.
	
	Если Сценарий = Неопределено Тогда
		Сценарий = Новый Структура;
		Сценарий.Вставить("Шаги", Новый Массив);
		Сценарий.Шаги.Добавить("ПроверитьКонфигурацияИзменена");
		Сценарий.Шаги.Добавить("ПроверитьСоединения");
		Сценарий.Шаги.Добавить("ПроанализироватьНастройкиРазработчика");
		Сценарий.Шаги.Добавить("ПроанализироватьНастройкиАдминистратора");
		Сценарий.Шаги.Добавить("ВыбратьНастройкиАдминистратора");
		Сценарий.Шаги.Добавить("ВвестиЛогинПароль");
		Сценарий.Шаги.Добавить("ВыгрузитьТекстыМодулей");
		Сценарий.Шаги.Добавить("ИзменитьТекстыМодулей");
		Сценарий.Шаги.Добавить("ЗагрузитьТекстыМодулей");
		Сценарий.Шаги.Добавить("ОткрытьКонфигуратор");
		Сценарий.Шаги.Добавить("ПоказатьРучныеДействия");
		Сценарий.Вставить("ШагиВГраница", Сценарий.Шаги.ВГраница());
		Сценарий.Вставить("СледующийШагИндекс", 0);
		Сценарий.Вставить("ТекущийШаг", Неопределено);
		Сценарий.Вставить("ТекущийШагУточнение", "");
		Сценарий.Вставить("БылаОстановка", Ложь);
		Сценарий.Вставить("Обработчик", Новый ОписаниеОповещения("ВыполнитьСценарий", ЭтотОбъект, Сценарий));
		НайтиСледующийШаг(Сценарий);
	КонецЕсли;
	
	Пока ВыполнитьШаг(ВыборПользователя, Сценарий) Цикл
		Если Не НайтиСледующийШаг(Сценарий) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция НайтиСледующийШаг(Сценарий)
	Если Сценарий.СледующийШагИндекс > Сценарий.ШагиВГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	Сценарий.ТекущийШаг = Сценарий.Шаги.Получить(Сценарий.СледующийШагИндекс);
	Сценарий.ТекущийШагУточнение = "";
	Сценарий.СледующийШагИндекс = Сценарий.СледующийШагИндекс + 1;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьШаг(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШаг = "ПроверитьКонфигурацияИзменена" Тогда
		Возврат ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ВвестиЛогинПароль" Тогда
		Возврат ВвестиЛогинПароль(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПроверитьСоединения" Тогда
		Возврат ПроверитьСоединения(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ВыгрузитьТекстыМодулей" Тогда
		Возврат ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПроанализироватьНастройкиРазработчика" Тогда
		Возврат ПроанализироватьНастройкиРазработчика(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПроанализироватьНастройкиАдминистратора" Тогда
		Возврат ПроанализироватьНастройкиАдминистратора(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПроанализироватьТекстыВКаталоге" Тогда
		Возврат ПроанализироватьТекстыВКаталоге(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ВыбратьНастройкиАдминистратора" Тогда
		Возврат ВыбратьНастройкиАдминистратора(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ИзменитьТекстыМодулей" Тогда
		Возврат ИзменитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ЗагрузитьТекстыМодулей" Тогда
		Возврат ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ПоказатьРучныеДействия" Тогда
		Возврат ПоказатьРучныеДействия(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = "ОткрытьКонфигуратор" Тогда
		Возврат ОткрытьКонфигуратор(ВыборПользователя, Сценарий);
	
	КонецЕсли;
	
	// Альтернативы этим веткам условий:
	//  "Вычислить()" - неприемлемо использовать только для минимизации кода;
	//  "ВыполнитьОбработкуОповещения()" - не выгодно, т.к. поддерживаются только процедуры,
	//      а следовательно следующий шаг придется запускать из предыдущего шага;
	//      Т.е. исчезает такой большой плюс как изоляция обработчиков от асинхронной логики.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка модифицированности конфигурации.

&НаКлиенте
Функция ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		Если МетаданныеАктуальны Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Основная конфигурация отличается от конфигурации базы данных.
		|Перед запуском обработки по расстановке фрагментов кода
		|рекомендуется обновить конфигурацию базы данных.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ИгнорироватьИзменения", НСтр("ru = 'Пропустить'"));
		Кнопки.Добавить("ЗакрытьПрограмму",      НСтр("ru = 'Закрыть программу'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 60, "ИгнорироватьИзменения"); // 
		
		Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = "ЗакрытьПрограмму" Тогда
			// Дождавшись завершения сценария инициировать завершение сеанса.
			ПодключитьОбработчикОжидания("ЗакрытьПрограмму", 0.1, Истина);
			Возврат Ложь; // Отменить сценарий.
		ИначеЕсли ВыборПользователя = "ИгнорироватьИзменения" Тогда
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПрограмму()
	ЗавершитьРаботуСистемы(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ввод логина и пароля

&НаКлиенте
Функция ВвестиЛогинПароль(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		ПолноеИмяФормы = ПолноеИмяФормы("ПараметрыАвторизации");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Пользователь", ВыгрузкаМодулейПользователь);
		ПараметрыФормы.Вставить("Пароль", ВыгрузкаМодулейПароль);
		
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, , , , Сценарий.Обработчик);
		
		Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ТипЗнч(ВыборПользователя) = Тип("Структура") Тогда
			ВыгрузкаМодулейПользователь = ВыборПользователя.Пользователь;
			ВыгрузкаМодулейПароль       = ВыборПользователя.Пароль;
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соединения, которые могут препятствовать выгрузке.

&НаКлиенте
Функция ПроверитьСоединения(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		Если МожноВыгрузитьМодули() Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Для выгрузки текстов модулей конфигурации необходимо
		|закрыть конфигуратор и другие соединения,
		|которые могут препятствовать выгрузке.
		|Текущий сеанс завершать не нужно.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 15, КодВозвратаДиалога.Повторить, , КодВозвратаДиалога.Повторить);
		
		Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь; // Отменить сценарий.
		Иначе
			Сценарий.ТекущийШагУточнение = "";
			Возврат ПроверитьСоединения(ВыборПользователя, Сценарий); // Повторная проверка.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноВыгрузитьМодули()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = "DESIGNER" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка модулей.

&НаКлиенте
Функция ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Очистка каталога выгрузки'"));
	
	Если ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
		УдалитьФайлы(Лев(ВыгрузкаМодулейКаталог, СтрДлина(ВыгрузкаМодулейКаталог) - 1));
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выгрузка текстов модулей'"));
	
	#Если НЕ ВебКлиент Тогда
		Если Не ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
			ВыгрузкаМодулейКаталог = ПолучитьИмяВременногоФайла("CodeUnload") + "\";
			СоздатьКаталог(ВыгрузкаМодулейКаталог);
		КонецЕсли;
	#КонецЕсли
	
	КодВозврата = NULL;
	ЗапуститьПриложение(Кавычка + КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString " + Кавычка + ПутьККонфигурации + Кавычка
		+ " /N "                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
		+ " /P "                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
		+ " /DumpConfigFiles "    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
		+ " -Module"
		,
		,
		Истина,
		КодВозврата);
	//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог выгрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости выгрузки модулей;
	//		Template - признак необходимости выгрузки шаблонов;
	//		Help - признак необходимости выгрузки справочной информации;
	//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки разработчика.

&НаКлиенте
Функция ПроанализироватьНастройкиРазработчика(ВыборПользователя, Сценарий)
	
	Состояние(НСтр("ru = 'Анализ настроек, заданных в Конфигураторе'"));
	ПроанализироватьНастройкиРазработчикаСервер();
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

&НаСервере
Процедура ПроанализироватьНастройкиРазработчикаСервер()
	НастройкиОтчетов.Очистить();
	НастройкиВариантов.Очистить();
	
	ОтчетовПодключено = 0;
	ОтчетовВсего = Метаданные.Отчеты.Количество();
	
	ПодсистемыОтчетов = ВариантыОтчетов.РазмещениеОтчетовВПодсистемах();
	ПодсистемыОтчетов.Колонки.Добавить("ПодсистемаПолноеПредставление", Новый ОписаниеТипов("Строка"));
	
	СоставБиблиотек = Новый Соответствие;
	Для Каждого РазделМетаданные Из Метаданные.Подсистемы Цикл
		Если Не РазделМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			ЗарегистрироватьСоставПодсистемы(СоставБиблиотек, РазделМетаданные, "");
		КонецЕсли;
	КонецЦикла;
	
	// Регистрация текущих настроек, заданных разработчиком.
	ДеревоВариантов = ВариантыОтчетов.ДеревоПредопределенных();
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		ИмяОтчета = СтрокаОтчет.Метаданные.Имя;
		
		// Технологическая подсистема.
		НастройкиПодсистемы = СоставБиблиотек.Получить(СтрокаОтчет.Метаданные);
		Если НастройкиПодсистемы = Неопределено Тогда
			БиблиотекаПолноеИмя = "НеВходящиеВСоставБиблиотек";
		Иначе
			БиблиотекаПолноеИмя = НастройкиПодсистемы.ПолноеИмя;
		КонецЕсли;
		
		// Интерфейсные подсистемы.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", СтрокаОтчет.Метаданные));
		Если Найденные.Количество() = 0 Тогда
			ИнтерфейснаяПодсистема = ""; // НСтр("ru = 'Не входящие в состав командного интерфейса'");
		Иначе
			НайденнаяСтрока = Найденные[0];
			ИнтерфейснаяПодсистема = НайденнаяСтрока.ПодсистемаПолноеПредставление;
			Если ИнтерфейснаяПодсистема = "" Тогда
				ПодсистемаМетаданные = НайденнаяСтрока.ПодсистемаМетаданные;
				Пока Истина Цикл
					Если ИнтерфейснаяПодсистема = "" Тогда
						ИнтерфейснаяПодсистема = ПодсистемаМетаданные.Представление();
					Иначе
						ИнтерфейснаяПодсистема = ПодсистемаМетаданные.Представление() + " / " + ИнтерфейснаяПодсистема;
					КонецЕсли;
					ПодсистемаМетаданные = ПодсистемаМетаданные.Родитель();
					Если ТипЗнч(ПодсистемаМетаданные) <> Тип("ОбъектМетаданных") Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				НайденнаяСтрока.ПодсистемаПолноеПредставление = ИнтерфейснаяПодсистема;
			КонецЕсли;
		КонецЕсли;
		
		// Старые настройки формы.
		ДобавитьНастройкиФормы = Ложь;
		НастройкиФормы = Неопределено;
		Если Не СтрокаОтчет.ОпределитьНастройкиФормы Тогда
			Попытка
				ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
				Если ОтчетОбъект.ВерсияСтандартныхФункцийОтчетов() = "1" Тогда
					СтарыеНастройкиФормы = ОтчетОбъект.ПолучитьНастройкиОтчета();
					НастройкиФормы = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
					ЗаполнитьЗначенияСвойств(НастройкиФормы, СтарыеНастройкиФормы);
					НастройкиФормы.Печать = СтарыеНастройкиФормы.ПараметрыПечатиПоУмолчанию;
					Для Каждого КлючИЗначение Из СтарыеНастройкиФормы.СоответствиеПериодичностиПараметров Цикл
						НастройкиФормы.Периодичность.Минимальная = КлючИЗначение.Значение;
					КонецЦикла;
					ДобавитьНастройкиФормы = Истина;
				КонецЕсли;
			Исключение
				НастройкиФормы = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		// Запись в данные формы.
		СтрокаОтчетИзФормы = НастройкиОтчетов.Добавить();
		СтрокаОтчетИзФормы.ИмяОтчета = ИмяОтчета;
		СтрокаОтчетИзФормы.БиблиотекаПолноеИмя     = БиблиотекаПолноеИмя;
		СтрокаОтчетИзФормы.ПодсистемаПредставление = ИнтерфейснаяПодсистема;
		СтрокаОтчетИзФормы.ГруппироватьПоОтчету    = СтрокаОтчет.ГруппироватьПоОтчету;
		СтрокаОтчетИзФормы.ОпределитьНастройкиФормы = СтрокаОтчет.ОпределитьНастройкиФормы Или ДобавитьНастройкиФормы;
		СтрокаОтчетИзФормы.ДобавитьНастройкиФормы   = ДобавитьНастройкиФормы;
		СтрокаОтчетИзФормы.НастройкиФормы           = НастройкиФормы;
		
		ПодсистемыОтчета = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", СтрокаОтчет.Метаданные));
		
		// Варианты отчета.
		ДобавитьСамОтчет = Истина;
		Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
			ДобавитьСамОтчет = Ложь;
			ВариантыОтчетов.ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
			
			ВариантРазмещение = Новый Соответствие; // Отличие от оригинала: в ключе хранится полное имя (для сериализуемости).
			Для Каждого СтрокаПодсистема Из ПодсистемыОтчета Цикл
				ПодсистемаВажность = СтрокаВариант.Размещение.Получить(СтрокаПодсистема.ПодсистемаМетаданные);
				Если ПодсистемаВажность = Неопределено Тогда
					ПодсистемаВажность = "Удален";
				Иначе
					СтрокаВариант.Размещение.Удалить(СтрокаПодсистема.ПодсистемаМетаданные);
				КонецЕсли;
				ВариантРазмещение.Вставить(СтрокаПодсистема.ПодсистемаПолноеИмя, ПодсистемаВажность);
			КонецЦикла;
			Для Каждого КлючИЗначение Из СтрокаВариант.Размещение Цикл
				ПодсистемаВажность = КлючИЗначение.Значение;
				Если ПодсистемаВажность = "" Тогда
					ПодсистемаВажность = "Добавлен";
				КонецЕсли;
				ВариантРазмещение.Вставить(КлючИЗначение.Ключ.ПолноеИмя(), ПодсистемаВажность);
			КонецЦикла;
			
			НастройкиВарианта = Новый Структура;
			НастройкиВарианта.Вставить("Наименование", СтрокаВариант.Наименование);
			НастройкиВарианта.Вставить("Описание",     СтрокаВариант.Описание);
			НастройкиВарианта.Вставить("Включен",      СтрокаВариант.Включен);
			НастройкиВарианта.Вставить("ВидимостьПоУмолчанию", СтрокаВариант.ВидимостьПоУмолчанию);
			НастройкиВарианта.Вставить("ФункциональныеОпции",  СтрокаВариант.ФункциональныеОпции);
			НастройкиВарианта.Вставить("НастройкиДляПоиска",   СтрокаВариант.НастройкиДляПоиска);
			НастройкиВарианта.Вставить("Размещение", ВариантРазмещение);
			НастройкиВарианта.Вставить("Основной",   СтрокаВариант = СтрокаОтчет.ОсновнойВариант);
			
			// Запись в данные формы.
			СтрокаВариантИзФормы = НастройкиВариантов.Добавить();
			СтрокаВариантИзФормы.ИмяОтчета    = ИмяОтчета;
			СтрокаВариантИзФормы.КлючВарианта = СтрокаВариант.КлючВарианта;
			СтрокаВариантИзФормы.Настройки    = НастройкиВарианта;
			
		КонецЦикла;
		
		Если ДобавитьСамОтчет Тогда
			
			ОтчетРазмещение = Новый Соответствие; // Отличие от оригинала: в ключе хранится полное имя (для сериализуемости).
			Для Каждого СтрокаПодсистема Из ПодсистемыОтчета Цикл
				ПодсистемаВажность = СтрокаВариант.Размещение.Получить(СтрокаПодсистема.ПодсистемаМетаданные);
				Если ПодсистемаВажность = Неопределено Тогда
					ПодсистемаВажность = "Удален";
				Иначе
					СтрокаВариант.Размещение.Удалить(СтрокаПодсистема.ПодсистемаМетаданные);
				КонецЕсли;
				ОтчетРазмещение.Вставить(СтрокаПодсистема.ПодсистемаПолноеИмя, ПодсистемаВажность);
			КонецЦикла;
			Для Каждого КлючИЗначение Из СтрокаВариант.Размещение Цикл
				ПодсистемаВажность = КлючИЗначение.Значение;
				Если ПодсистемаВажность = "" Тогда
					ПодсистемаВажность = "Добавлен";
				КонецЕсли;
				ОтчетРазмещение.Вставить(КлючИЗначение.Ключ.ПолноеИмя(), ПодсистемаВажность);
			КонецЦикла;
			
			ОтчетРазмещение = Новый Соответствие;
			Для Каждого КлючИЗначение Из СтрокаОтчет.Размещение Цикл
				ПодсистемаМетаданные = КлючИЗначение.Ключ;
				ПодсистемаВажность = КлючИЗначение.Значение;
				// Пропуск настроек "по умолчанию".
				Если ПодсистемаВажность = "" Тогда
					Поиск = Новый Структура("ОтчетМетаданные, ПодсистемаМетаданные", СтрокаОтчет.Метаданные, ПодсистемаМетаданные);
					Найденные = ПодсистемыОтчетов.НайтиСтроки(Поиск);
					Если Найденные.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ОтчетРазмещение.Вставить(ПодсистемаМетаданные.ПолноеИмя(), ПодсистемаВажность);
			КонецЦикла;
			
			НастройкиВарианта = Новый Структура;
			НастройкиВарианта.Вставить("Наименование", СтрокаОтчет.Наименование);
			НастройкиВарианта.Вставить("Описание",     СтрокаОтчет.Описание);
			НастройкиВарианта.Вставить("Включен",      СтрокаОтчет.Включен);
			НастройкиВарианта.Вставить("ВидимостьПоУмолчанию", СтрокаОтчет.ВидимостьПоУмолчанию);
			НастройкиВарианта.Вставить("ФункциональныеОпции",  СтрокаОтчет.ФункциональныеОпции);
			НастройкиВарианта.Вставить("НастройкиДляПоиска",   СтрокаОтчет.НастройкиДляПоиска);
			НастройкиВарианта.Вставить("Размещение", ОтчетРазмещение);
			НастройкиВарианта.Вставить("Основной",   Истина);
			
			// Запись в данные формы.
			СтрокаВариантИзФормы = НастройкиВариантов.Добавить();
			СтрокаВариантИзФормы.ИмяОтчета    = ИмяОтчета;
			СтрокаВариантИзФормы.КлючВарианта = "";
			СтрокаВариантИзФормы.Настройки    = НастройкиВарианта;
			
		КонецЕсли;
	КонецЦикла;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	ДеревоВариантов.Колонки.Очистить();
	ДеревоВариантов.Строки.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСоставПодсистемы(Состав, ПодсистемаМетаданные, РодительПредставление)
	НастройкиПодсистемы = Новый Структура;
	НастройкиПодсистемы.Вставить("Метаданные", ПодсистемаМетаданные);
	НастройкиПодсистемы.Вставить("ПолноеИмя", ПодсистемаМетаданные.ПолноеИмя());
	НастройкиПодсистемы.Вставить("ПолноеПредставление", ПодсистемаМетаданные.Представление());
	Если РодительПредставление <> "" Тогда
		НастройкиПодсистемы.ПолноеПредставление = РодительПредставление + " / " + НастройкиПодсистемы.ПолноеПредставление;
	КонецЕсли;
	Для Каждого ОбъектМетаданных Из ПодсистемаМетаданные.Состав Цикл
		Состав.Вставить(ОбъектМетаданных, НастройкиПодсистемы);
	КонецЦикла;
	Для Каждого ВложеннаяПодсистема Из ПодсистемаМетаданные.Подсистемы Цикл
		ЗарегистрироватьСоставПодсистемы(Состав, ВложеннаяПодсистема, НастройкиПодсистемы.ПолноеПредставление);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки администратора - чтение.

&НаКлиенте
Функция ПроанализироватьНастройкиАдминистратора(ВыборПользователя, Сценарий)
	
	Если Не ДобавлятьНастройкиАдминистратора Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Анализ настроек, заданных в Предприятии'"));
	ПроанализироватьНастройкиАдминистратораСервер();
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

&НаСервере
Процедура ПроанализироватьНастройкиАдминистратораСервер()
	НастройкиАдминистратора.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Размещение.(
	|		Использование КАК Использование,
	|		Подсистема КАК Подсистема,
	|		Подсистема.ПолноеИмя КАК ПодсистемаПолноеИмя,
	|		Важный КАК Важный,
	|		СмТакже КАК СмТакже
	|	) КАК Размещение,
	|	ВариантыОтчетов.Описание КАК Описание,
	|	ВариантыОтчетов.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.Пользовательский
	|	И НЕ ВариантыОтчетов.ПометкаУдаления";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	Поиск = Новый Структура("ИмяОтчета, КлючВарианта");
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТаблицы);
		Найденные = НастройкиВариантов.НайтиСтроки(Поиск);
		Для Каждого СтрокаВариантИзФормы Из Найденные Цикл
			НастройкиВарианта = СтрокаВариантИзФормы.Настройки;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Описание)
				И СтрокаТаблицы.Описание <> НастройкиВарианта.Описание Тогда
				НастройкиАдминистратораДобавить(СтрокаТаблицы, "Описание", Неопределено, Неопределено);
			КонецЕсли;
			Если СтрокаТаблицы.ВидимостьПоУмолчанию <> НастройкиВарианта.ВидимостьПоУмолчанию Тогда
				НастройкиАдминистратораДобавить(СтрокаТаблицы, "ВидимостьПоУмолчанию", Неопределено, Неопределено);
			КонецЕсли;
			Для Каждого СтрокаТаблицыРазмещение Из СтрокаТаблицы.Размещение Цикл
				ВажностьИзНастроекРазработчика = НастройкиВарианта.Размещение.Получить(СтрокаТаблицыРазмещение.ПодсистемаПолноеИмя);
				Если Не СтрокаТаблицыРазмещение.Использование Тогда
					ВажностьИзНастроекАдминистратора = "Удален";
				ИначеЕсли СтрокаТаблицыРазмещение.Важный Тогда
					ВажностьИзНастроекАдминистратора = "Важный";
				ИначеЕсли СтрокаТаблицыРазмещение.СмТакже Тогда
					ВажностьИзНастроекАдминистратора = "СмТакже";
				Иначе
					Если ВажностьИзНастроекРазработчика = "" Тогда
						Продолжить;
					КонецЕсли;
					ВажностьИзНастроекАдминистратора = "Добавлен";
				КонецЕсли;
				Если ВажностьИзНастроекАдминистратора <> ВажностьИзНастроекРазработчика Тогда
					ДопНастройкаЗначение = Новый Структура;
					ДопНастройкаЗначение.Вставить("Использование", СтрокаТаблицыРазмещение.Использование);
					ДопНастройкаЗначение.Вставить("Подсистема", СтрокаТаблицыРазмещение.ПодсистемаПолноеИмя);
					ДопНастройкаЗначение.Вставить("Важность", ВажностьИзНастроекАдминистратора);
					ДопНастройкаПредставление = СтрокаТаблицыРазмещение.ПодсистемаПолноеИмя;
					Если ВажностьИзНастроекАдминистратора <> "" Тогда
						ДопНастройкаПредставление = ДопНастройкаПредставление + " (" + ВажностьИзНастроекАдминистратора + ")";
					КонецЕсли;
					НастройкиАдминистратораДобавить(СтрокаТаблицы, "Размещение", ДопНастройкаЗначение, ДопНастройкаПредставление);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастройкиАдминистратораДобавить(СтрокаТаблицы, Тип, Значение, ПредставлениеЗначения);
	Директива = Новый Структура("ИмяОтчета, КлючВарианта, Тип");
	ЗаполнитьЗначенияСвойств(Директива, СтрокаТаблицы);
	Директива.Тип = Тип;
	Если Значение = Неопределено Тогда
		Директива.Вставить("Значение", СтрокаТаблицы[Тип]);
		Если ПредставлениеЗначения = Неопределено Тогда
			ПредставлениеЗначения = Строка(Директива.Значение);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Директива, Значение, Истина);
	КонецЕсли;
	ДирективаПредставление = Директива.Тип + ": " + ПредставлениеЗначения + ".";
	НастройкиАдминистратора.Добавить(Директива, ДирективаПредставление, Истина);
КонецПроцедуры

&НаКлиенте
Функция ПроанализироватьТекстыВКаталоге(ВыборПользователя, Сценарий)
	
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки администратора - выбор и применение.

&НаКлиенте
Функция ВыбратьНастройкиАдминистратора(ВыборПользователя, Сценарий)
	Если Не ДобавлятьНастройкиАдминистратора Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = "" Тогда // Первый вызов
		
		Если НастройкиАдминистратора.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Настройки размещения, заданные в Предприятии,
			|совпадают с настройками, заданными в Конфигураторе.'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 60, "Продолжить");
			
			Сценарий.ТекущийШагУточнение = "ЗаданВопрос";
			Возврат Ложь; // Приостановить сценарий.
			
		Иначе
			
			ПолноеИмяФормы = ПолноеИмяФормы("ВыборНастроекАдминистратора");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НастройкиАдминистратора", НастройкиАдминистратора);
			
			ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, , , , Сценарий.Обработчик);
			
			Сценарий.ТекущийШагУточнение = "ОтметкаЭлементов";
			Возврат Ложь; // Приостановить сценарий.
			
		КонецЕсли;
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ЗаданВопрос" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = "Продолжить" Тогда
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = "ОтметкаЭлементов" Тогда // Обработчик ответа на вопрос.
		
		Если ТипЗнч(ВыборПользователя) <> Тип("СписокЗначений") Тогда
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
		НастройкиАдминистратора = ВыборПользователя; // Если списки разместились по разным адресам памяти.
		ПрименитьВыбранныеНастройкиАдминистратора();
		
		Возврат Истина; // Продолжить сценарий.
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрименитьВыбранныеНастройкиАдминистратора()
	Поиск = Новый Структура("ИмяОтчета, КлючВарианта");
	Для Каждого ЭлементСписка Из НастройкиАдминистратора Цикл
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НастройкаАдминистратора = ЭлементСписка.Значение;
		Если НастройкаАдминистратора.Тип = "Размещение" Тогда
			ПодсистемаМетаданные = Метаданные.НайтиПоПолномуИмени(НастройкаАдминистратора.Подсистема);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Поиск, НастройкаАдминистратора);
		Найденные = НастройкиВариантов.НайтиСтроки(Поиск);
		Для Каждого СтрокаВариант Из Найденные Цикл
			Если НастройкаАдминистратора.Тип = "Описание" Тогда
				СтрокаВариант.Настройки.Описание = НастройкаАдминистратора.Значение;
			ИначеЕсли НастройкаАдминистратора.Тип = "ВидимостьПоУмолчанию" Тогда
				СтрокаВариант.Настройки.ВидимостьПоУмолчанию = НастройкаАдминистратора.Значение;
			ИначеЕсли НастройкаАдминистратора.Тип = "Размещение" Тогда
				СтрокаВариант.Настройки.Размещение.Вставить(ПодсистемаМетаданные, НастройкаАдминистратора.Важность);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расстановка фрагментов кода.

&НаКлиенте
Функция ИзменитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр("ru = 'Изменение текстов модулей'"));
	
	// 1. В модуле менеджера отчета следует найти процедуру НастроитьВариантыОтчета().
	//   Если ее нет:
	//     1.1. Вставить ее в область СлужебныйПрограммныйИнтерфейс.
	//     1.2. В модуле ВариантыОтчетовПереопределяемый следует вставить фрагменты:
	//       ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
	//     1.3. Если были переопределены какие-либо настройки, то :
	//         1.3.1. Добавить ручной шаг:
	//           "Удалить весь код настройки отчета <ИмяОтчета> из
	//           ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов(), кроме вызова
	//           ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера".
	//         1.3.2. Также добавить комментарий-напоминание в модуле.
	// 2. Залить новое содержимое процедуры НастроитьВариантыОтчета.
	// 3. Если ранее в модуле объекта отчета была определена функция ВерсияСтандартныхФункцийОтчетов(), тогда:
	//     3.1. Удалить устаревшую функцию ВерсияСтандартныхФункцийОтчетов().
	//     3.2. Прочитать содержимое устаревшей функции ПолучитьНастройкиОтчета().
	//     3.3. Удалить устаревшую функцию ПолучитьНастройкиОтчета().
	//     3.4. Залить новое содержимое функции ОпределитьНастройкиФормы() с настройками.
	
	КодировкаМодулей = КодировкаТекста.UTF8;
	СимволыПСТаб = Символы.ПС + Символы.Таб;
	СтрокаРежимВыводаИстина = "ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина);";
	СтрокаРежимВыводаЛожь   = "ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Ложь);";
	
	Результат = ИзменитьТекстыМодулейПрочитатьПараметрыСервер();
	ГлобальноГруппироватьПоОтчету = Результат.ВыводитьОтчетыВместоВариантов;
	Перечисление_ДоступныеПериодыОтчета_ПоискИмениПоСсылке = Результат.ДоступныеПериодыОтчета;
	
	НастроитьВариантыОтчета_Поиск = НастроитьВариантыОтчета_УсловияПоиска();
	НастроитьВариантыОтчета_Объявление = НастроитьВариантыОтчета_Поиск.Уровни[0].Объявление;
	ОпределитьНастройкиФормы_Поиск = ОпределитьНастройкиФормы_УсловияПоиска();
	
	ЕстьИзмененияДляОбщегоМодуля = Ложь;
	НастройкиОтчетов.Сортировать("БиблиотекаПолноеИмя Возр, ПодсистемаПредставление Возр");
	Для Каждого СтрокаОтчетИзФормы Из НастройкиОтчетов Цикл
		
		////////////////////////////////////////////////////////////////////////////////
		// Модуль менеджера отчета
		
		ОтчетМодульМенеджераПолноеИмя = ВыгрузкаМодулейКаталог + "Отчет." + СтрокаОтчетИзФормы.ИмяОтчета + ".МодульМенеджера.txt";
		ОтчетМодульМенеджераФайл = Новый Файл(ОтчетМодульМенеджераПолноеИмя);
		Если ОтчетМодульМенеджераФайл.Существует() Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ОтчетМодульМенеджераФайл.ПолноеИмя, КодировкаМодулей);
			МодульМенеджера = ЧтениеТекста.Прочитать();
			ЧтениеТекста = Неопределено;
		Иначе
			МодульМенеджера = "";
		КонецЕсли;
		
		// Замена известных альтернативных объявлений процедуры на умолчания.
		МодульМенеджера = СтрЗаменить(МодульМенеджера, "Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт", НастроитьВариантыОтчета_Объявление);
		
		Результат = ТелоПроцедуры(МодульМенеджера, НастроитьВариантыОтчета_Поиск);
		МодульМенеджера = Результат.ТекстМодуля;
		НастроитьВариантыОтчета_БывшееТело = Результат.БывшееТело;
		НастроитьВариантыОтчета_Тело = "";
		
		ГруппироватьПоОтчету = Неопределено;
		Если Не ПустаяСтрока(НастроитьВариантыОтчета_БывшееТело) Тогда
			Если СтрНайти(НастроитьВариантыОтчета_БывшееТело, СтрокаРежимВыводаИстина) > 0
				Или СтрНайти(НастроитьВариантыОтчета_БывшееТело, "НастройкиОтчета.ГруппироватьПоОтчету = Истина;") > 0 Тогда
				ГруппироватьПоОтчету = Истина;
			ИначеЕсли СтрНайти(НастроитьВариантыОтчета_БывшееТело, СтрокаРежимВыводаЛожь) > 0
				Или СтрНайти(НастроитьВариантыОтчета_БывшееТело, "НастройкиОтчета.ГруппироватьПоОтчету = Ложь;") > 0 Тогда
				ГруппироватьПоОтчету = Ложь;
			КонецЕсли;
		Иначе
			ЕстьИзмененияДляОбщегоМодуля = Истина;
			Если СтрокаОтчетИзФормы.ГруппироватьПоОтчету <> ГлобальноГруппироватьПоОтчету Тогда
				ГруппироватьПоОтчету = СтрокаОтчетИзФормы.ГруппироватьПоОтчету;
			КонецЕсли;
		КонецЕсли;
		
		Если ГруппироватьПоОтчету <> Неопределено Тогда
			НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
				+ СимволыПСТаб + ?(ГруппироватьПоОтчету, СтрокаРежимВыводаИстина, СтрокаРежимВыводаЛожь);
		КонецЕсли;
		
		Если СтрокаОтчетИзФормы.ОпределитьНастройкиФормы Тогда
			НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
				+ СимволыПСТаб + "НастройкиОтчета.ОпределитьНастройкиФормы = Истина;";
		КонецЕсли;
		
		// Код настройки вариантов.
		Найденные = НастройкиВариантов.НайтиСтроки(Новый Структура("ИмяОтчета", СтрокаОтчетИзФормы.ИмяОтчета));
		Для Каждого СтрокаВариантИзФормы Из Найденные Цикл
			НастройкиВарианта = СтрокаВариантИзФормы.Настройки;
			
			НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
				+ СимволыПСТаб
				+ СимволыПСТаб + "НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, """ + СтрокаВариантИзФормы.КлючВарианта+ """);";
			
			Если Не НастройкиВарианта.Включен Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.Включен = Ложь;";
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НастройкиВарианта.Описание) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.Описание = " + КодМногострочногоТекста(НастройкиВарианта.Описание, Истина) + ";";
			Иначе
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "// " + Пояснение() + ":"
					+ СимволыПСТаб + "//   - Либо заполнить описание: НастройкиВарианта.Описание = НСтр(""ru = ''"");"
					+ СимволыПСТаб + "//   - Либо отключить вариант:  НастройкиВарианта.Включен = Ложь;";
			КонецЕсли;
			
			ВидимостьПоУмолчанию = НастройкиВарианта.Основной Или Не СтрокаОтчетИзФормы.ГруппироватьПоОтчету;
			Если ВидимостьПоУмолчанию <> НастройкиВарианта.ВидимостьПоУмолчанию Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.ВидимостьПоУмолчанию = "+ ?(НастройкиВарианта.ВидимостьПоУмолчанию, "Истина", "Ложь") +";";
			КонецЕсли;
			
			Для Каждого ИмяФункциональнойОпции Из НастройкиВарианта.ФункциональныеОпции Цикл
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.ФункциональныеОпции.Добавить("""+ ИмяФункциональнойОпции +""");";
			КонецЦикла;
			
			Поиск = НастройкиВарианта.НастройкиДляПоиска;
			Если ЗначениеЗаполнено(Поиск.ИменаМакетов) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.НастройкиДляПоиска.ИменаМакетов = " + КодМногострочногоТекста(Поиск.ИменаМакетов, Ложь) + ";";
			КонецЕсли;
			Если ЗначениеЗаполнено(Поиск.НаименованияПолей) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.НастройкиДляПоиска.НаименованияПолей = " + КодМногострочногоТекста(Поиск.НаименованияПолей, Истина) + ";";
			КонецЕсли;
			Если ЗначениеЗаполнено(Поиск.НаименованияПараметровИОтборов) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = " + КодМногострочногоТекста(Поиск.НаименованияПараметровИОтборов, Истина) + ";";
			КонецЕсли;
			Если ЗначениеЗаполнено(Поиск.КлючевыеСлова) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + "НастройкиВарианта.НастройкиДляПоиска.КлючевыеСлова = " + КодМногострочногоТекста(Поиск.КлючевыеСлова, Истина) + ";";
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из НастройкиВарианта.Размещение Цикл
				ПодсистемаПолноеИмя = КлючИЗначение.Ключ;
				ПодсистемаВажность = КлючИЗначение.Значение;
				Если ПодсистемаВажность = "" Тогда
					Продолжить; // Умолчания.
				ИначеЕсли ПодсистемаВажность = "Удален" Тогда
					Код = "НастройкиВарианта.Размещение.Удалить(%1);";
				ИначеЕсли ПодсистемаВажность = "Добавлен" Тогда
					Код = "НастройкиВарианта.Размещение.Вставить(%1, """");";
				Иначе
					Код = "НастройкиВарианта.Размещение.Вставить(%1, """ + ПодсистемаВажность + """);";
				КонецЕсли;
				НастроитьВариантыОтчета_Тело =
					НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Код, "Метаданные." + СтрЗаменить(ПодсистемаПолноеИмя, "Подсистема.", "Подсистемы."));
			КонецЦикла;
		КонецЦикла;
		
		МодульМенеджера = СтрЗаменить(МодульМенеджера, "// НастроитьВариантыОтчета_Тело", СокрЛП(НастроитьВариантыОтчета_Тело));
		
		ЗаписьТекста = Новый ЗаписьТекста(ОтчетМодульМенеджераФайл.ПолноеИмя, КодировкаМодулей);
		ЗаписьТекста.Записать(МодульМенеджера);
		ЗаписьТекста = Неопределено;
		
		////////////////////////////////////////////////////////////////////////////////
		// Модуль объекта отчета
		
		Если СтрокаОтчетИзФормы.ДобавитьНастройкиФормы Тогда
			
			ОтчетМодульОбъектаПолноеИмя = ВыгрузкаМодулейКаталог + "Отчет." + СтрокаОтчетИзФормы.ИмяОтчета + ".МодульОбъекта.txt";
			ОтчетМодульОбъектаФайл = Новый Файл(ОтчетМодульОбъектаПолноеИмя);
			Если ОтчетМодульОбъектаФайл.Существует() Тогда
				ЧтениеТекста = Новый ЧтениеТекста(ОтчетМодульОбъектаФайл.ПолноеИмя, КодировкаМодулей);
				МодульОбъекта = ЧтениеТекста.Прочитать();
				ЧтениеТекста = Неопределено;
			Иначе
				МодульОбъекта = "";
			КонецЕсли;
			
			Результат = ТелоПроцедуры(МодульОбъекта, ОпределитьНастройкиФормы_Поиск);
			МодульОбъекта = Результат.ТекстМодуля;
			КодПроцедуры = "";
			
			Настройки_Старые = СтрокаОтчетИзФормы.НастройкиФормы;
			Настройки_Умолчания = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
			
			Если Настройки_Старые.ВыводитьСуммуВыделенныхЯчеек <> Настройки_Умолчания.ВыводитьСуммуВыделенныхЯчеек Тогда
				КодПроцедуры =
					КодПроцедуры
					+ СимволыПСТаб + "Настройки.ВыводитьСуммуВыделенныхЯчеек = " + ЗначениеВКод(Настройки_Старые.ВыводитьСуммуВыделенныхЯчеек) + ";";
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из Настройки_Старые.СоответствиеПериодичностиПараметров Цикл
				ИмяПараметра = Строка(КлючИЗначение.Ключ);
				ПеречислениеИмя = Перечисление_ДоступныеПериодыОтчета_ПоискИмениПоСсылке[КлючИЗначение.Значение];
				КодПроцедуры =
					КодПроцедуры
					+ СимволыПСТаб + "Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных(""" + ИмяПараметра + """), Перечисления.ДоступныеПериодыОтчета." + ПеречислениеИмя + ");";
			КонецЦикла;
			
			Печать_Старая = Настройки_Старые.ПараметрыПечатиПоУмолчанию;
			Печать_Умолчания = Настройки_Умолчания.Печать;
			Для Каждого КлючИЗначение Из Печать_Старая Цикл
				Если КлючИЗначение.Значение <> Печать_Умолчания[КлючИЗначение.Ключ] Тогда
					КодПроцедуры =
						КодПроцедуры
						+ СимволыПСТаб + "Настройки.Печать."+ КлючИЗначение.Ключ + " = " + ЗначениеВКод(КлючИЗначение.Значение) + ";";
				КонецЕсли;
			КонецЦикла;
			
			МодульОбъекта = СтрЗаменить(МодульОбъекта, "// ОпределитьНастройкиФормы_Тело", СокрЛП(КодПроцедуры));
			УдалитьПроцедуруИлиФункцию(МодульОбъекта, "Функция ВерсияСтандартныхФункцийОтчетов(", "КонецФункции");
			УдалитьПроцедуруИлиФункцию(МодульОбъекта, "Функция ПолучитьНастройкиОтчета(", "КонецФункции");
			
			ЗаписьТекста = Новый ЗаписьТекста(ОтчетМодульОбъектаФайл.ПолноеИмя, КодировкаМодулей);
			ЗаписьТекста.Записать(МодульОбъекта);
			ЗаписьТекста = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Переопределяемый модуль
	
	Если ЕстьИзмененияДляОбщегоМодуля Тогда
		НастроитьВариантыОтчетов_Тело = "";
		БиблиотекаПолноеИмя = "";
		НастройкиОтчетов.Сортировать("БиблиотекаПолноеИмя Возр, ИмяОтчета Возр");
		Для Каждого СтрокаОтчетИзФормы Из НастройкиОтчетов Цикл
			Если СтрНачинаетсяС(СтрокаОтчетИзФормы.БиблиотекаПолноеИмя, "Подсистема.СтандартныеПодсистемы") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаОтчетИзФормы.БиблиотекаПолноеИмя <> БиблиотекаПолноеИмя Тогда
				Если БиблиотекаПолноеИмя <> "" Тогда
					НастроитьВариантыОтчетов_Тело =
						НастроитьВариантыОтчетов_Тело
						+ СимволыПСТаб + "// Конец " + СтрЗаменить(БиблиотекаПолноеИмя, "Подсистема.", "");
				КонецЕсли;
				БиблиотекаПолноеИмя = СтрокаОтчетИзФормы.БиблиотекаПолноеИмя;
				НастроитьВариантыОтчетов_Тело =
					НастроитьВариантыОтчетов_Тело
					+ СимволыПСТаб
					+ СимволыПСТаб + "// " + СтрЗаменить(БиблиотекаПолноеИмя, "Подсистема.", "");
			КонецЕсли;
			НастроитьВариантыОтчетов_Тело =
				НастроитьВариантыОтчетов_Тело
				+ СимволыПСТаб + "ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты." + СтрокаОтчетИзФормы.ИмяОтчета + ");";
		КонецЦикла;
		Если БиблиотекаПолноеИмя <> "" И НастроитьВариантыОтчетов_Тело <> "" Тогда
			НастроитьВариантыОтчетов_Тело =
				НастроитьВариантыОтчетов_Тело
				+ СимволыПСТаб + "// Конец " + СтрЗаменить(БиблиотекаПолноеИмя, "Подсистема.", "")
				+ СимволыПСТаб
				+ СимволыПСТаб;
		КонецЕсли;
		
		ПереопределяемыйМодульПолноеИмя = ВыгрузкаМодулейКаталог + "ОбщийМодуль.ВариантыОтчетовПереопределяемый.Модуль.txt";
		ЧтениеТекста = Новый ЧтениеТекста(ПереопределяемыйМодульПолноеИмя, КодировкаМодулей);
		ПереопределяемыйМодульТекст = ЧтениеТекста.Прочитать();
		ЧтениеТекста = Неопределено;
		
		Позиция1 = СтрНайти(ПереопределяемыйМодульТекст, "Процедура НастроитьВариантыОтчетов(Настройки) Экспорт");
		Остаток = Сред(ПереопределяемыйМодульТекст, Позиция1 + СтрДлина("Процедура НастроитьВариантыОтчетов(Настройки) Экспорт"));
		Позиция2 = СтрНайти(Остаток, "КонецПроцедуры");
		
		НастроитьВариантыОтчета_БывшееТело = СокрЛП(Лев(Остаток, Позиция2 - 1));
		Если Не ПустаяСтрока(НастроитьВариантыОтчета_БывшееТело) Тогда
			НастроитьВариантыОтчета_БывшееТело = (
				СимволыПСТаб + "// " + Пояснение() + ": Удалить устаревшее содержимое процедуры ""до расстановки фрагментов кода"":"
				+ СимволыПСТаб + "//       (не удалено чтобы при необходимости было легче восстановить стиль оформления):"
				+ СимволыПСТаб + "//" + СтрЗаменить(НастроитьВариантыОтчета_БывшееТело, СимволыПСТаб, СимволыПСТаб + "//"));
		КонецЕсли;
		
		ПереопределяемыйМодульТекст =
			Лев(ПереопределяемыйМодульТекст, Позиция1 - 1)
			+ "Процедура НастроитьВариантыОтчетов(Настройки) Экспорт"
			+ СимволыПСТаб + НастроитьВариантыОтчетов_Тело
			+ НастроитьВариантыОтчета_БывшееТело
			+ Символы.ПС + Сред(Остаток, Позиция2);
		
		ЗаписьТекста = Новый ЗаписьТекста(ПереопределяемыйМодульПолноеИмя, КодировкаМодулей);
		ЗаписьТекста.Записать(ПереопределяемыйМодульТекст);
		ЗаписьТекста = Неопределено;
	КонецЕсли;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьТекстыМодулейПрочитатьПараметрыСервер()
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьОтчетыВместоВариантов", ВариантыОтчетов.ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов);
	Результат.Вставить("ДоступныеПериодыОтчета", Новый Соответствие);
	Для Каждого ЗначениеПеречисленияМетаданные Из Метаданные.Перечисления.ДоступныеПериодыОтчета.ЗначенияПеречисления Цикл
		Имя = ЗначениеПеречисленияМетаданные.Имя;
		Результат.ДоступныеПериодыОтчета.Вставить(Имя, Перечисления.ДоступныеПериодыОтчета[Имя]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция КодМногострочногоТекста(МногострочныйТекст, Локализация)
	Результат = МногострочныйТекст;
	Результат = СтрЗаменить(Результат, """", """"""); // Заменить 1 кавычку в тексте на 2.
	Если Локализация Тогда
		Результат = "НСтр(""ru = '" + Результат + "'"")"; // Заключить всю строку в 1 кавычку.
	Иначе
		Результат = """" + Результат + """"; // Заключить всю строку в 1 кавычку.
	КонецЕсли;
	Если СтрЧислоСтрок(Результат) > 1 Тогда
		Результат = СтрЗаменить(Результат, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб + "|");
		Результат = Символы.ПС + Символы.Таб + Символы.Таб + Результат;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ТелоПроцедуры(ТекстМодуля, УсловияПоиска)
	Результат = Новый Структура("ТекстМодуля, БывшееТело");
	
	ВставляемыйФрагмент = УсловияПоиска.Заглушка;
	
	Для НомерУровня = 1 По УсловияПоиска.УровниКоличество Цикл
		УровеньПоиска = УсловияПоиска.Уровни[НомерУровня-1];
		
		Позиция = СтрНайти(ТекстМодуля, УровеньПоиска.Объявление);
		Если Позиция = 0 Тогда // Накопление вставляемого фрагмента.
			ВставляемыйФрагмент =
				?(УровеньПоиска.Комментарий = "", "", УровеньПоиска.Комментарий + Символы.ПС)
				+ УровеньПоиска.Объявление
				+ ?(НомерУровня = 1, ВставляемыйФрагмент, Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС)
				+ УровеньПоиска.Завершение;
			Продолжить;
		КонецЕсли;
		
		// Найдено!
		Если НомерУровня = 1 Тогда // Сама процедура.
			Остаток = Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина);
			ПозицияЗавершения = СтрНайти(Остаток, УровеньПоиска.Завершение);
			
			Результат.БывшееТело = Лев(Остаток, ПозицияЗавершения - 1);
			Результат.ТекстМодуля =
				Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
				+ ВставляемыйФрагмент
				+ Сред(Остаток, ПозицияЗавершения);
		Иначе // Место, куда ее вставлять.
			Результат.БывшееТело = "";
			Результат.ТекстМодуля =
				Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
				+ Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС
				+ Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина);
		КонецЕсли;
		
		Возврат Результат;
	КонецЦикла;
	
	Результат.БывшееТело = "";
	Результат.ТекстМодуля = СокрЛП(ВставляемыйФрагмент + Символы.ПС + Символы.ПС + ТекстМодуля);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УдалитьПроцедуруИлиФункцию(ТекстМодуля, Объявление, Завершение)
	ПозицияНачала = СтрНайти(ТекстМодуля, Объявление);
	Если ПозицияНачала = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Остаток = Сред(ТекстМодуля, ПозицияНачала);
	ПозицияОкончания = СтрНайти(Остаток, Завершение);
	Если ПозицияОкончания = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск первого символа комментария к объявлению.
	КодСимволаПС = КодСимвола(Символы.ПС);
	ПредыдущийСимволБылКомментарием = Истина;
	ПозицияНачала = ПозицияНачала - 1;
	Для ОбратныйНомер = -ПозицияНачала По -1 Цикл
		КодСимвола = КодСимвола(ТекстМодуля, -ОбратныйНомер);
		Если КодСимвола = 10 И Не ПредыдущийСимволБылКомментарием Тогда
			Прервать; // 10 Соответствует Символы.ПС.
		КонецЕсли;
		ПредыдущийСимволБылКомментарием = (КодСимвола = 47); // 47 соответствует "/".
	КонецЦикла;
	ПозицияНачала = -ОбратныйНомер - 1;
	Пока КодСимвола(ТекстМодуля, ПозицияНачала - 1) = 10 И ПозицияНачала > 1 Цикл
		ПозицияНачала = ПозицияНачала - 1;
	КонецЦикла;
	
	ПозицияОкончания = ПозицияОкончания + СтрДлина(Завершение);
	Пока КодСимвола(ТекстМодуля, ПозицияОкончания) = 10 Цикл
		ПозицияОкончания = ПозицияОкончания + 1;
	КонецЦикла;
	
	ТекстМодуля = Лев(ТекстМодуля, ПозицияНачала) + Сред(Остаток, ПозицияОкончания);
КонецПроцедуры

&НаКлиенте
Функция НастроитьВариантыОтчета_УсловияПоиска()
	УровниПоиска = Новый Массив;
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Объявление = "Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = "КонецПроцедуры";
	УровеньПоиска.Комментарий =
		"// Настройки размещения в панели отчетов.
		|//
		|// Параметры:
		|//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
		|//       см. описание к ВариантыОтчетов.ДеревоПредопределенных()
		|//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
		|//       см. ""Реквизиты для изменения"" функции ВариантыОтчетов.ДеревоПредопределенных().
		|//
		|// Описание:
		|//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
		|//
		|// Вспомогательные методы:
		|//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, ""<ИмяВарианта>"");
		|//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет поддерживает только этот режим.
		|//";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Объявление = "#Область СлужебныйПрограммныйИнтерфейс";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = "#КонецОбласти";
	УровеньПоиска.Комментарий = "";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Объявление = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = "#КонецЕсли";
	УровеньПоиска.Комментарий = "";
	УровниПоиска.Добавить(УровеньПоиска);
	
	НастроитьВариантыОтчета_Поиск = Новый Структура;
	НастроитьВариантыОтчета_Поиск.Вставить("Уровни", УровниПоиска);
	НастроитьВариантыОтчета_Поиск.Вставить("УровниКоличество", УровниПоиска.Количество());
	НастроитьВариантыОтчета_Поиск.Вставить("Заглушка", Символы.ПС + Символы.Таб + "// НастроитьВариантыОтчета_Тело" + Символы.ПС);
	
	Возврат НастроитьВариантыОтчета_Поиск;
КонецФункции

&НаКлиенте
Функция ОпределитьНастройкиФормы_УсловияПоиска()
	УровниПоиска = Новый Массив;
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Объявление = "Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = "КонецПроцедуры";
	УровеньПоиска.Комментарий =
		"// Настройки общей формы отчета подсистемы ""Варианты отчетов"".
		|//
		|// Параметры:
		|//   Форма - УправляемаяФорма - Форма отчета.
		|//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
		|//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
		|//";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Объявление = "#Область СлужебныйПрограммныйИнтерфейс";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = "#КонецОбласти";
	УровеньПоиска.Комментарий = "";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура("Объявление, ОбъявлениеДлина, Завершение, Комментарий");
	УровеньПоиска.Объявление = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = "#КонецЕсли";
	УровеньПоиска.Комментарий = "";
	УровниПоиска.Добавить(УровеньПоиска);
	
	НастроитьВариантыОтчета_Поиск = Новый Структура;
	НастроитьВариантыОтчета_Поиск.Вставить("Уровни", УровниПоиска);
	НастроитьВариантыОтчета_Поиск.Вставить("УровниКоличество", УровниПоиска.Количество());
	НастроитьВариантыОтчета_Поиск.Вставить("Заглушка", Символы.ПС + Символы.Таб + "// ОпределитьНастройкиФормы_Тело" + Символы.ПС);
	
	Возврат НастроитьВариантыОтчета_Поиск;
КонецФункции

&НаКлиенте
Функция ЗначениеВКод(Значение)
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат КодМногострочногоТекста(Значение, СтрНайти(Значение, " ") > 0);
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Возврат Формат(Значение, "БЛ=Ложь; БИ=Истина");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧН=; ЧГ=");
	Иначе
		Возврат Строка(Значение);
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Пояснение()
	Возврат Символ(84) + Символ(79) + Символ(68)+ Символ(79);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка модулей.

&НаКлиенте
Функция ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр("ru = 'Загрузка текстов модулей'"));
	
	#Если НЕ ВебКлиент Тогда
	Кавычка = """";
	
	КаталогBIN = КаталогПрограммы();
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	
	КодВозврата = NULL;
	ЗапуститьПриложение(Кавычка + КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString " + Кавычка + ПутьККонфигурации + Кавычка
		+ " /N "                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
		+ " /P "                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
		+ " /LoadConfigFiles "    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
		+ " -Module"
		+ " -AllWritable"
		,
		,
		Истина,
		КодВозврата);
	//	/LoadConfigFiles <каталог загрузки> [-Module] [-Template] [-Help] [-AllWritable] - загрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог загрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости загрузки модулей;
	//		Template - признак необходимости загрузки шаблонов;
	//		Help - признак необходимости загрузки справочной информации;
	//		AllWritable - признак загрузки свойств только доступных для записи объектов.
	//	Если команда пакетного режима запуска прошла успешно, возвращает код возврата 0, в противном случае  - 1 (101, если
	//	в данных имеются ошибки).
	
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ручные шаги.

&НаКлиенте
Функция ПоказатьРучныеДействия(ВыборПользователя, Сценарий)
	ПоказатьПредупреждение(,
		НСтр("ru = 'Расстановка фрагментов кода успешно завершена.
		|Для просмотра изменений в конфигурации нажмите:
		|  ""Конфигурация"" - ""Конфигурация базы данных"" - ""Сравнить, объединить с конфигурацией БД"".
		|В частности - см. изменения в модуле ВариантыОтчетовПереопределяемый и модулях отчетов.'"));
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запуск конфигуратора.

&НаКлиенте
Функция ОткрытьКонфигуратор(ВыборПользователя, Сценарий)
	Состояние(НСтр("ru = 'Запуск конфигуратора'"));
	
	#Если НЕ ВебКлиент Тогда
	ЗапуститьПриложение(Кавычка + КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString " + Кавычка + ПутьККонфигурации + Кавычка
		+ " /N "                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
		+ " /P "                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка);
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

&НаКлиенте
Функция ПолноеИмяФормы(КраткоеИмяФормы)
	ПозицияТочки = СтрНайти(ИмяФормы, ".");
	ЭтотОбъектВид = Лев(ИмяФормы, ПозицияТочки - 1);
	Остаток = Сред(ИмяФормы, ПозицияТочки + 1);
	
	ПозицияТочки = СтрНайти(Остаток, ".");
	ЭтотОбъектТип = Лев(Остаток, ПозицияТочки - 1);
	
	Возврат ЭтотОбъектВид + "." + ЭтотОбъектТип + ".Форма." + КраткоеИмяФормы;
КонецФункции

#КонецОбласти
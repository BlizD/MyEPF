{3,
{42,0,0,60,0,1,0,1,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Расстановка фрагментов кода для перехода на версию 2.2.3 (подсистема Варианты отчетов)"}
},0,0,1,1,1,0,0,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{117,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0,02023637-7868-4a5f-8576-835a76e0c9ba}
},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{127,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаВнедритьПодсистему",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{128,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВнедритьПодсистемуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{115,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ФормаЗапуститьКонфигуратор",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{116,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗапуститьКонфигураторРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{118,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"Группа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{129,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ВыгрузкаМодулейКаталог",1,0,
{1,0},
{1,0},
{1,
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ВыгрузкаМодулейКаталогНачалоВыбора",0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ВыгрузкаМодулейКаталогПриИзменении",0,0},1,
{21,
{130,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгрузкаМодулейКаталогКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{131,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгрузкаМодулейКаталогРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{124,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ДобавитьТекущиеНастройкиИзПредприятия",4,0,
{1,0},
{1,0},
{1,
{17}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{125,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДобавитьТекущиеНастройкиИзПредприятияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,7,1,
{10,
{126,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДобавитьТекущиеНастройкиИзПредприятияРасширеннаяПодсказка",
{1,1,
{"ru","К настройкам размещения, заданным в Конфигураторе, 
будут добавлены настройки размещения, заданные в Предприятии."}
},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,1,
{"ru","К настройкам размещения, заданным в Конфигураторе, 
будут добавлены настройки размещения, заданные в Предприятии."}
},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{138,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,5,"ГруппаСлужебныеПараметры",
{1,1,
{"ru","Служебные параметры"}
},
{1,1,
{"ru","Группа служебные параметры"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,1,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{132,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ВыгружатьМодули",4,0,
{1,0},
{1,0},
{1,
{15}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{133,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыгружатьМодулиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{134,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыгружатьМодулиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{135,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ЗагружатьМодули",4,0,
{1,0},
{1,0},
{1,
{18}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{136,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ЗагружатьМодулиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{137,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагружатьМодулиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{140,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"РежимОтладки",4,0,
{1,0},
{1,0},
{1,
{14}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{141,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"РежимОтладкиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{142,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"РежимОтладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},0,0,1,
{10,
{139,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСлужебныеПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0},"////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеАктуальны = НЕ КонфигурацияБазыДанныхИзмененаДинамически() И НЕ КонфигурацияИзменена();
	
	РежимОтладки = Ложь;
	ВыгружатьМодули = Истина;
	ЗагружатьМодули = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Работа с текстами конфигурации в веб-клиенте не возможна.'""));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
		Кавычка = """""""";
		КаталогBIN = КаталогПрограммы();
		ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
		ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборКаталога = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Каталог = Элемент.ТекстРедактирования;
	ВыборКаталога.Заголовок = НСтр(""ru = 'Каталог выгрузки/загрузки модулей'"");
	Если ВыборКаталога.Выбрать() Тогда
		ВыгрузкаМодулейКаталог = ВыборКаталога.Каталог;
		ВыгрузкаМодулейКаталогПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаМодулейКаталогПриИзменении(Элемент)
	Слеш = ПолучитьРазделительПути();
	Если Не СтрЗаканчиваетсяНа(ВыгрузкаМодулейКаталог, Слеш) Тогда
		ВыгрузкаМодулейКаталог = ВыгрузкаМодулейКаталог + Слеш;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВнедритьПодсистему(Команда)
	ВыполнитьСценарий(Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигуратор(Команда)
	ОткрытьКонфигуратор(Неопределено, Неопределено);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка / Загрузка текстов модулей.

&НаКлиенте
Процедура ВыполнитьСценарий(ВыборПользователя, Сценарий) Экспорт
	// Плюсы сценарного выполнения:
	//   Изоляция обработчиков.
	//     Текущий шаг может ничего не знать о следующем или предыдущем шаге.
	//   Единый обработчик оповещения.
	//     Избавляет от необходимости ""разворачивать"" стек в обратную сторону
	//     после закрытия диалога с пользователем.
	//   Удобная группировка кода.
	//     Код, вызывающий диалог и обрабатывающий ответ располагаются в одной функции.
	//   Простая последовательность шагов.
	//   Удобное отключение шагов.
	
	Если Сценарий = Неопределено Тогда
		Сценарий = Новый Структура;
		Сценарий.Вставить(""Шаги"", Новый Массив);
		Сценарий.Шаги.Добавить(""ПроверитьКонфигурацияИзменена"");
		Сценарий.Шаги.Добавить(""ПроверитьСоединения"");
		Сценарий.Шаги.Добавить(""ПроанализироватьНастройкиРазработчика"");
		Сценарий.Шаги.Добавить(""ПроанализироватьНастройкиАдминистратора"");
		Сценарий.Шаги.Добавить(""ВыбратьНастройкиАдминистратора"");
		Сценарий.Шаги.Добавить(""ВвестиЛогинПароль"");
		Сценарий.Шаги.Добавить(""ВыгрузитьТекстыМодулей"");
		Сценарий.Шаги.Добавить(""ИзменитьТекстыМодулей"");
		Сценарий.Шаги.Добавить(""ЗагрузитьТекстыМодулей"");
		Сценарий.Шаги.Добавить(""ОткрытьКонфигуратор"");
		Сценарий.Шаги.Добавить(""ПоказатьРучныеДействия"");
		Сценарий.Вставить(""ШагиВГраница"", Сценарий.Шаги.ВГраница());
		Сценарий.Вставить(""СледующийШагИндекс"", 0);
		Сценарий.Вставить(""ТекущийШаг"", Неопределено);
		Сценарий.Вставить(""ТекущийШагУточнение"", """");
		Сценарий.Вставить(""БылаОстановка"", Ложь);
		Сценарий.Вставить(""Обработчик"", Новый ОписаниеОповещения(""ВыполнитьСценарий"", ЭтотОбъект, Сценарий));
		НайтиСледующийШаг(Сценарий);
	КонецЕсли;
	
	Пока ВыполнитьШаг(ВыборПользователя, Сценарий) Цикл
		Если Не НайтиСледующийШаг(Сценарий) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция НайтиСледующийШаг(Сценарий)
	Если Сценарий.СледующийШагИндекс > Сценарий.ШагиВГраница Тогда
		Возврат Ложь;
	КонецЕсли;
	Сценарий.ТекущийШаг = Сценарий.Шаги.Получить(Сценарий.СледующийШагИндекс);
	Сценарий.ТекущийШагУточнение = """";
	Сценарий.СледующийШагИндекс = Сценарий.СледующийШагИндекс + 1;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ВыполнитьШаг(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШаг = ""ПроверитьКонфигурацияИзменена"" Тогда
		Возврат ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ВвестиЛогинПароль"" Тогда
		Возврат ВвестиЛогинПароль(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПроверитьСоединения"" Тогда
		Возврат ПроверитьСоединения(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ВыгрузитьТекстыМодулей"" Тогда
		Возврат ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПроанализироватьНастройкиРазработчика"" Тогда
		Возврат ПроанализироватьНастройкиРазработчика(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПроанализироватьНастройкиАдминистратора"" Тогда
		Возврат ПроанализироватьНастройкиАдминистратора(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПроанализироватьТекстыВКаталоге"" Тогда
		Возврат ПроанализироватьТекстыВКаталоге(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ВыбратьНастройкиАдминистратора"" Тогда
		Возврат ВыбратьНастройкиАдминистратора(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ИзменитьТекстыМодулей"" Тогда
		Возврат ИзменитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ЗагрузитьТекстыМодулей"" Тогда
		Возврат ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ПоказатьРучныеДействия"" Тогда
		Возврат ПоказатьРучныеДействия(ВыборПользователя, Сценарий);
	
	ИначеЕсли Сценарий.ТекущийШаг = ""ОткрытьКонфигуратор"" Тогда
		Возврат ОткрытьКонфигуратор(ВыборПользователя, Сценарий);
	
	КонецЕсли;
	
	// Альтернативы этим веткам условий:
	//  ""Вычислить()"" - неприемлемо использовать только для минимизации кода;
	//  ""ВыполнитьОбработкуОповещения()"" - не выгодно, т.к. поддерживаются только процедуры,
	//      а следовательно следующий шаг придется запускать из предыдущего шага;
	//      Т.е. исчезает такой большой плюс как изоляция обработчиков от асинхронной логики.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка модифицированности конфигурации.

&НаКлиенте
Функция ПроверитьКонфигурацияИзменена(ВыборПользователя, Сценарий)
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		Если МетаданныеАктуальны Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр(""ru = 'Основная конфигурация отличается от конфигурации базы данных.
		|Перед запуском обработки по расстановке фрагментов кода
		|рекомендуется обновить конфигурацию базы данных.'"");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(""ИгнорироватьИзменения"", НСтр(""ru = 'Пропустить'""));
		Кнопки.Добавить(""ЗакрытьПрограмму"",      НСтр(""ru = 'Закрыть программу'""));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 60, ""ИгнорироватьИзменения""); // 
		
		Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = ""ЗакрытьПрограмму"" Тогда
			// Дождавшись завершения сценария инициировать завершение сеанса.
			ПодключитьОбработчикОжидания(""ЗакрытьПрограмму"", 0.1, Истина);
			Возврат Ложь; // Отменить сценарий.
		ИначеЕсли ВыборПользователя = ""ИгнорироватьИзменения"" Тогда
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПрограмму()
	ЗавершитьРаботуСистемы(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ввод логина и пароля

&НаКлиенте
Функция ВвестиЛогинПароль(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		ПолноеИмяФормы = ПолноеИмяФормы(""ПараметрыАвторизации"");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""Пользователь"", ВыгрузкаМодулейПользователь);
		ПараметрыФормы.Вставить(""Пароль"", ВыгрузкаМодулейПароль);
		
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, , , , Сценарий.Обработчик);
		
		Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ТипЗнч(ВыборПользователя) = Тип(""Структура"") Тогда
			ВыгрузкаМодулейПользователь = ВыборПользователя.Пользователь;
			ВыгрузкаМодулейПароль       = ВыборПользователя.Пароль;
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соединения, которые могут препятствовать выгрузке.

&НаКлиенте
Функция ПроверитьСоединения(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		Если МожноВыгрузитьМодули() Тогда
			Возврат Истина; // Продолжить сценарий.
		КонецЕсли;
		
		ТекстВопроса = НСтр(""ru = 'Для выгрузки текстов модулей конфигурации необходимо
		|закрыть конфигуратор и другие соединения,
		|которые могут препятствовать выгрузке.
		|Текущий сеанс завершать не нужно.'"");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 15, КодВозвратаДиалога.Повторить, , КодВозвратаДиалога.Повторить);
		
		Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
		Возврат Ложь; // Приостановить сценарий.
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь; // Отменить сценарий.
		Иначе
			Сценарий.ТекущийШагУточнение = """";
			Возврат ПроверитьСоединения(ВыборПользователя, Сценарий); // Повторная проверка.
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноВыгрузитьМодули()
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ""DESIGNER"" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выгрузка модулей.

&НаКлиенте
Функция ВыгрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Если Не ВыгружатьМодули Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Очистка каталога выгрузки'""));
	
	Если ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
		УдалитьФайлы(Лев(ВыгрузкаМодулейКаталог, СтрДлина(ВыгрузкаМодулейКаталог) - 1));
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Выгрузка текстов модулей'""));
	
	#Если НЕ ВебКлиент Тогда
		Если Не ЗначениеЗаполнено(ВыгрузкаМодулейКаталог) Тогда
			ВыгрузкаМодулейКаталог = ПолучитьИмяВременногоФайла(""CodeUnload"") + ""\"";
			СоздатьКаталог(ВыгрузкаМодулейКаталог);
		КонецЕсли;
	#КонецЕсли
	
	КодВозврата = NULL;
	ЗапуститьПриложение(Кавычка + КаталогBIN + ""1cv8.exe"" + Кавычка + "" DESIGNER""
		+ "" /IBConnectionString "" + Кавычка + ПутьККонфигурации + Кавычка
		+ "" /N ""                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
		+ "" /P ""                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
		+ "" /DumpConfigFiles ""    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
		+ "" -Module""
		,
		,
		Истина,
		КодВозврата);
	//	/DumpConfigFiles <каталог выгрузки> [-Module] [-Template] [-Help] [-AllWritable] - выгрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог выгрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости выгрузки модулей;
	//		Template - признак необходимости выгрузки шаблонов;
	//		Help - признак необходимости выгрузки справочной информации;
	//		AllWritable - признак выгрузки свойств только доступных для записи объектов.
	
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки разработчика.

&НаКлиенте
Функция ПроанализироватьНастройкиРазработчика(ВыборПользователя, Сценарий)
	
	Состояние(НСтр(""ru = 'Анализ настроек, заданных в Конфигураторе'""));
	ПроанализироватьНастройкиРазработчикаСервер();
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

&НаСервере
Процедура ПроанализироватьНастройкиРазработчикаСервер()
	НастройкиОтчетов.Очистить();
	НастройкиВариантов.Очистить();
	
	ОтчетовПодключено = 0;
	ОтчетовВсего = Метаданные.Отчеты.Количество();
	
	ПодсистемыОтчетов = ВариантыОтчетов.РазмещениеОтчетовВПодсистемах();
	ПодсистемыОтчетов.Колонки.Добавить(""ПодсистемаПолноеПредставление"", Новый ОписаниеТипов(""Строка""));
	
	СоставБиблиотек = Новый Соответствие;
	Для Каждого РазделМетаданные Из Метаданные.Подсистемы Цикл
		Если Не РазделМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			ЗарегистрироватьСоставПодсистемы(СоставБиблиотек, РазделМетаданные, """");
		КонецЕсли;
	КонецЦикла;
	
	// Регистрация текущих настроек, заданных разработчиком.
	ДеревоВариантов = ВариантыОтчетов.ДеревоПредопределенных();
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		ИмяОтчета = СтрокаОтчет.Метаданные.Имя;
		
		// Технологическая подсистема.
		НастройкиПодсистемы = СоставБиблиотек.Получить(СтрокаОтчет.Метаданные);
		Если НастройкиПодсистемы = Неопределено Тогда
			БиблиотекаПолноеИмя = ""НеВходящиеВСоставБиблиотек"";
		Иначе
			БиблиотекаПолноеИмя = НастройкиПодсистемы.ПолноеИмя;
		КонецЕсли;
		
		// Интерфейсные подсистемы.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура(""ОтчетМетаданные"", СтрокаОтчет.Метаданные));
		Если Найденные.Количество() = 0 Тогда
			ИнтерфейснаяПодсистема = """"; // НСтр(""ru = 'Не входящие в состав командного интерфейса'"");
		Иначе
			НайденнаяСтрока = Найденные[0];
			ИнтерфейснаяПодсистема = НайденнаяСтрока.ПодсистемаПолноеПредставление;
			Если ИнтерфейснаяПодсистема = """" Тогда
				ПодсистемаМетаданные = НайденнаяСтрока.ПодсистемаМетаданные;
				Пока Истина Цикл
					Если ИнтерфейснаяПодсистема = """" Тогда
						ИнтерфейснаяПодсистема = ПодсистемаМетаданные.Представление();
					Иначе
						ИнтерфейснаяПодсистема = ПодсистемаМетаданные.Представление() + "" / "" + ИнтерфейснаяПодсистема;
					КонецЕсли;
					ПодсистемаМетаданные = ПодсистемаМетаданные.Родитель();
					Если ТипЗнч(ПодсистемаМетаданные) <> Тип(""ОбъектМетаданных"") Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				НайденнаяСтрока.ПодсистемаПолноеПредставление = ИнтерфейснаяПодсистема;
			КонецЕсли;
		КонецЕсли;
		
		// Старые настройки формы.
		ДобавитьНастройкиФормы = Ложь;
		НастройкиФормы = Неопределено;
		Если Не СтрокаОтчет.ОпределитьНастройкиФормы Тогда
			Попытка
				ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
				Если ОтчетОбъект.ВерсияСтандартныхФункцийОтчетов() = ""1"" Тогда
					СтарыеНастройкиФормы = ОтчетОбъект.ПолучитьНастройкиОтчета();
					НастройкиФормы = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
					ЗаполнитьЗначенияСвойств(НастройкиФормы, СтарыеНастройкиФормы);
					НастройкиФормы.Печать = СтарыеНастройкиФормы.ПараметрыПечатиПоУмолчанию;
					Для Каждого КлючИЗначение Из СтарыеНастройкиФормы.СоответствиеПериодичностиПараметров Цикл
						НастройкиФормы.Периодичность.Минимальная = КлючИЗначение.Значение;
					КонецЦикла;
					ДобавитьНастройкиФормы = Истина;
				КонецЕсли;
			Исключение
				НастройкиФормы = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		// Запись в данные формы.
		СтрокаОтчетИзФормы = НастройкиОтчетов.Добавить();
		СтрокаОтчетИзФормы.ИмяОтчета = ИмяОтчета;
		СтрокаОтчетИзФормы.БиблиотекаПолноеИмя     = БиблиотекаПолноеИмя;
		СтрокаОтчетИзФормы.ПодсистемаПредставление = ИнтерфейснаяПодсистема;
		СтрокаОтчетИзФормы.ГруппироватьПоОтчету    = СтрокаОтчет.ГруппироватьПоОтчету;
		СтрокаОтчетИзФормы.ОпределитьНастройкиФормы = СтрокаОтчет.ОпределитьНастройкиФормы Или ДобавитьНастройкиФормы;
		СтрокаОтчетИзФормы.ДобавитьНастройкиФормы   = ДобавитьНастройкиФормы;
		СтрокаОтчетИзФормы.НастройкиФормы           = НастройкиФормы;
		
		ПодсистемыОтчета = ПодсистемыОтчетов.НайтиСтроки(Новый Структура(""ОтчетМетаданные"", СтрокаОтчет.Метаданные));
		
		// Варианты отчета.
		ДобавитьСамОтчет = Истина;
		Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
			ДобавитьСамОтчет = Ложь;
			ВариантыОтчетов.ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
			
			ВариантРазмещение = Новый Соответствие; // Отличие от оригинала: в ключе хранится полное имя (для сериализуемости).
			Для Каждого СтрокаПодсистема Из ПодсистемыОтчета Цикл
				ПодсистемаВажность = СтрокаВариант.Размещение.Получить(СтрокаПодсистема.ПодсистемаМетаданные);
				Если ПодсистемаВажность = Неопределено Тогда
					ПодсистемаВажность = ""Удален"";
				Иначе
					СтрокаВариант.Размещение.Удалить(СтрокаПодсистема.ПодсистемаМетаданные);
				КонецЕсли;
				ВариантРазмещение.Вставить(СтрокаПодсистема.ПодсистемаПолноеИмя, ПодсистемаВажность);
			КонецЦикла;
			Для Каждого КлючИЗначение Из СтрокаВариант.Размещение Цикл
				ПодсистемаВажность = КлючИЗначение.Значение;
				Если ПодсистемаВажность = """" Тогда
					ПодсистемаВажность = ""Добавлен"";
				КонецЕсли;
				ВариантРазмещение.Вставить(КлючИЗначение.Ключ.ПолноеИмя(), ПодсистемаВажность);
			КонецЦикла;
			
			НастройкиВарианта = Новый Структура;
			НастройкиВарианта.Вставить(""Наименование"", СтрокаВариант.Наименование);
			НастройкиВарианта.Вставить(""Описание"",     СтрокаВариант.Описание);
			НастройкиВарианта.Вставить(""Включен"",      СтрокаВариант.Включен);
			НастройкиВарианта.Вставить(""ВидимостьПоУмолчанию"", СтрокаВариант.ВидимостьПоУмолчанию);
			НастройкиВарианта.Вставить(""ФункциональныеОпции"",  СтрокаВариант.ФункциональныеОпции);
			НастройкиВарианта.Вставить(""НастройкиДляПоиска"",   СтрокаВариант.НастройкиДляПоиска);
			НастройкиВарианта.Вставить(""Размещение"", ВариантРазмещение);
			НастройкиВарианта.Вставить(""Основной"",   СтрокаВариант = СтрокаОтчет.ОсновнойВариант);
			
			// Запись в данные формы.
			СтрокаВариантИзФормы = НастройкиВариантов.Добавить();
			СтрокаВариантИзФормы.ИмяОтчета    = ИмяОтчета;
			СтрокаВариантИзФормы.КлючВарианта = СтрокаВариант.КлючВарианта;
			СтрокаВариантИзФормы.Настройки    = НастройкиВарианта;
			
		КонецЦикла;
		
		Если ДобавитьСамОтчет Тогда
			
			ОтчетРазмещение = Новый Соответствие; // Отличие от оригинала: в ключе хранится полное имя (для сериализуемости).
			Для Каждого СтрокаПодсистема Из ПодсистемыОтчета Цикл
				ПодсистемаВажность = СтрокаВариант.Размещение.Получить(СтрокаПодсистема.ПодсистемаМетаданные);
				Если ПодсистемаВажность = Неопределено Тогда
					ПодсистемаВажность = ""Удален"";
				Иначе
					СтрокаВариант.Размещение.Удалить(СтрокаПодсистема.ПодсистемаМетаданные);
				КонецЕсли;
				ОтчетРазмещение.Вставить(СтрокаПодсистема.ПодсистемаПолноеИмя, ПодсистемаВажность);
			КонецЦикла;
			Для Каждого КлючИЗначение Из СтрокаВариант.Размещение Цикл
				ПодсистемаВажность = КлючИЗначение.Значение;
				Если ПодсистемаВажность = """" Тогда
					ПодсистемаВажность = ""Добавлен"";
				КонецЕсли;
				ОтчетРазмещение.Вставить(КлючИЗначение.Ключ.ПолноеИмя(), ПодсистемаВажность);
			КонецЦикла;
			
			ОтчетРазмещение = Новый Соответствие;
			Для Каждого КлючИЗначение Из СтрокаОтчет.Размещение Цикл
				ПодсистемаМетаданные = КлючИЗначение.Ключ;
				ПодсистемаВажность = КлючИЗначение.Значение;
				// Пропуск настроек ""по умолчанию"".
				Если ПодсистемаВажность = """" Тогда
					Поиск = Новый Структура(""ОтчетМетаданные, ПодсистемаМетаданные"", СтрокаОтчет.Метаданные, ПодсистемаМетаданные);
					Найденные = ПодсистемыОтчетов.НайтиСтроки(Поиск);
					Если Найденные.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ОтчетРазмещение.Вставить(ПодсистемаМетаданные.ПолноеИмя(), ПодсистемаВажность);
			КонецЦикла;
			
			НастройкиВарианта = Новый Структура;
			НастройкиВарианта.Вставить(""Наименование"", СтрокаОтчет.Наименование);
			НастройкиВарианта.Вставить(""Описание"",     СтрокаОтчет.Описание);
			НастройкиВарианта.Вставить(""Включен"",      СтрокаОтчет.Включен);
			НастройкиВарианта.Вставить(""ВидимостьПоУмолчанию"", СтрокаОтчет.ВидимостьПоУмолчанию);
			НастройкиВарианта.Вставить(""ФункциональныеОпции"",  СтрокаОтчет.ФункциональныеОпции);
			НастройкиВарианта.Вставить(""НастройкиДляПоиска"",   СтрокаОтчет.НастройкиДляПоиска);
			НастройкиВарианта.Вставить(""Размещение"", ОтчетРазмещение);
			НастройкиВарианта.Вставить(""Основной"",   Истина);
			
			// Запись в данные формы.
			СтрокаВариантИзФормы = НастройкиВариантов.Добавить();
			СтрокаВариантИзФормы.ИмяОтчета    = ИмяОтчета;
			СтрокаВариантИзФормы.КлючВарианта = """";
			СтрокаВариантИзФормы.Настройки    = НастройкиВарианта;
			
		КонецЕсли;
	КонецЦикла;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	ДеревоВариантов.Колонки.Очистить();
	ДеревоВариантов.Строки.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСоставПодсистемы(Состав, ПодсистемаМетаданные, РодительПредставление)
	НастройкиПодсистемы = Новый Структура;
	НастройкиПодсистемы.Вставить(""Метаданные"", ПодсистемаМетаданные);
	НастройкиПодсистемы.Вставить(""ПолноеИмя"", ПодсистемаМетаданные.ПолноеИмя());
	НастройкиПодсистемы.Вставить(""ПолноеПредставление"", ПодсистемаМетаданные.Представление());
	Если РодительПредставление <> """" Тогда
		НастройкиПодсистемы.ПолноеПредставление = РодительПредставление + "" / "" + НастройкиПодсистемы.ПолноеПредставление;
	КонецЕсли;
	Для Каждого ОбъектМетаданных Из ПодсистемаМетаданные.Состав Цикл
		Состав.Вставить(ОбъектМетаданных, НастройкиПодсистемы);
	КонецЦикла;
	Для Каждого ВложеннаяПодсистема Из ПодсистемаМетаданные.Подсистемы Цикл
		ЗарегистрироватьСоставПодсистемы(Состав, ВложеннаяПодсистема, НастройкиПодсистемы.ПолноеПредставление);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки администратора - чтение.

&НаКлиенте
Функция ПроанализироватьНастройкиАдминистратора(ВыборПользователя, Сценарий)
	
	Если Не ДобавлятьНастройкиАдминистратора Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Анализ настроек, заданных в Предприятии'""));
	ПроанализироватьНастройкиАдминистратораСервер();
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

&НаСервере
Процедура ПроанализироватьНастройкиАдминистратораСервер()
	НастройкиАдминистратора.Очистить();
	
	ТекстЗапроса =
	""ВЫБРАТЬ
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Размещение.(
	|		Использование КАК Использование,
	|		Подсистема КАК Подсистема,
	|		Подсистема.ПолноеИмя КАК ПодсистемаПолноеИмя,
	|		Важный КАК Важный,
	|		СмТакже КАК СмТакже
	|	) КАК Размещение,
	|	ВариантыОтчетов.Описание КАК Описание,
	|	ВариантыОтчетов.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.Пользовательский
	|	И НЕ ВариантыОтчетов.ПометкаУдаления"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	Поиск = Новый Структура(""ИмяОтчета, КлючВарианта"");
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТаблицы);
		Найденные = НастройкиВариантов.НайтиСтроки(Поиск);
		Для Каждого СтрокаВариантИзФормы Из Найденные Цикл
			НастройкиВарианта = СтрокаВариантИзФормы.Настройки;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Описание)
				И СтрокаТаблицы.Описание <> НастройкиВарианта.Описание Тогда
				НастройкиАдминистратораДобавить(СтрокаТаблицы, ""Описание"", Неопределено, Неопределено);
			КонецЕсли;
			Если СтрокаТаблицы.ВидимостьПоУмолчанию <> НастройкиВарианта.ВидимостьПоУмолчанию Тогда
				НастройкиАдминистратораДобавить(СтрокаТаблицы, ""ВидимостьПоУмолчанию"", Неопределено, Неопределено);
			КонецЕсли;
			Для Каждого СтрокаТаблицыРазмещение Из СтрокаТаблицы.Размещение Цикл
				ВажностьИзНастроекРазработчика = НастройкиВарианта.Размещение.Получить(СтрокаТаблицыРазмещение.ПодсистемаПолноеИмя);
				Если Не СтрокаТаблицыРазмещение.Использование Тогда
					ВажностьИзНастроекАдминистратора = ""Удален"";
				ИначеЕсли СтрокаТаблицыРазмещение.Важный Тогда
					ВажностьИзНастроекАдминистратора = ""Важный"";
				ИначеЕсли СтрокаТаблицыРазмещение.СмТакже Тогда
					ВажностьИзНастроекАдминистратора = ""СмТакже"";
				Иначе
					Если ВажностьИзНастроекРазработчика = """" Тогда
						Продолжить;
					КонецЕсли;
					ВажностьИзНастроекАдминистратора = ""Добавлен"";
				КонецЕсли;
				Если ВажностьИзНастроекАдминистратора <> ВажностьИзНастроекРазработчика Тогда
					ДопНастройкаЗначение = Новый Структура;
					ДопНастройкаЗначение.Вставить(""Использование"", СтрокаТаблицыРазмещение.Использование);
					ДопНастройкаЗначение.Вставить(""Подсистема"", СтрокаТаблицыРазмещение.ПодсистемаПолноеИмя);
					ДопНастройкаЗначение.Вставить(""Важность"", ВажностьИзНастроекАдминистратора);
					ДопНастройкаПредставление = СтрокаТаблицыРазмещение.ПодсистемаПолноеИмя;
					Если ВажностьИзНастроекАдминистратора <> """" Тогда
						ДопНастройкаПредставление = ДопНастройкаПредставление + "" ("" + ВажностьИзНастроекАдминистратора + "")"";
					КонецЕсли;
					НастройкиАдминистратораДобавить(СтрокаТаблицы, ""Размещение"", ДопНастройкаЗначение, ДопНастройкаПредставление);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастройкиАдминистратораДобавить(СтрокаТаблицы, Тип, Значение, ПредставлениеЗначения);
	Директива = Новый Структура(""ИмяОтчета, КлючВарианта, Тип"");
	ЗаполнитьЗначенияСвойств(Директива, СтрокаТаблицы);
	Директива.Тип = Тип;
	Если Значение = Неопределено Тогда
		Директива.Вставить(""Значение"", СтрокаТаблицы[Тип]);
		Если ПредставлениеЗначения = Неопределено Тогда
			ПредставлениеЗначения = Строка(Директива.Значение);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Директива, Значение, Истина);
	КонецЕсли;
	ДирективаПредставление = Директива.Тип + "": "" + ПредставлениеЗначения + ""."";
	НастройкиАдминистратора.Добавить(Директива, ДирективаПредставление, Истина);
КонецПроцедуры

&НаКлиенте
Функция ПроанализироватьТекстыВКаталоге(ВыборПользователя, Сценарий)
	
	Возврат Истина; // Продолжить сценарий.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки администратора - выбор и применение.

&НаКлиенте
Функция ВыбратьНастройкиАдминистратора(ВыборПользователя, Сценарий)
	Если Не ДобавлятьНастройкиАдминистратора Тогда
		Возврат Истина; // Продолжить сценарий.
	КонецЕсли;
	
	Если Сценарий.ТекущийШагУточнение = """" Тогда // Первый вызов
		
		Если НастройкиАдминистратора.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр(""ru = 'Настройки размещения, заданные в Предприятии,
			|совпадают с настройками, заданными в Конфигураторе.'"");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(""Продолжить"", НСтр(""ru = 'Продолжить'""));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(Сценарий.Обработчик, ТекстВопроса, Кнопки, 60, ""Продолжить"");
			
			Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"";
			Возврат Ложь; // Приостановить сценарий.
			
		Иначе
			
			ПолноеИмяФормы = ПолноеИмяФормы(""ВыборНастроекАдминистратора"");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить(""НастройкиАдминистратора"", НастройкиАдминистратора);
			
			ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, , , , Сценарий.Обработчик);
			
			Сценарий.ТекущийШагУточнение = ""ОтметкаЭлементов"";
			Возврат Ложь; // Приостановить сценарий.
			
		КонецЕсли;
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ЗаданВопрос"" Тогда // Обработчик ответа на вопрос.
		
		Если ВыборПользователя = ""Продолжить"" Тогда
			Возврат Истина; // Продолжить сценарий.
		Иначе
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
	ИначеЕсли Сценарий.ТекущийШагУточнение = ""ОтметкаЭлементов"" Тогда // Обработчик ответа на вопрос.
		
		Если ТипЗнч(ВыборПользователя) <> Тип(""СписокЗначений"") Тогда
			Возврат Ложь; // Отменить сценарий.
		КонецЕсли;
		
		НастройкиАдминистратора = ВыборПользователя; // Если списки разместились по разным адресам памяти.
		ПрименитьВыбранныеНастройкиАдминистратора();
		
		Возврат Истина; // Продолжить сценарий.
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрименитьВыбранныеНастройкиАдминистратора()
	Поиск = Новый Структура(""ИмяОтчета, КлючВарианта"");
	Для Каждого ЭлементСписка Из НастройкиАдминистратора Цикл
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НастройкаАдминистратора = ЭлементСписка.Значение;
		Если НастройкаАдминистратора.Тип = ""Размещение"" Тогда
			ПодсистемаМетаданные = Метаданные.НайтиПоПолномуИмени(НастройкаАдминистратора.Подсистема);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Поиск, НастройкаАдминистратора);
		Найденные = НастройкиВариантов.НайтиСтроки(Поиск);
		Для Каждого СтрокаВариант Из Найденные Цикл
			Если НастройкаАдминистратора.Тип = ""Описание"" Тогда
				СтрокаВариант.Настройки.Описание = НастройкаАдминистратора.Значение;
			ИначеЕсли НастройкаАдминистратора.Тип = ""ВидимостьПоУмолчанию"" Тогда
				СтрокаВариант.Настройки.ВидимостьПоУмолчанию = НастройкаАдминистратора.Значение;
			ИначеЕсли НастройкаАдминистратора.Тип = ""Размещение"" Тогда
				СтрокаВариант.Настройки.Размещение.Вставить(ПодсистемаМетаданные, НастройкаАдминистратора.Важность);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расстановка фрагментов кода.

&НаКлиенте
Функция ИзменитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр(""ru = 'Изменение текстов модулей'""));
	
	// 1. В модуле менеджера отчета следует найти процедуру НастроитьВариантыОтчета().
	//   Если ее нет:
	//     1.1. Вставить ее в область СлужебныйПрограммныйИнтерфейс.
	//     1.2. В модуле ВариантыОтчетовПереопределяемый следует вставить фрагменты:
	//       ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
	//     1.3. Если были переопределены какие-либо настройки, то :
	//         1.3.1. Добавить ручной шаг:
	//           ""Удалить весь код настройки отчета <ИмяОтчета> из
	//           ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов(), кроме вызова
	//           ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера"".
	//         1.3.2. Также добавить комментарий-напоминание в модуле.
	// 2. Залить новое содержимое процедуры НастроитьВариантыОтчета.
	// 3. Если ранее в модуле объекта отчета была определена функция ВерсияСтандартныхФункцийОтчетов(), тогда:
	//     3.1. Удалить устаревшую функцию ВерсияСтандартныхФункцийОтчетов().
	//     3.2. Прочитать содержимое устаревшей функции ПолучитьНастройкиОтчета().
	//     3.3. Удалить устаревшую функцию ПолучитьНастройкиОтчета().
	//     3.4. Залить новое содержимое функции ОпределитьНастройкиФормы() с настройками.
	
	КодировкаМодулей = КодировкаТекста.UTF8;
	СимволыПСТаб = Символы.ПС + Символы.Таб;
	СтрокаРежимВыводаИстина = ""ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина);"";
	СтрокаРежимВыводаЛожь   = ""ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Ложь);"";
	
	Результат = ИзменитьТекстыМодулейПрочитатьПараметрыСервер();
	ГлобальноГруппироватьПоОтчету = Результат.ВыводитьОтчетыВместоВариантов;
	Перечисление_ДоступныеПериодыОтчета_ПоискИмениПоСсылке = Результат.ДоступныеПериодыОтчета;
	
	НастроитьВариантыОтчета_Поиск = НастроитьВариантыОтчета_УсловияПоиска();
	НастроитьВариантыОтчета_Объявление = НастроитьВариантыОтчета_Поиск.Уровни[0].Объявление;
	ОпределитьНастройкиФормы_Поиск = ОпределитьНастройкиФормы_УсловияПоиска();
	
	ЕстьИзмененияДляОбщегоМодуля = Ложь;
	НастройкиОтчетов.Сортировать(""БиблиотекаПолноеИмя Возр, ПодсистемаПредставление Возр"");
	Для Каждого СтрокаОтчетИзФормы Из НастройкиОтчетов Цикл
		
		////////////////////////////////////////////////////////////////////////////////
		// Модуль менеджера отчета
		
		ОтчетМодульМенеджераПолноеИмя = ВыгрузкаМодулейКаталог + ""Отчет."" + СтрокаОтчетИзФормы.ИмяОтчета + "".МодульМенеджера.txt"";
		ОтчетМодульМенеджераФайл = Новый Файл(ОтчетМодульМенеджераПолноеИмя);
		Если ОтчетМодульМенеджераФайл.Существует() Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ОтчетМодульМенеджераФайл.ПолноеИмя, КодировкаМодулей);
			МодульМенеджера = ЧтениеТекста.Прочитать();
			ЧтениеТекста = Неопределено;
		Иначе
			МодульМенеджера = """";
		КонецЕсли;
		
		// Замена известных альтернативных объявлений процедуры на умолчания.
		МодульМенеджера = СтрЗаменить(МодульМенеджера, ""Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт"", НастроитьВариантыОтчета_Объявление);
		
		Результат = ТелоПроцедуры(МодульМенеджера, НастроитьВариантыОтчета_Поиск);
		МодульМенеджера = Результат.ТекстМодуля;
		НастроитьВариантыОтчета_БывшееТело = Результат.БывшееТело;
		НастроитьВариантыОтчета_Тело = """";
		
		ГруппироватьПоОтчету = Неопределено;
		Если Не ПустаяСтрока(НастроитьВариантыОтчета_БывшееТело) Тогда
			Если СтрНайти(НастроитьВариантыОтчета_БывшееТело, СтрокаРежимВыводаИстина) > 0
				Или СтрНайти(НастроитьВариантыОтчета_БывшееТело, ""НастройкиОтчета.ГруппироватьПоОтчету = Истина;"") > 0 Тогда
				ГруппироватьПоОтчету = Истина;
			ИначеЕсли СтрНайти(НастроитьВариантыОтчета_БывшееТело, СтрокаРежимВыводаЛожь) > 0
				Или СтрНайти(НастроитьВариантыОтчета_БывшееТело, ""НастройкиОтчета.ГруппироватьПоОтчету = Ложь;"") > 0 Тогда
				ГруппироватьПоОтчету = Ложь;
			КонецЕсли;
		Иначе
			ЕстьИзмененияДляОбщегоМодуля = Истина;
			Если СтрокаОтчетИзФормы.ГруппироватьПоОтчету <> ГлобальноГруппироватьПоОтчету Тогда
				ГруппироватьПоОтчету = СтрокаОтчетИзФормы.ГруппироватьПоОтчету;
			КонецЕсли;
		КонецЕсли;
		
		Если ГруппироватьПоОтчету <> Неопределено Тогда
			НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
				+ СимволыПСТаб + ?(ГруппироватьПоОтчету, СтрокаРежимВыводаИстина, СтрокаРежимВыводаЛожь);
		КонецЕсли;
		
		Если СтрокаОтчетИзФормы.ОпределитьНастройкиФормы Тогда
			НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
				+ СимволыПСТаб + ""НастройкиОтчета.ОпределитьНастройкиФормы = Истина;"";
		КонецЕсли;
		
		// Код настройки вариантов.
		Найденные = НастройкиВариантов.НайтиСтроки(Новый Структура(""ИмяОтчета"", СтрокаОтчетИзФормы.ИмяОтчета));
		Для Каждого СтрокаВариантИзФормы Из Найденные Цикл
			НастройкиВарианта = СтрокаВариантИзФормы.Настройки;
			
			НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
				+ СимволыПСТаб
				+ СимволыПСТаб + ""НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, """""" + СтрокаВариантИзФормы.КлючВарианта+ """""");"";
			
			Если Не НастройкиВарианта.Включен Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.Включен = Ложь;"";
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НастройкиВарианта.Описание) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.Описание = "" + КодМногострочногоТекста(НастройкиВарианта.Описание, Истина) + "";"";
			Иначе
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""// "" + Пояснение() + "":""
					+ СимволыПСТаб + ""//   - Либо заполнить описание: НастройкиВарианта.Описание = НСтр(""""ru = ''"""");""
					+ СимволыПСТаб + ""//   - Либо отключить вариант:  НастройкиВарианта.Включен = Ложь;"";
			КонецЕсли;
			
			ВидимостьПоУмолчанию = НастройкиВарианта.Основной Или Не СтрокаОтчетИзФормы.ГруппироватьПоОтчету;
			Если ВидимостьПоУмолчанию <> НастройкиВарианта.ВидимостьПоУмолчанию Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.ВидимостьПоУмолчанию = ""+ ?(НастройкиВарианта.ВидимостьПоУмолчанию, ""Истина"", ""Ложь"") +"";"";
			КонецЕсли;
			
			Для Каждого ИмяФункциональнойОпции Из НастройкиВарианта.ФункциональныеОпции Цикл
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.ФункциональныеОпции.Добавить(""""""+ ИмяФункциональнойОпции +"""""");"";
			КонецЦикла;
			
			Поиск = НастройкиВарианта.НастройкиДляПоиска;
			Если ЗначениеЗаполнено(Поиск.ИменаМакетов) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.НастройкиДляПоиска.ИменаМакетов = "" + КодМногострочногоТекста(Поиск.ИменаМакетов, Ложь) + "";"";
			КонецЕсли;
			Если ЗначениеЗаполнено(Поиск.НаименованияПолей) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.НастройкиДляПоиска.НаименованияПолей = "" + КодМногострочногоТекста(Поиск.НаименованияПолей, Истина) + "";"";
			КонецЕсли;
			Если ЗначениеЗаполнено(Поиск.НаименованияПараметровИОтборов) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = "" + КодМногострочногоТекста(Поиск.НаименованияПараметровИОтборов, Истина) + "";"";
			КонецЕсли;
			Если ЗначениеЗаполнено(Поиск.КлючевыеСлова) Тогда
				НастроитьВариантыОтчета_Тело = НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + ""НастройкиВарианта.НастройкиДляПоиска.КлючевыеСлова = "" + КодМногострочногоТекста(Поиск.КлючевыеСлова, Истина) + "";"";
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из НастройкиВарианта.Размещение Цикл
				ПодсистемаПолноеИмя = КлючИЗначение.Ключ;
				ПодсистемаВажность = КлючИЗначение.Значение;
				Если ПодсистемаВажность = """" Тогда
					Продолжить; // Умолчания.
				ИначеЕсли ПодсистемаВажность = ""Удален"" Тогда
					Код = ""НастройкиВарианта.Размещение.Удалить(%1);"";
				ИначеЕсли ПодсистемаВажность = ""Добавлен"" Тогда
					Код = ""НастройкиВарианта.Размещение.Вставить(%1, """""""");"";
				Иначе
					Код = ""НастройкиВарианта.Размещение.Вставить(%1, """""" + ПодсистемаВажность + """""");"";
				КонецЕсли;
				НастроитьВариантыОтчета_Тело =
					НастроитьВариантыОтчета_Тело
					+ СимволыПСТаб + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Код, ""Метаданные."" + СтрЗаменить(ПодсистемаПолноеИмя, ""Подсистема."", ""Подсистемы.""));
			КонецЦикла;
		КонецЦикла;
		
		МодульМенеджера = СтрЗаменить(МодульМенеджера, ""// НастроитьВариантыОтчета_Тело"", СокрЛП(НастроитьВариантыОтчета_Тело));
		
		ЗаписьТекста = Новый ЗаписьТекста(ОтчетМодульМенеджераФайл.ПолноеИмя, КодировкаМодулей);
		ЗаписьТекста.Записать(МодульМенеджера);
		ЗаписьТекста = Неопределено;
		
		////////////////////////////////////////////////////////////////////////////////
		// Модуль объекта отчета
		
		Если СтрокаОтчетИзФормы.ДобавитьНастройкиФормы Тогда
			
			ОтчетМодульОбъектаПолноеИмя = ВыгрузкаМодулейКаталог + ""Отчет."" + СтрокаОтчетИзФормы.ИмяОтчета + "".МодульОбъекта.txt"";
			ОтчетМодульОбъектаФайл = Новый Файл(ОтчетМодульОбъектаПолноеИмя);
			Если ОтчетМодульОбъектаФайл.Существует() Тогда
				ЧтениеТекста = Новый ЧтениеТекста(ОтчетМодульОбъектаФайл.ПолноеИмя, КодировкаМодулей);
				МодульОбъекта = ЧтениеТекста.Прочитать();
				ЧтениеТекста = Неопределено;
			Иначе
				МодульОбъекта = """";
			КонецЕсли;
			
			Результат = ТелоПроцедуры(МодульОбъекта, ОпределитьНастройкиФормы_Поиск);
			МодульОбъекта = Результат.ТекстМодуля;
			КодПроцедуры = """";
			
			Настройки_Старые = СтрокаОтчетИзФормы.НастройкиФормы;
			Настройки_Умолчания = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
			
			Если Настройки_Старые.ВыводитьСуммуВыделенныхЯчеек <> Настройки_Умолчания.ВыводитьСуммуВыделенныхЯчеек Тогда
				КодПроцедуры =
					КодПроцедуры
					+ СимволыПСТаб + ""Настройки.ВыводитьСуммуВыделенныхЯчеек = "" + ЗначениеВКод(Настройки_Старые.ВыводитьСуммуВыделенныхЯчеек) + "";"";
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из Настройки_Старые.СоответствиеПериодичностиПараметров Цикл
				ИмяПараметра = Строка(КлючИЗначение.Ключ);
				ПеречислениеИмя = Перечисление_ДоступныеПериодыОтчета_ПоискИмениПоСсылке[КлючИЗначение.Значение];
				КодПроцедуры =
					КодПроцедуры
					+ СимволыПСТаб + ""Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных("""""" + ИмяПараметра + """"""), Перечисления.ДоступныеПериодыОтчета."" + ПеречислениеИмя + "");"";
			КонецЦикла;
			
			Печать_Старая = Настройки_Старые.ПараметрыПечатиПоУмолчанию;
			Печать_Умолчания = Настройки_Умолчания.Печать;
			Для Каждого КлючИЗначение Из Печать_Старая Цикл
				Если КлючИЗначение.Значение <> Печать_Умолчания[КлючИЗначение.Ключ] Тогда
					КодПроцедуры =
						КодПроцедуры
						+ СимволыПСТаб + ""Настройки.Печать.""+ КлючИЗначение.Ключ + "" = "" + ЗначениеВКод(КлючИЗначение.Значение) + "";"";
				КонецЕсли;
			КонецЦикла;
			
			МодульОбъекта = СтрЗаменить(МодульОбъекта, ""// ОпределитьНастройкиФормы_Тело"", СокрЛП(КодПроцедуры));
			УдалитьПроцедуруИлиФункцию(МодульОбъекта, ""Функция ВерсияСтандартныхФункцийОтчетов("", ""КонецФункции"");
			УдалитьПроцедуруИлиФункцию(МодульОбъекта, ""Функция ПолучитьНастройкиОтчета("", ""КонецФункции"");
			
			ЗаписьТекста = Новый ЗаписьТекста(ОтчетМодульОбъектаФайл.ПолноеИмя, КодировкаМодулей);
			ЗаписьТекста.Записать(МодульОбъекта);
			ЗаписьТекста = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	// Переопределяемый модуль
	
	Если ЕстьИзмененияДляОбщегоМодуля Тогда
		НастроитьВариантыОтчетов_Тело = """";
		БиблиотекаПолноеИмя = """";
		НастройкиОтчетов.Сортировать(""БиблиотекаПолноеИмя Возр, ИмяОтчета Возр"");
		Для Каждого СтрокаОтчетИзФормы Из НастройкиОтчетов Цикл
			Если СтрНачинаетсяС(СтрокаОтчетИзФормы.БиблиотекаПолноеИмя, ""Подсистема.СтандартныеПодсистемы"") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаОтчетИзФормы.БиблиотекаПолноеИмя <> БиблиотекаПолноеИмя Тогда
				Если БиблиотекаПолноеИмя <> """" Тогда
					НастроитьВариантыОтчетов_Тело =
						НастроитьВариантыОтчетов_Тело
						+ СимволыПСТаб + ""// Конец "" + СтрЗаменить(БиблиотекаПолноеИмя, ""Подсистема."", """");
				КонецЕсли;
				БиблиотекаПолноеИмя = СтрокаОтчетИзФормы.БиблиотекаПолноеИмя;
				НастроитьВариантыОтчетов_Тело =
					НастроитьВариантыОтчетов_Тело
					+ СимволыПСТаб
					+ СимволыПСТаб + ""// "" + СтрЗаменить(БиблиотекаПолноеИмя, ""Подсистема."", """");
			КонецЕсли;
			НастроитьВариантыОтчетов_Тело =
				НастроитьВариантыОтчетов_Тело
				+ СимволыПСТаб + ""ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты."" + СтрокаОтчетИзФормы.ИмяОтчета + "");"";
		КонецЦикла;
		Если БиблиотекаПолноеИмя <> """" И НастроитьВариантыОтчетов_Тело <> """" Тогда
			НастроитьВариантыОтчетов_Тело =
				НастроитьВариантыОтчетов_Тело
				+ СимволыПСТаб + ""// Конец "" + СтрЗаменить(БиблиотекаПолноеИмя, ""Подсистема."", """")
				+ СимволыПСТаб
				+ СимволыПСТаб;
		КонецЕсли;
		
		ПереопределяемыйМодульПолноеИмя = ВыгрузкаМодулейКаталог + ""ОбщийМодуль.ВариантыОтчетовПереопределяемый.Модуль.txt"";
		ЧтениеТекста = Новый ЧтениеТекста(ПереопределяемыйМодульПолноеИмя, КодировкаМодулей);
		ПереопределяемыйМодульТекст = ЧтениеТекста.Прочитать();
		ЧтениеТекста = Неопределено;
		
		Позиция1 = СтрНайти(ПереопределяемыйМодульТекст, ""Процедура НастроитьВариантыОтчетов(Настройки) Экспорт"");
		Остаток = Сред(ПереопределяемыйМодульТекст, Позиция1 + СтрДлина(""Процедура НастроитьВариантыОтчетов(Настройки) Экспорт""));
		Позиция2 = СтрНайти(Остаток, ""КонецПроцедуры"");
		
		НастроитьВариантыОтчета_БывшееТело = СокрЛП(Лев(Остаток, Позиция2 - 1));
		Если Не ПустаяСтрока(НастроитьВариантыОтчета_БывшееТело) Тогда
			НастроитьВариантыОтчета_БывшееТело = (
				СимволыПСТаб + ""// "" + Пояснение() + "": Удалить устаревшее содержимое процедуры """"до расстановки фрагментов кода"""":""
				+ СимволыПСТаб + ""//       (не удалено чтобы при необходимости было легче восстановить стиль оформления):""
				+ СимволыПСТаб + ""//"" + СтрЗаменить(НастроитьВариантыОтчета_БывшееТело, СимволыПСТаб, СимволыПСТаб + ""//""));
		КонецЕсли;
		
		ПереопределяемыйМодульТекст =
			Лев(ПереопределяемыйМодульТекст, Позиция1 - 1)
			+ ""Процедура НастроитьВариантыОтчетов(Настройки) Экспорт""
			+ СимволыПСТаб + НастроитьВариантыОтчетов_Тело
			+ НастроитьВариантыОтчета_БывшееТело
			+ Символы.ПС + Сред(Остаток, Позиция2);
		
		ЗаписьТекста = Новый ЗаписьТекста(ПереопределяемыйМодульПолноеИмя, КодировкаМодулей);
		ЗаписьТекста.Записать(ПереопределяемыйМодульТекст);
		ЗаписьТекста = Неопределено;
	КонецЕсли;
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьТекстыМодулейПрочитатьПараметрыСервер()
	Результат = Новый Структура;
	Результат.Вставить(""ВыводитьОтчетыВместоВариантов"", ВариантыОтчетов.ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов);
	Результат.Вставить(""ДоступныеПериодыОтчета"", Новый Соответствие);
	Для Каждого ЗначениеПеречисленияМетаданные Из Метаданные.Перечисления.ДоступныеПериодыОтчета.ЗначенияПеречисления Цикл
		Имя = ЗначениеПеречисленияМетаданные.Имя;
		Результат.ДоступныеПериодыОтчета.Вставить(Имя, Перечисления.ДоступныеПериодыОтчета[Имя]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция КодМногострочногоТекста(МногострочныйТекст, Локализация)
	Результат = МногострочныйТекст;
	Результат = СтрЗаменить(Результат, """""""", """"""""""""); // Заменить 1 кавычку в тексте на 2.
	Если Локализация Тогда
		Результат = ""НСтр(""""ru = '"" + Результат + ""'"""")""; // Заключить всю строку в 1 кавычку.
	Иначе
		Результат = """""""" + Результат + """"""""; // Заключить всю строку в 1 кавычку.
	КонецЕсли;
	Если СтрЧислоСтрок(Результат) > 1 Тогда
		Результат = СтрЗаменить(Результат, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб + ""|"");
		Результат = Символы.ПС + Символы.Таб + Символы.Таб + Результат;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ТелоПроцедуры(ТекстМодуля, УсловияПоиска)
	Результат = Новый Структура(""ТекстМодуля, БывшееТело"");
	
	ВставляемыйФрагмент = УсловияПоиска.Заглушка;
	
	Для НомерУровня = 1 По УсловияПоиска.УровниКоличество Цикл
		УровеньПоиска = УсловияПоиска.Уровни[НомерУровня-1];
		
		Позиция = СтрНайти(ТекстМодуля, УровеньПоиска.Объявление);
		Если Позиция = 0 Тогда // Накопление вставляемого фрагмента.
			ВставляемыйФрагмент =
				?(УровеньПоиска.Комментарий = """", """", УровеньПоиска.Комментарий + Символы.ПС)
				+ УровеньПоиска.Объявление
				+ ?(НомерУровня = 1, ВставляемыйФрагмент, Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС)
				+ УровеньПоиска.Завершение;
			Продолжить;
		КонецЕсли;
		
		// Найдено!
		Если НомерУровня = 1 Тогда // Сама процедура.
			Остаток = Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина);
			ПозицияЗавершения = СтрНайти(Остаток, УровеньПоиска.Завершение);
			
			Результат.БывшееТело = Лев(Остаток, ПозицияЗавершения - 1);
			Результат.ТекстМодуля =
				Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
				+ ВставляемыйФрагмент
				+ Сред(Остаток, ПозицияЗавершения);
		Иначе // Место, куда ее вставлять.
			Результат.БывшееТело = """";
			Результат.ТекстМодуля =
				Лев(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина - 1)
				+ Символы.ПС + Символы.ПС + ВставляемыйФрагмент + Символы.ПС + Символы.ПС
				+ Сред(ТекстМодуля, Позиция + УровеньПоиска.ОбъявлениеДлина);
		КонецЕсли;
		
		Возврат Результат;
	КонецЦикла;
	
	Результат.БывшееТело = """";
	Результат.ТекстМодуля = СокрЛП(ВставляемыйФрагмент + Символы.ПС + Символы.ПС + ТекстМодуля);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УдалитьПроцедуруИлиФункцию(ТекстМодуля, Объявление, Завершение)
	ПозицияНачала = СтрНайти(ТекстМодуля, Объявление);
	Если ПозицияНачала = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Остаток = Сред(ТекстМодуля, ПозицияНачала);
	ПозицияОкончания = СтрНайти(Остаток, Завершение);
	Если ПозицияОкончания = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск первого символа комментария к объявлению.
	КодСимволаПС = КодСимвола(Символы.ПС);
	ПредыдущийСимволБылКомментарием = Истина;
	ПозицияНачала = ПозицияНачала - 1;
	Для ОбратныйНомер = -ПозицияНачала По -1 Цикл
		КодСимвола = КодСимвола(ТекстМодуля, -ОбратныйНомер);
		Если КодСимвола = 10 И Не ПредыдущийСимволБылКомментарием Тогда
			Прервать; // 10 Соответствует Символы.ПС.
		КонецЕсли;
		ПредыдущийСимволБылКомментарием = (КодСимвола = 47); // 47 соответствует ""/"".
	КонецЦикла;
	ПозицияНачала = -ОбратныйНомер - 1;
	Пока КодСимвола(ТекстМодуля, ПозицияНачала - 1) = 10 И ПозицияНачала > 1 Цикл
		ПозицияНачала = ПозицияНачала - 1;
	КонецЦикла;
	
	ПозицияОкончания = ПозицияОкончания + СтрДлина(Завершение);
	Пока КодСимвола(ТекстМодуля, ПозицияОкончания) = 10 Цикл
		ПозицияОкончания = ПозицияОкончания + 1;
	КонецЦикла;
	
	ТекстМодуля = Лев(ТекстМодуля, ПозицияНачала) + Сред(Остаток, ПозицияОкончания);
КонецПроцедуры

&НаКлиенте
Функция НастроитьВариантыОтчета_УсловияПоиска()
	УровниПоиска = Новый Массив;
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Объявление = ""Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = ""КонецПроцедуры"";
	УровеньПоиска.Комментарий =
		""// Настройки размещения в панели отчетов.
		|//
		|// Параметры:
		|//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
		|//       см. описание к ВариантыОтчетов.ДеревоПредопределенных()
		|//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
		|//       см. """"Реквизиты для изменения"""" функции ВариантыОтчетов.ДеревоПредопределенных().
		|//
		|// Описание:
		|//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
		|//
		|// Вспомогательные методы:
		|//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, """"<ИмяВарианта>"""");
		|//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет поддерживает только этот режим.
		|//"";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Объявление = ""#Область СлужебныйПрограммныйИнтерфейс"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = ""#КонецОбласти"";
	УровеньПоиска.Комментарий = """";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Объявление = ""#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = ""#КонецЕсли"";
	УровеньПоиска.Комментарий = """";
	УровниПоиска.Добавить(УровеньПоиска);
	
	НастроитьВариантыОтчета_Поиск = Новый Структура;
	НастроитьВариантыОтчета_Поиск.Вставить(""Уровни"", УровниПоиска);
	НастроитьВариантыОтчета_Поиск.Вставить(""УровниКоличество"", УровниПоиска.Количество());
	НастроитьВариантыОтчета_Поиск.Вставить(""Заглушка"", Символы.ПС + Символы.Таб + ""// НастроитьВариантыОтчета_Тело"" + Символы.ПС);
	
	Возврат НастроитьВариантыОтчета_Поиск;
КонецФункции

&НаКлиенте
Функция ОпределитьНастройкиФормы_УсловияПоиска()
	УровниПоиска = Новый Массив;
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Объявление = ""Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = ""КонецПроцедуры"";
	УровеньПоиска.Комментарий =
		""// Настройки общей формы отчета подсистемы """"Варианты отчетов"""".
		|//
		|// Параметры:
		|//   Форма - УправляемаяФорма - Форма отчета.
		|//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
		|//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
		|//"";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Объявление = ""#Область СлужебныйПрограммныйИнтерфейс"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = ""#КонецОбласти"";
	УровеньПоиска.Комментарий = """";
	УровниПоиска.Добавить(УровеньПоиска);
	
	УровеньПоиска = Новый Структура(""Объявление, ОбъявлениеДлина, Завершение, Комментарий"");
	УровеньПоиска.Объявление = ""#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда"";
	УровеньПоиска.ОбъявлениеДлина = СтрДлина(УровеньПоиска.Объявление);
	УровеньПоиска.Завершение = ""#КонецЕсли"";
	УровеньПоиска.Комментарий = """";
	УровниПоиска.Добавить(УровеньПоиска);
	
	НастроитьВариантыОтчета_Поиск = Новый Структура;
	НастроитьВариантыОтчета_Поиск.Вставить(""Уровни"", УровниПоиска);
	НастроитьВариантыОтчета_Поиск.Вставить(""УровниКоличество"", УровниПоиска.Количество());
	НастроитьВариантыОтчета_Поиск.Вставить(""Заглушка"", Символы.ПС + Символы.Таб + ""// ОпределитьНастройкиФормы_Тело"" + Символы.ПС);
	
	Возврат НастроитьВариантыОтчета_Поиск;
КонецФункции

&НаКлиенте
Функция ЗначениеВКод(Значение)
	Если ТипЗнч(Значение) = Тип(""Строка"") Тогда
		Возврат КодМногострочногоТекста(Значение, СтрНайти(Значение, "" "") > 0);
	ИначеЕсли ТипЗнч(Значение) = Тип(""Булево"") Тогда
		Возврат Формат(Значение, ""БЛ=Ложь; БИ=Истина"");
	ИначеЕсли ТипЗнч(Значение) = Тип(""Число"") Тогда
		Возврат Формат(Значение, ""ЧН=; ЧГ="");
	Иначе
		Возврат Строка(Значение);
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Пояснение()
	Возврат Символ(84) + Символ(79) + Символ(68)+ Символ(79);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка модулей.

&НаКлиенте
Функция ЗагрузитьТекстыМодулей(ВыборПользователя, Сценарий)
	Состояние(НСтр(""ru = 'Загрузка текстов модулей'""));
	
	#Если НЕ ВебКлиент Тогда
	Кавычка = """""""";
	
	КаталогBIN = КаталогПрограммы();
	
	ПутьККонфигурации = СтрокаСоединенияИнформационнойБазы();
	ПутьККонфигурации = СтрЗаменить(ПутьККонфигурации, Кавычка, Кавычка + Кавычка);
	
	КодВозврата = NULL;
	ЗапуститьПриложение(Кавычка + КаталогBIN + ""1cv8.exe"" + Кавычка + "" DESIGNER""
		+ "" /IBConnectionString "" + Кавычка + ПутьККонфигурации + Кавычка
		+ "" /N ""                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
		+ "" /P ""                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка
		+ "" /LoadConfigFiles ""    + Кавычка + ВыгрузкаМодулейКаталог + Кавычка
		+ "" -Module""
		+ "" -AllWritable""
		,
		,
		Истина,
		КодВозврата);
	//	/LoadConfigFiles <каталог загрузки> [-Module] [-Template] [-Help] [-AllWritable] - загрузка свойств объектов
	//	метаданных конфигурации.
	//		<Каталог загрузки> - каталог расположения файлов свойств;
	//		Module - признак необходимости загрузки модулей;
	//		Template - признак необходимости загрузки шаблонов;
	//		Help - признак необходимости загрузки справочной информации;
	//		AllWritable - признак загрузки свойств только доступных для записи объектов.
	//	Если команда пакетного режима запуска прошла успешно, возвращает код возврата 0, в противном случае  - 1 (101, если
	//	в данных имеются ошибки).
	
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ручные шаги.

&НаКлиенте
Функция ПоказатьРучныеДействия(ВыборПользователя, Сценарий)
	ПоказатьПредупреждение(,
		НСтр(""ru = 'Расстановка фрагментов кода успешно завершена.
		|Для просмотра изменений в конфигурации нажмите:
		|  """"Конфигурация"""" - """"Конфигурация базы данных"""" - """"Сравнить, объединить с конфигурацией БД"""".
		|В частности - см. изменения в модуле ВариантыОтчетовПереопределяемый и модулях отчетов.'""));
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Запуск конфигуратора.

&НаКлиенте
Функция ОткрытьКонфигуратор(ВыборПользователя, Сценарий)
	Состояние(НСтр(""ru = 'Запуск конфигуратора'""));
	
	#Если НЕ ВебКлиент Тогда
	ЗапуститьПриложение(Кавычка + КаталогBIN + ""1cv8.exe"" + Кавычка + "" DESIGNER""
		+ "" /IBConnectionString "" + Кавычка + ПутьККонфигурации + Кавычка
		+ "" /N ""                  + Кавычка + ВыгрузкаМодулейПользователь + Кавычка
		+ "" /P ""                  + Кавычка + ВыгрузкаМодулейПароль + Кавычка);
	#КонецЕсли
	
	Возврат Истина; // Продолжить сценарий.
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

&НаКлиенте
Функция ПолноеИмяФормы(КраткоеИмяФормы)
	ПозицияТочки = СтрНайти(ИмяФормы, ""."");
	ЭтотОбъектВид = Лев(ИмяФормы, ПозицияТочки - 1);
	Остаток = Сред(ИмяФормы, ПозицияТочки + 1);
	
	ПозицияТочки = СтрНайти(Остаток, ""."");
	ЭтотОбъектТип = Лев(Остаток, ПозицияТочки - 1);
	
	Возврат ЭтотОбъектВид + ""."" + ЭтотОбъектТип + "".Форма."" + КраткоеИмяФормы;
КонецФункции

#КонецОбласти",
{4,18,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",299f1907-177f-4e5f-8d8e-91f5fe40205a}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ВыгрузкаМодулейКаталог",
{1,1,
{"ru","Каталог выгрузки/загрузки модулей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ВыгрузкаМодулейПользователь",
{1,1,
{"ru","Выгрузка модулей пользователь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ВыгрузкаМодулейПароль",
{1,1,
{"ru","Выгрузка модулей пароль"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"МетаданныеАктуальны",
{1,1,
{"ru","Метаданные актуальны"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"НастройкиОтчетов",
{1,1,
{"ru","Настройки отчетов"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,8,
{5,1,0,"ИмяОтчета",
{1,1,
{"ru","Имя отчета"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Картинка",
{1,1,
{"ru","Картинка"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"БиблиотекаПолноеИмя",
{1,1,
{"ru","Библиотека полное имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ПодсистемаПредставление",
{1,1,
{"ru","Подсистема представление"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ГруппироватьПоОтчету",
{1,1,
{"ru","Группировать по отчету"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ОпределитьНастройкиФормы",
{1,1,
{"ru","Определить настройки формы"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ДобавитьНастройкиФормы",
{1,1,
{"ru","Добавить настройки формы"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,10,0,"НастройкиФормы",
{1,1,
{"ru","Настройки формы"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{8},0,"ПоискКода",
{1,1,
{"ru","Поиск кода"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"КаталогBIN",
{1,1,
{"ru","Каталог BIN"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ПутьККонфигурации",
{1,1,
{"ru","Путь к конфигурации"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"Кавычка",
{1,1,
{"ru","Кавычка"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"Подсказка",
{1,1,
{"ru","Подсказка"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"СуффиксИменМодулейФорм",
{1,1,
{"ru","Суффикс имен модулей форм"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"РежимОтладки",
{1,1,
{"ru","Режим отладки"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ВыгружатьМодули",
{1,1,
{"ru","Выгружать модули"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{16},0,"НастройкиАдминистратора",
{1,1,
{"ru","Настройки администратора"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{17},0,"ДобавлятьНастройкиАдминистратора",
{1,1,
{"ru","Добавить текущие настройки"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"НастройкиВариантов",
{1,1,
{"ru","Настройки вариантов"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,4,
{5,1,0,"ИмяОтчета",
{1,1,
{"ru","Имя отчета"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"КлючВарианта",
{1,1,
{"ru","Ключ варианта"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Настройки",
{1,1,
{"ru","Настройки"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Картинка",
{1,1,
{"ru","Картинка"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{18},0,"ЗагружатьМодули",
{1,1,
{"ru","Загружать модули"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,2,"ОбъектыМетаданных.ФормаОбъектаЕстьКритичныеОшибки","",
{0},
{0},"ОбъектыМетаданных.ФормаСпискаЕстьКритичныеОшибки","",
{0},
{0},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCe0LHRitC10LrRgtGL0JzQtdGC0LDQtNCw0L3Q
vdGL0YU8L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9uPg0KCQkJ
PGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlz
b24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx0YrQ
tdC60YLRi9Cc0LXRgtCw0LTQsNC90L3Ri9GFLtCk0L7RgNC80LDQntCx0YrQtdC6
0YLQsNCV0YHRgtGM0JrRgNC40YLQuNGH0L3Ri9C10J7RiNC40LHQutC4PC9sZWZ0
Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0K
CQkJCQk8cmlnaHQgeHNpOnR5cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0K
CQkJCTwvaXRlbT4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBh
cmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QntCx
0YrQtdC60YLRi9Cc0LXRgtCw0LTQsNC90L3Ri9GFLtCk0L7RgNC80LDQodC/0LjR
gdC60LDQldGB0YLRjNCa0YDQuNGC0LjRh9C90YvQtdCe0YjQuNCx0LrQuDwvbGVm
dD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlwZT4N
CgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpib29sZWFuIj50cnVlPC9yaWdodD4N
CgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJ
CTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+
DQoJCQkJCTxkY3Njb3I6dXNlPmZhbHNlPC9kY3Njb3I6dXNlPg0KCQkJCQk8ZGNz
Y29yOnBhcmFtZXRlcj7QptCy0LXRgtCi0LXQutGB0YLQsDwvZGNzY29yOnBhcmFt
ZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+
MDpiOTYyNzg1NS02NzczLTRhNTktYjdkMy1mOWUyZTU2NWNkOWU8L2Rjc2Nvcjp2
YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6
dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFy
YW1ldGVyPtCi0L7Qu9GM0LrQvtCf0YDQvtGB0LzQvtGC0YA8L2Rjc2NvcjpwYXJh
bWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InhzOmJvb2xlYW4i
PnRydWU8L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9h
cHBlYXJhbmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4N
CgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCe0LHRitC10LrRgtGL0JzQtdGC0LDQ
tNCw0L3QvdGL0YXQpNC+0YDQvNCw0J7QsdGK0LXQutGC0LDQotC10LrRgdGC0J7R
iNC40LHQutC4PC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJCQk8L3NlbGVjdGlvbj4N
CgkJCTxmaWx0ZXI+DQoJCQkJPGl0ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Db21w
YXJpc29uIj4NCgkJCQkJPGxlZnQgeHNpOnR5cGU9ImRjc2NvcjpGaWVsZCI+0J7Q
sdGK0LXQutGC0YvQnNC10YLQsNC00LDQvdC90YvRhS7QpNC+0YDQvNCw0J7QsdGK
0LXQutGC0LDQldGB0YLRjNCa0YDQuNGC0LjRh9C90YvQtdCe0YjQuNCx0LrQuDwv
bGVmdD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlw
ZT4NCgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpib29sZWFuIj50cnVlPC9yaWdo
dD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0K
CQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1
ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCm0LLQtdGC0KLQtdC60YHRgtCw
PC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJCQk8ZGNzY29yOnZhbHVlIHhzaTp0eXBl
PSJ2OHVpOkNvbG9yIj4wOmI5NjI3ODU1LTY3NzMtNGE1OS1iN2QzLWY5ZTJlNTY1
Y2Q5ZTwvZGNzY29yOnZhbHVlPg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8L2Fw
cGVhcmFuY2U+DQoJCTwvaXRlbT4NCgkJPGl0ZW0+DQoJCQk8c2VsZWN0aW9uPg0K
CQkJCTxpdGVtPg0KCQkJCQk8ZmllbGQ+0J7QsdGK0LXQutGC0YvQnNC10YLQsNC0
0LDQvdC90YvRhdCk0L7RgNC80LDQodC/0LjRgdC60LDQotC10LrRgdGC0J7RiNC4
0LHQutC4PC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJCQk8L3NlbGVjdGlvbj4NCgkJ
CTxmaWx0ZXI+DQoJCQkJPGl0ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Db21wYXJp
c29uIj4NCgkJCQkJPGxlZnQgeHNpOnR5cGU9ImRjc2NvcjpGaWVsZCI+0J7QsdGK
0LXQutGC0YvQnNC10YLQsNC00LDQvdC90YvRhS7QpNC+0YDQvNCw0KHQv9C40YHQ
utCw0JXRgdGC0YzQmtGA0LjRgtC40YfQvdGL0LXQntGI0LjQsdC60Lg8L2xlZnQ+
DQoJCQkJCTxjb21wYXJpc29uVHlwZT5FcXVhbDwvY29tcGFyaXNvblR5cGU+DQoJ
CQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6Ym9vbGVhbiI+dHJ1ZTwvcmlnaHQ+DQoJ
CQkJPC9pdGVtPg0KCQkJPC9maWx0ZXI+DQoJCQk8YXBwZWFyYW5jZT4NCgkJCQk8
ZGNzY29yOml0ZW0geHNpOnR5cGU9IlNldHRpbmdzUGFyYW1ldGVyVmFsdWUiPg0K
CQkJCQk8ZGNzY29yOnBhcmFtZXRlcj7QptCy0LXRgtCi0LXQutGB0YLQsDwvZGNz
Y29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1
aTpDb2xvciI+MDpiOTYyNzg1NS02NzczLTRhNTktYjdkMy1mOWUyZTU2NWNkOWU8
L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJh
bmNlPg0KCQk8L2l0ZW0+DQoJPC9jb25kaXRpb25hbEFwcGVhcmFuY2U+DQo8L1Nl
dHRpbmdzPg==}
},
{0,0},
{0,2,
{7,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗапуститьКонфигуратор",
{1,1,
{"ru","Запустить конфигуратор"}
},
{1,1,
{"ru","Запустить конфигуратор"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,e93f538e-dfaf-4a91-a9b6-c053555bcf60},"",-1,-1,1,0,""},"ЗапуститьКонфигуратор",3,0,0,
{0,0},1,0},
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВнедритьПодсистему",
{1,1,
{"ru","Расставить фрагменты кода"}
},
{1,1,
{"ru","Выгрузить тексты модулей и проверить внедрение"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,9fecbaff-2a05-4da6-9ef1-807e754b928d},"",-1,-1,1,0,""},"ВнедритьПодсистему",0,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}
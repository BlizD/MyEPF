&НаКлиенте
Перем ОтветПередЗакрытием;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПереключательВкладок();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ИнструментыРазработчикаРедактированиеМанифестаОбработкиПоставляемыхДанных.Форма.ВидДанных") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеЗначение.Создание Тогда
			ВидДанных = ВидыДанных.Добавить();
		Иначе
			ВидДанных = Элементы.ВидыДанных.ТекущиеДанные;
		КонецЕсли;
		
		ЗаписатьВидДанных(ВидДанных, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Элементы.РасписаниеПредставление.Доступность Тогда
	    ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("РасписаниеПредставление"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветПередЗакрытием <> Истина Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), 
			РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт	
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Не СохранитьДанные() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ОтветПередЗакрытием = Истина;
    Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	Элементы.РасписаниеПредставление.Доступность = (Тип <> "Interactive");
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем Диалог;
	
	Если Расписание = Неопределено Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборРасписания", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборРасписания(НовоеРасписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		Расписание = НовоеРасписание;
		РасписаниеПредставление = Строка(Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Структура(Команда)
	
	Если Элементы.НижняяЧастьФормы.ТекущаяСтраница = Элементы.СтраницаСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	ОткрытьXMLФайл(Неопределено, Неопределено, ТекстМанифеста, Отказ, СообщениеОбОшибке);
	
	Если Отказ Тогда 
		ПоказатьПредупреждение(, СообщениеОбОшибке);
		Возврат; 
	КонецЕсли;
		
	Элементы.НижняяЧастьФормы.ТекущаяСтраница = Элементы.СтраницаСтруктура;
	ОбновитьПереключательВкладок();
	
КонецПроцедуры

&НаКлиенте
Процедура Текст(Команда)
	
	Если Элементы.НижняяЧастьФормы.ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМанифеста = СформироватьМанифест(Ложь);
	
	Элементы.НижняяЧастьФормы.ТекущаяСтраница = Элементы.СтраницаТекст;
	ОбновитьПереключательВкладок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыДанных

&НаКлиенте
Процедура ВидыДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДанных", ?(Копирование, ТекущиеДанныеДляФормы(), Неопределено));
	ПараметрыФормы.Вставить("Создание", Истина);
	
	ОткрытьФорму("Обработка.ИнструментыРазработчикаРедактированиеМанифестаОбработкиПоставляемыхДанных.Форма.ВидДанных", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДанных", ТекущиеДанныеДляФормы());
	ПараметрыФормы.Вставить("Создание", Ложь);
	
	ОткрытьФорму("Обработка.ИнструментыРазработчикаРедактированиеМанифестаОбработкиПоставляемыхДанных.Форма.ВидДанных", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКлиент(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКлиент2", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущие данные формы будут заменены данными из файла. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ОткрытьКлиент2(КодВозвратаДиалога.Да, Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлиент2(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКлиент3", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, , ФайлXMLИмя, , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлиент3(Результат, Адрес, ВыбранноеИмя, ДополнительныеПараметры) Экспорт
	Перем СообщениеОбОшибке, Отказ;
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ФайлXMLАдрес = Адрес;
	Отказ = Ложь;
	ОткрытьXMLФайл(ФайлXMLАдрес, ФайлXMLИмя, Неопределено, Отказ, СообщениеОбОшибке);
	Если Отказ Тогда 
		ПоказатьПредупреждение(, СообщениеОбОшибке);
		Возврат; 
	КонецЕсли;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьДанные();
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьДанные()
	
	Если Элементы.НижняяЧастьФормы.ТекущаяСтраница = Элементы.СтраницаТекст Тогда
		
		Отказ = Ложь;
		СообщениеОбОшибке = "";
		ОткрытьXMLФайл(Неопределено, Неопределено, ТекстМанифеста, Отказ, СообщениеОбОшибке);
		
		Если Отказ Тогда 
			ПоказатьПредупреждение(, СообщениеОбОшибке);
			Возврат Ложь; 
		КонецЕсли;
		
	Иначе
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФайл(СформироватьМанифест(Истина), "МанифестОбработки.xml") = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОткрытьXMLФайл(Знач ФайлXMLАдрес, Знач ФайлXMLИмя, Знач XML,
						   Отказ, СообщениеОбОшибке)
	Попытка
		
		Если XML = Неопределено Тогда
			ДанныеХранилища = ПолучитьИзВременногоХранилища(ФайлXMLАдрес);
			ВременныйФайл = ПолучитьИмяВременногоФайла();
			ДанныеХранилища.Записать(ВременныйФайл);
			МанифестXDTO = ПолучитьМанифест(Новый Файл(ВременныйФайл));
		Иначе		
			МанифестXDTO = ПолучитьМанифест(XML);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Произошла ошибка:'") + Символы.ПС + Символы.ПС 
			+  КраткоеПредставлениеОшибки (ИнформацияОбОшибке());
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Редактирование манифеста обработки поставляемых данных.Не удалось удалить временный файл'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Возврат;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Редактирование манифеста обработки поставляемых данных.Не удалось удалить временный файл'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Версия = МанифестXDTO.Version;
	Наименование = МанифестXDTO.Name;
	Тип = МанифестXDTO.Type;
	
	Если МанифестXDTO.JobSchedule <> Неопределено Тогда
		Расписание = СериализаторXDTO.ПрочитатьXDTO(МанифестXDTO.JobSchedule);
		РасписаниеПредставление = Строка(Расписание);
	Иначе
		РасписаниеПредставление = "";
	КонецЕсли;
	
	Описание = МанифестXDTO.Description;
	ВидыДанных.Очистить();
	
	Для каждого DataType Из МанифестXDTO.DataTypes.DataType Цикл
		ВидДанных = ВидыДанных.Добавить();
		ВидДанных.Код = DataType.Code;
		ВидДанных.Наименование = DataType.Description;
		ВидДанных.Задержка = DataType.Timeout;
		Если DataType.Свойства().Получить("SuppressNotifications") <> Неопределено Тогда
			ВидДанных.ЗапретУведомления = DataType.SuppressNotifications;
		Иначе
			ВидДанных.ЗапретУведомления = Ложь;
		КонецЕсли;
		
		Для каждого Property Из DataType.Property Цикл
			Характеристика = ВидДанных.Характеристики.Добавить();
			Характеристика.Код = Property.Code;
			Характеристика.Наименование = Property.Description;
			Характеристика.Ключевая = Property.IsKey;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМанифест(Знач Манифест)
	Перем МанифестXML, МанифестПостроительDOM, Корень, ВерсияФормата, МанифестXDTO;
	
	МанифестXML = Новый ЧтениеXML();
	Если ТипЗнч(Манифест) = Тип("Строка") Тогда
		МанифестXML.УстановитьСтроку(Манифест);
	Иначе
		МанифестXML.ОткрытьФайл(Манифест.ПолноеИмя);
	КонецЕсли;
	
	МанифестПостроительDOM = Новый ПостроительDOM;
	МанифестDOM = МанифестПостроительDOM.Прочитать(МанифестXML);
	Корень = МанифестDOM.ЭлементДокумента; 
	ВерсияФормата = "";
	Если Корень.ИмяЭлемента <> "SuppliedDataProcessor"
		Или (Корень.URIПространстваИмен <> "http://www.1c.ru/SaaS/SuppliedData"
			И Корень.URIПространстваИмен <> "http://www.1c.ru/SaaS/SuppliedData/SuppliedDataProcessor") Тогда
		ВызватьИсключение НСтр("ru = 'Неподдерживаемый формат манифеста обработки.'");
	КонецЕсли;
	ВерсияФормата = Корень.Атрибуты.ПолучитьИменованныйЭлемент("Version");
	
	МанифестXML.Закрыть();
	Если ТипЗнч(Манифест) = Тип("Строка") Тогда
		МанифестXML.УстановитьСтроку(Манифест);
	Иначе
		МанифестXML.ОткрытьФайл(Манифест.ПолноеИмя);
	КонецЕсли;
	
	Если ВерсияФормата.Значение = "1.0" Тогда
		Фабрика = ФабрикаXDTOСтарыхВерсий();
		МанифестXDTO = Фабрика.ПрочитатьXML(МанифестXML,
			Фабрика.Тип(ПакетОбработкаПоставляемыхДанныхСтарыхВерсий(), "SuppliedDataProcessor"));
	ИначеЕсли ВерсияФормата.Значение = "1.0.1" Тогда
		Фабрика = ФабрикаXDTOСтарыхВерсий();
		МанифестXDTO = Фабрика.ПрочитатьXML(МанифестXML,
			Фабрика.Тип(ПакетОбработкаПоставляемыхДанныхСтарыхВерсий(), "SuppliedDataProcessor1_0_1"));
	ИначеЕсли ВерсияФормата.Значение = "1.0.2" Тогда
		МанифестXDTO = ФабрикаXDTO.ПрочитатьXML(МанифестXML, 
			ФабрикаXDTO.Тип(ПакетОбработкаПоставляемыхДанных(), "SuppliedDataProcessor1_0_2"));
	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемая версия формата манифеста обработки.'");
	КонецЕсли;

	Возврат МанифестXDTO;
	
КонецФункции

&НаСервере
Функция ФабрикаXDTOСтарыхВерсий()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	МакетXSD = Обработка.ПолучитьМакет("XDTOСтарыхВерсий");
	ФайлXSD = ПолучитьИмяВременногоФайла();
	МакетXSD.Записать(ФайлXSD);
	Фабрика = СоздатьФабрикуXDTO(ФайлXSD);
	Попытка
		УдалитьФайлы(ФайлXSD);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Редактирование манифеста обработки поставляемых данных.Не удалось удалить временный файл'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

&НаСервере
Функция ПакетОбработкаПоставляемыхДанных()
	
	Возврат "http://www.1c.ru/SaaS/SuppliedData/SuppliedDataProcessor";
	
КонецФункции

&НаСервере
Функция ПакетОбработкаПоставляемыхДанныхСтарыхВерсий()
	
	Возврат "http://www.1c.ru/SaaS/SuppliedData";
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьВидДанных(Знач ВидДанных, Знач Результат)
	
	ВидДанных.Код = Результат.Код;
	ВидДанных.Наименование = Результат.Наименование;
	ВидДанных.Задержка = Результат.Задержка;
	ВидДанных.ЗапретУведомления = Результат.ЗапретУведомления;
	ВидДанных.Характеристики.Очистить();
	Для Каждого Характеристика Из Результат.Характеристики Цикл
		НоваяХарактеристика = ВидДанных.Характеристики.Добавить();
		НоваяХарактеристика.Код = Характеристика.Код;
		НоваяХарактеристика.Наименование = Характеристика.Наименование;
		НоваяХарактеристика.Ключевая = Характеристика.Ключевая;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеДляФормы()
	
	Элемент = Элементы.ВидыДанных.ТекущиеДанные;
	
	Результат = Новый Структура;
	Результат.Вставить("Код", Элемент.Код);
	Результат.Вставить("Наименование", Элемент.Наименование);
	Результат.Вставить("Задержка", Элемент.Задержка);
	Результат.Вставить("ЗапретУведомления", Элемент.ЗапретУведомления);
	Результат.Вставить("Характеристики", Элемент.Характеристики);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция СоздатьXDTO(Знач Имя)
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПакетОбработкаПоставляемыхДанных(), Имя));
	
КонецФункции

&НаСервере
Функция СформироватьМанифест(Знач ЧерезВременноеХранилище)
	
	МанифестXDTO = СоздатьXDTO("SuppliedDataProcessor1_0_2");
	
	МанифестXDTO.VersionOfFormat = "1.0.2";
	МанифестXDTO.Version = Версия;
	МанифестXDTO.Name = Наименование;
	МанифестXDTO.Type = Тип;
	Если Тип <> "Interactive" Тогда
		МанифестXDTO.JobSchedule = СериализаторXDTO.ЗаписатьXDTO(Расписание);
	КонецЕсли;
	МанифестXDTO.Description = Описание;
	МанифестXDTO.DataTypes = СоздатьXDTO("ArrayOfDataType1_0_2");
	
	Для каждого ВидДанных Из ВидыДанных Цикл
		DataType = МанифестXDTO.DataTypes.DataType.Добавить(СоздатьXDTO("DataType1_0_2"));
		DataType.Code = ВидДанных.Код;
		DataType.Description = ВидДанных.Наименование;
		DataType.Timeout = ВидДанных.Задержка;
		DataType.SuppressNotifications = ВидДанных.ЗапретУведомления;
		
		Если ВидДанных.Характеристики.Количество() > 0 Тогда
			Для каждого Характеристика Из ВидДанных.Характеристики Цикл
				Property = DataType.Property.Добавить(СоздатьXDTO("Property"));
				Property.Code = Характеристика.Код;
				Property.Description = Характеристика.Наименование;
				Property.IsKey = Характеристика.Ключевая;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МанифестXDTO, "SuppliedDataProcessor", ПакетОбработкаПоставляемыхДанных());
	Результат = ЗаписьXML.Закрыть();
	
	Если ЧерезВременноеХранилище Тогда
		Возврат ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьПереключательВкладок()
	
	Элементы.Структура.Шрифт = Новый Шрифт(Элементы.Структура.Шрифт, , , (Элементы.НижняяЧастьФормы.ТекущаяСтраница = Элементы.СтраницаСтруктура));
	Элементы.Текст.Шрифт = Новый Шрифт(Элементы.Структура.Шрифт, , , (Элементы.НижняяЧастьФормы.ТекущаяСтраница <> Элементы.СтраницаСтруктура));

КонецПроцедуры

#КонецОбласти

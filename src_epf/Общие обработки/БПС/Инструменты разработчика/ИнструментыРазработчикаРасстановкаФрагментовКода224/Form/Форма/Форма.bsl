#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ЭтотОбъект.Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	Если ФайловаяБаза = 0 Тогда
		ВызватьИсключение НСтр("ru ='Расстановка фрагментов кода может быть выполнена только на файловой базе'");
	КонецЕсли;
	
	АдресБазы = "ЭтаБаза";
	ТекущаяДата = ТекущаяДатаСеанса();
	ИмяКаталога = КаталогВременныхФайлов() + "\ВыгрузкаМодулей" + Строка(Год(ТекущаяДата)) + Строка(Месяц(ТекущаяДата)) + Строка(День(ТекущаяДата)) 
		+ Строка(Час(ТекущаяДата)) + Строка(Минута(ТекущаяДата)) + Строка(Секунда(ТекущаяДата));
		СоздатьКаталог(ИмяКаталога);
	КаталогВыгрузкиМодулей = ИмяКаталога;
	ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСостояниеФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если АдресБазы = "ЭтаБаза" Тогда
		
		Индекс = ПроверяемыеРеквизиты.Найти("СтрокаПодключения");
		Если Индекс <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли;
		
	ИначеЕсли АдресБазы = "УказаннаяБаза" И Не ПустаяСтрока(СтрокаПодключения) И Не ЭтоФайловаяБаза(ЭтотОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресБазыПриИзменении(Элемент)
	ОбновитьСостояниеФормы(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
#Если Не ВебКлиент Тогда
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСоединения = ПолучитьСтрокуСоединения(ЭтотОбъект);
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	ПервыйСимволПути = ФайловаяБаза + 6;
	СтрокаСоединения = Сред(СтрокаСоединения, ПервыйСимволПути);
	ПоследнийСимволПути = СтрНайти(СтрокаСоединения, ";");
	СтрокаСоединения = Лев(СтрокаСоединения, ПоследнийСимволПути - 2);
	КаталогИБ = СтрокаСоединения;
	ПолучитьИмяПарольАдминистратораИБ();
	
	ОчиститьКаталогСМодулями();
	ВыгрузитьМодулиВФайлы();
	СформироватьКодДляМодуля();
	УдалитьФайлы(КаталогВыгрузкиМодулей);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Результат;
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьКаталогСМодулями()
	
	Состояние(НСтр("ru = 'Очистка каталога для выгрузки модулей'"));
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	Для Каждого Файл Из МассивФайлов Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМодулиВФайлы()
	
#Если Не ВебКлиент Тогда
	Состояние(НСтр("ru = 'Выгрузка модулей конфигурации в файлы'"));
	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КаталогКонфигурации = КаталогИБ;
	Пользователь = ИмяАдминистратораИБ;
	Пароль = ПарольАдминистратораИБ;
	КоманднаяСтрока = СтрокаЗапускаПлатформы + " DESIGNER /F"""
	                + КаталогКонфигурации + """ /N"""
	                + Пользователь + """ /P""" + Пароль
	                + """ /DumpConfigFiles """ + КаталогВыгрузкиМодулей
	                + """ -Module";
	
	ЗапуститьПриложение(КоманднаяСтрока,,Истина);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКодДляМодуля()
	
	Состояние(НСтр("ru = 'Генерация кода...'"));
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиМодулей, "*.txt");
	ТекстФайла = Новый ТекстовыйДокумент;
	
	КодГрупповоеИзменениеОбъектов = "";
	КодЗапретРедактированияРеквизитовОбъектов = "";
	Для Каждого Файл Из МассивФайлов Цикл
		ИмяОбъекта = "";
		
		Модуль = РазложитьСтрокуВМассивПодстрок(Файл.Имя, ".");
		Если Модуль.Количество() < 2 ИЛИ Модуль[2] <> "МодульМенеджера" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектВходитВСтандартныеПодсистемы(Модуль[0] + "." + Модуль[1]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстФайла.Прочитать(Файл.ПолноеИмя);
		СтрокаТекста = ТекстФайла.ПолучитьТекст();
		
		// ГрупповоеИзменениеОбъектов
		СтрокаКодаГрупповоеИзменениеОбъектов = "";
		Разделитель = "";
		ПроцедураПрисутствует = СтрНайти(СтрокаТекста, "РеквизитыРедактируемыеВГрупповойОбработке");
		Если ПроцедураПрисутствует Тогда
			СтрокаКодаГрупповоеИзменениеОбъектов = "РеквизитыРедактируемыеВГрупповойОбработке";
			Разделитель = ", ";
		КонецЕсли;
		
		ПроцедураПрисутствует = СтрНайти(СтрокаТекста, "РеквизитыНеРедактируемыеВГрупповойОбработке");
		Если ПроцедураПрисутствует Тогда
			СтрокаКодаГрупповоеИзменениеОбъектов = СтрокаКодаГрупповоеИзменениеОбъектов + Разделитель + "РеквизитыНеРедактируемыеВГрупповойОбработке";
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаКодаГрупповоеИзменениеОбъектов) Тогда
			ИмяОбъекта = ИмяОбъектаМетаданных(Модуль);
			Если ЗначениеЗаполнено(ИмяОбъекта) Тогда 
				КодГрупповоеИзменениеОбъектов = КодГрупповоеИзменениеОбъектов + "Объекты.Вставить(" + ИмяОбъекта + ", """ +  СтрокаКодаГрупповоеИзменениеОбъектов + """);" + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		// ЗапретРедактированияРеквизитовОбъектов
		ПроцедураПрисутствует = СтрНайти(СтрокаТекста, "ПолучитьБлокируемыеРеквизитыОбъекта");
		Если ПроцедураПрисутствует Тогда
			Если НЕ ЗначениеЗаполнено(ИмяОбъекта) Тогда
				ИмяОбъекта = ИмяОбъектаМетаданных(Модуль);
				Если НЕ ЗначениеЗаполнено(ИмяОбъекта) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			КодЗапретРедактированияРеквизитовОбъектов = КодЗапретРедактированияРеквизитовОбъектов + "Объекты.Вставить(" + ИмяОбъекта + ", ""ПолучитьБлокируемыеРеквизитыОбъекта"");" + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапретРедактированияРеквизитовОбъектовПереопределяемый = КодЗапретРедактированияРеквизитовОбъектов;
	ТекстГрупповоеИзменениеОбъектовПереопределяемый = КодГрупповоеИзменениеОбъектов;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяОбъектаМетаданных(Модуль)
	
	ИмяОбъекта = Модуль[0];
	ИмяОбъектаВерхнийРегистр = ВРег(Модуль[0]);
	Если ИмяОбъектаВерхнийРегистр = "СПРАВОЧНИК" Тогда
		ИмяОбъекта = "Метаданные.Справочники."+ Модуль[1]+ ".ПолноеИмя()";
	ИначеЕсли ИмяОбъектаВерхнийРегистр = "ДОКУМЕНТ" Тогда
		ИмяОбъекта = "Метаданные.Документы."+ Модуль[1]+ ".ПолноеИмя()";
	ИначеЕсли ИмяОбъектаВерхнийРегистр = "ЗАДАЧА" Тогда
		ИмяОбъекта = "Метаданные.Задачи."+ Модуль[1]+ ".ПолноеИмя()";
	ИначеЕсли ИмяОбъектаВерхнийРегистр = "БИЗНЕСПРОЦЕСС" Тогда
		ИмяОбъекта = "Метаданные.БизнесПроцессы."+ Модуль[1]+ ".ПолноеИмя()";
	ИначеЕсли ИмяОбъектаВерхнийРегистр = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		ИмяОбъекта = "Метаданные.ПланыВидовХарактеристик."+ Модуль[1]+ ".ПолноеИмя()";
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяОбъекта
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФайловаяБаза(Форма)
	
	Если Форма.АдресБазы = "УказаннаяБаза" Тогда
		СтрокаСоединения = Форма.СтрокаПодключения;
	Иначе
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	ФайловаяБаза = СтрНайти(СтрокаСоединения, "File=");
	
	Если ФайловаяБаза = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru ='Данная обработка предназначена для использования с файловой базой'");
		Сообщение.Поле = "СтрокаПодключения";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСоединения(Форма)
	
	Если Форма.АдресБазы = "УказаннаяБаза" Тогда
		Возврат Форма.СтрокаПодключения;
	Иначе
		Возврат СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьСостояниеФормы(Форма)
	Форма.Элементы.ГруппаПодключение.Доступность = (Форма.АдресБазы = "УказаннаяБаза");
КонецФункции

&НаСервере
Процедура ПолучитьИмяПарольАдминистратораИБ()
	
	Если АдресБазы = "ЭтаБаза" Тогда
		ИмяАдминистратораИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
		ПарольАдминистратораИБ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ОбъектВходитВСтандартныеПодсистемы(ИмяОбъекта)
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат ПоискОбъектаВПодсистемах(Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы, ОбъектМетаданных);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ПоискОбъектаВПодсистемах(Подсистемы, ОбъектМетаданных )
	Для Каждого Подсистема Из Подсистемы Цикл
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			РезультатПоиска = ПоискОбъектаВПодсистемах(Подсистема.Подсистемы, ОбъектМетаданных );
		КонецЕсли;
		Если РезультатПоиска = Истина ИЛИ Подсистема.Состав.Содержит(ОбъектМетаданных) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти




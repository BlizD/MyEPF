{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{37,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,"ВыполнитьПереходНаВерсию",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{38,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьПереходНаВерсиюРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{39,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиДоОбновления",1,0,
{1,0},
{1,0},
{1,
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогВыгрузкиДоОбновленияНачалоВыбора",0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{40,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиДоОбновленияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{41,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиДоОбновленияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"КаталогВыгрузкиПослеОбновления",1,0,
{1,0},
{1,0},
{1,
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"КаталогВыгрузкиПослеОбновленияНачалоВыбора",0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КаталогВыгрузкиПослеОбновленияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{32,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КаталогВыгрузкиПослеОбновленияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{42,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,3,"ВыполнитьОтложеннуюИнициализацию",1,0,
{1,1,
{"ru","Перейти на отложенную инициализацию свойств"}
},
{1,0},
{1,
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0,0,0},1,
{21,
{43,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ВыполнитьОтложеннуюИнициализациюКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{44,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьОтложеннуюИнициализациюРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},"","",0,1,"",0,0,0,0,0,0,3,3,0,0,0},"&НаСервере
Перем Разыменователь, СоответствиеВыражений, ТекстовыйДокумент, ФлагОшибки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогВыгрузкиДоОбновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогВыгрузкиДоОбновления;
	
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогВыгрузкиДоОбновления = ДиалогВыбора.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПослеОбновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогВыгрузкиПослеОбновления;
	
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогВыгрузкиПослеОбновления = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПереходНаВерсию(Команда)
	
	Результат = Новый ТекстовыйДокумент;
	ВыполнитьПереходНаВерсиюНаСервере(Результат);
	
	Если Результат.КоличествоСтрок() = 0 Тогда
		Результат.ДобавитьСтроку(НСтр(""ru = 'Действия по переходу на версию 2.3.1 выполнены успешно'""));
	КонецЕсли;
	
	Результат.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьПереходНаВерсиюНаСервере(Результат)
	
	ТекстовыйДокумент = Результат;
	
	// Определяемые типы.
	ЗаполнитьСоставОпределяемыхТипов();
	
	// Свойства.
	ВнедритьСвойства();
	
	// Печать.
	ВнедритьПечать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставОпределяемыхТипов()
	
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространстваИмен());
	СоответствиеВыражений = СоответствиеВыражений();
	
	#Область БизнесПроцессыИЗадачи
	Если ПодсистемаВнедрена(""БизнесПроцессыИЗадачи"") Тогда
		// команда КартаМаршрутаБизнесПроцесса
		ИмяОбщейКоманды = ""ЗадачиПоБизнесПроцессу"";
		ИмяОпределяемогоТипа = ""БизнесПроцесс"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
		
		ИмяОбщейКоманды = ""РолиИИсполнителиЗадач"";
		ИмяОпределяемогоТипа = ""ОбъектАдресации"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
		
		ИмяОбщейКоманды = ""ЗадачиПоПредмету"";
		ИмяОпределяемогоТипа = ""ПредметЗадачи"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
	КонецЕсли;
	#КонецОбласти
	
	#Область ВерсионированиеОбъектов
	Если ПодсистемаВнедрена(""ВерсионированиеОбъектов"") Тогда
		ИмяОбщейКоманды = ""ИсторияИзменений"";
		ИмяОпределяемогоТипа = ""ВерсионируемыеДанные"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
		
		ШаблонИмени = ""ЗаписатьВерсиюОбъекта"";
		ИмяОпределяемогоТипа = ""ВерсионируемыеДанныеОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени);
	КонецЕсли;
	#КонецОбласти
	
	#Область ДатыЗапретаИзменения
	Если ПодсистемаВнедрена(""ДатыЗапретаИзменения"") Тогда
		ИмяОпределяемогоТипа = ""АдресатЗапретаИзменения""; // Есть перечисление ссылка, ИОМ не нужен
		ИмяРегистра = ""ДатыЗапретаИзменения"";
		ИмяИзмерения = ""Пользователь"";
		ТипОбъекта = ""InformationRegister"";
		ДополнитьСоставОпределяемогоТипаИзРеквизита(ИмяОпределяемогоТипа, ИмяРегистра, ИмяИзмерения, ТипОбъекта);
	КонецЕсли;
	#КонецОбласти
	
	#Область ДополнительныеОтчетыИОбработки
	Если ПодсистемаВнедрена(""ДополнительныеОтчетыИОбработки"") Тогда
		ИмяОбщейКоманды = ""ЗаполнениеОбъекта"";
		ИмяОпределяемогоТипа = ""ОбъектСДополнительнымиКомандами"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
			
		ИмяОбщейКоманды = ""ОтчетыОбъекта"";
		ИмяОпределяемогоТипа = ""ОбъектСДополнительнымиКомандами"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");

		ИмяОбщейКоманды = ""СозданиеСвязанныхОбъектов"";
		ИмяОпределяемогоТипа = ""ОбъектСДополнительнымиКомандами"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗаметкиПользователя
	Если ПодсистемаВнедрена(""ЗаметкиПользователя"") Тогда
		// Команда МоиЗаметкиПоПредмету
		ИмяОбщейКоманды = ""СоздатьЗаметкуПоПредмету"";
		ИмяОпределяемогоТипа = ""ПредметЗаметок"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
		
		ШаблонИмени = ""ПометитьНаУдалениеЗаметкиПоПредмету"";
		ИмяОпределяемогоТипа = ""ПредметЗаметокОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени);
	КонецЕсли;
	#КонецОбласти
	
	#Область КонтактнаяИнформация
	Если ПодсистемаВнедрена(""КонтактнаяИнформация"") Тогда
		// Подписка ОбновитьКонтактнуюИнформацию
		ШаблонИмени = ""ЗаполнитьКонтактнуюИнформацию"";
		ИмяОпределяемогоТипа = ""ВладелецКонтактнойИнформации"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени, Истина);
	КонецЕсли;
	#КонецОбласти
	
	#Область НапоминанияПользователя
	Если ПодсистемаВнедрена(""НапоминанияПользователя"") Тогда
		ИмяОбщейКоманды = ""Напомнить"";
		ИмяОпределяемогоТипа = ""ПредметНапоминания"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
		
		ИмяПодписки = ""ПроверитьИзмененияДатВПредмете"";
		ИмяОпределяемогоТипа = ""ПредметНапоминанияОбъект"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяПодписки, ""EventSubscription"");
	КонецЕсли;
	#КонецОбласти
	
	#Область НастройкаПорядкаЭлементов
	Если ПодсистемаВнедрена(""НастройкаПорядкаЭлементов"") Тогда
		// СброситьЗначениеРеквизитаУпорядочивания
		ШаблонИмени = ""ЗаполнитьЗначениеРеквизитаУпорядочивания"";
		ИмяОпределяемогоТипа = ""ОбъектСНастраиваемымПорядком"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени);
	КонецЕсли;
	#КонецОбласти
	
	#Область Пользователи
	Если ПодсистемаВнедрена(""Пользователи"") Тогда
		ИмяПодписки = ""ОбновитьПредставлениеВнешнегоПользователя"";
		ИмяОпределяемогоТипа = ""ВнешнийПользовательОбъект"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяПодписки, ""EventSubscription"");
	КонецЕсли;
	#КонецОбласти
	
	#Область ПрисоединенныеФайлы
	Если ПодсистемаВнедрена(""ПрисоединенныеФайлы"") Тогда
		ИмяРегистра = ""НаличиеПрисоединенныхФайлов"";
		ИмяОпределяемогоТипа = ""ВладелецПрисоединенныхФайлов"";
		ИмяИзмерения = ""ОбъектСФайлами"";
		ТипОбъекта = ""InformationRegister"";
		ДополнитьСоставОпределяемогоТипаИзРеквизита(ИмяОпределяемогоТипа, ИмяРегистра, ИмяИзмерения, ТипОбъекта);
		
		ИмяРегистра = ""ПрисоединенныеФайлы"";
		ИмяОпределяемогоТипа = ""ПрисоединенныйФайл""; // Используется только для регистра. Если тип будет пустой, то конфигурация сохранится
		ИмяИзмерения = ""ПрисоединенныйФайл"";
		ТипОбъекта = ""InformationRegister"";
		ДополнитьСоставОпределяемогоТипаИзРеквизита(ИмяОпределяемогоТипа, ИмяРегистра, ИмяИзмерения, ТипОбъекта);
		
		ШаблонИмени = ""ВыполнитьДействияПередЗаписьюПрисоединенногоФайла"";
		// ВыполнитьДействияПередУдалениемПрисоединенногоФайла
		// ВыполнитьДействияПриЗаписиПрисоединенногоФайла.
		ИмяОпределяемогоТипа = ""ПрисоединенныйФайлОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени);
		
		ШаблонИмени = ""УстановитьПометкуУдаленияПрисоединенныхФайлов"";
		ИмяОпределяемогоТипа = ""ВладелецПрисоединенныхФайловОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени, Истина);
	КонецЕсли;
	#КонецОбласти
	
	#Область РаботаСКонтрагентами
	Если ПодсистемаВнедрена(""РаботаСКонтрагентами"") Тогда
		ИмяПодписки = ""СохранитьРезультатПроверкиКонтрагента"";
		ИмяОпределяемогоТипа = ""КонтрагентОбъект"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяПодписки, ""EventSubscription"");
	КонецЕсли;
	#КонецОбласти
	
	#Область РаботаСФайлами
	Если ПодсистемаВнедрена(""РаботаСФайлами"") Тогда
		ШаблонИмени = ""УстановитьПометкуУдаленияФайлов"";
		ИмяОпределяемогоТипа = ""ВладелецФайловОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени, Истина);
	КонецЕсли;
	#КонецОбласти
	
	#Область Свойства
	Если ПодсистемаВнедрена(""Свойства"") Тогда
		// Команда ДополнительныеСведенияПанельНавигации удалена
		ИмяОбщейКоманды = ""ДополнительныеСведенияКоманднаяПанель"";
		ИмяОпределяемогоТипа = ""ВладелецДополнительныхСведений"";
		ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяОбщейКоманды, ""CommonCommand"");
	КонецЕсли;
	#КонецОбласти
	
	#Область УправлениеДоступом
	Если ПодсистемаВнедрена(""УправлениеДоступом"") Тогда
		ИмяСсылочногоТипа = ""ВладелецНастроекПрав"";
		ИмяОбъектногоТипа = ""ВладелецНастроекПравОбъект"";
		// Подписка ОбновитьГруппыВладельцевНастроекПрав
		СкопироватьСоставТиповСсылочногоОпределяемогоТипа(ИмяСсылочногоТипа, ИмяОбъектногоТипа);
		
		// ЗначениеДоступаСГруппамиЗначенийДоступаОбъект для подписки ОбновитьГруппыЗначенийДоступа.
		СоставОпределяемогоТипаГруппаЗначенийДоступаОбъект();
		
		ШаблонИмени = ""ЗаписатьНаборыЗначенийДоступа"";
		ИмяОпределяемогоТипа = ""ВладелецНаборовЗначенийДоступаОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени);
		
		ШаблонИмени = ""ЗаписатьЗависимыеНаборыЗначенийДоступа"";
		ИмяОпределяемогоТипа = ""ВладелецВнешнихЗначенийВНаборахЗначенийДоступаОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени);
		
		ШаблонИмени = ""ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей"";
		ИмяОпределяемогоТипа = ""ВладелецСОграничениемПоНаборамЗначенийДоступаОбъект"";
		ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени, Истина);
		
		ИмяСправочника = ""ГруппыДоступа"";
		ИмяРеквизита = ""ТипПользователей"";
		ИмяОпределяемогоТипа = ""Пользователь"";
		ТипОбъекта = ""Catalog"";
		ДополнитьСоставОпределяемогоТипаИзРеквизита(ИмяОпределяемогоТипа, ИмяСправочника, ИмяРеквизита, ТипОбъекта);
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// Общие процедуры для работы с определяемыми типами

// ТипИсточника = CommonCommand, EventSubscription
&НаСервере
Процедура ДополнитьСоставОпределяемогоТипа(ИмяОпределяемогоТипа, ИмяИсточника, ТипИсточника)
	
	ФлагОшибки = Ложь;
	
	ПутьКФайлуИсточника = ИмяФайлаПоИмениОбъектаИТипу(ТипИсточника, ИмяИсточника);
	ПутьКФайлуОпределяемогоТипа = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", ИмяОпределяемогоТипа);
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOMИсточника = ДокументDOM(ПутьКФайлуИсточника);
	ДокументDOMОпределяемогоТипа = ДокументDOM(ПутьКФайлуОпределяемогоТипа);
	
	СоставОпределяемогоТипа = ВычислитьВыражениеXPath(ДокументDOMОпределяемогоТипа, ""DefinedType"");
	СоответствиеТипов = СоставОпределяемогоТипаВСоответствие(СоставОпределяемогоТипа, ИмяОпределяемогоТипа);
	СоставИсточника = ВычислитьВыражениеXPath(ДокументDOMИсточника, ТипИсточника);
	
	ДобавитьТипыВОпределяемыйТип(СоставИсточника, СоответствиеТипов, ДокументDOMОпределяемогоТипа, СоставОпределяемогоТипа, ИмяОпределяемогоТипа);
	
	ЗаписатьДокументDOMВФайл(ДокументDOMОпределяемогоТипа, ПутьКФайлуОпределяемогоТипа);
	
КонецПроцедуры

// Для измерения регистра сведений
&НаСервере
Процедура ДополнитьСоставОпределяемогоТипаИзРеквизита(ИмяОпределяемогоТипа, ИмяОбъекта, ИмяРеквизита, ТипОбъекта)
	
	ФлагОшибки = Ложь;
	
	ПутьКФайлуОбъекта = ИмяФайлаПоИмениОбъектаИТипу(ТипОбъекта, ИмяОбъекта);
	ПутьКФайлуОпределяемогоТипа = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", ИмяОпределяемогоТипа);
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOMОбъекта = ДокументDOM(ПутьКФайлуОбъекта);
	ДокументDOMОпределяемогоТипа = ДокументDOM(ПутьКФайлуОпределяемогоТипа);
	
	СоставОпределяемогоТипа = ВычислитьВыражениеXPath(ДокументDOMОпределяемогоТипа, ""DefinedType"");
	СоответствиеТипов = СоставОпределяемогоТипаВСоответствие(СоставОпределяемогоТипа, ИмяОпределяемогоТипа);
	
	// Получение состава типов регистра
	Выражение = СоответствиеВыражений.Получить(ТипОбъекта);
	РезультатXPath = ДокументDOMОбъекта.ВычислитьВыражениеXPath(Выражение, ДокументDOMОбъекта, Разыменователь);
	
	// Определение нужного измерения
	Пока Истина Цикл
		
		СписокРеквизитов = РезультатXPath.ПолучитьСледующий();
		Если СписокРеквизитов = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если СписокРеквизитов.РодительскийУзел.ПервыйДочерний.ТекстовоеСодержимое = ИмяРеквизита Тогда
			СоставИсточника = СписокРеквизитов;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьТипыВОпределяемыйТип(СоставИсточника, СоответствиеТипов, ДокументDOMОпределяемогоТипа, СоставОпределяемогоТипа, ИмяОпределяемогоТипа);
	
	ЗаписатьДокументDOMВФайл(ДокументDOMОпределяемогоТипа, ПутьКФайлуОпределяемогоТипа);
	
КонецПроцедуры

// Если подписок с именем по шаблону несколько
&НаСервере
Процедура ДополнитьСоставОпределяемогоТипаИзПодписок(ИмяОпределяемогоТипа, ШаблонИмени, ИсключатьДокументы = Ложь)
	
	ФлагОшибки = Ложь;
	
	МассивФайлов = ФайлыПодписокПоШаблону(ШаблонИмени);
	ПутьКФайлуОпределяемогоТипа = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", ИмяОпределяемогоТипа);
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOMОпределяемогоТипа = ДокументDOM(ПутьКФайлуОпределяемогоТипа);
	
	СоставОпределяемогоТипа = ВычислитьВыражениеXPath(ДокументDOMОпределяемогоТипа, ""DefinedType"");
	СоответствиеТипов = СоставОпределяемогоТипаВСоответствие(СоставОпределяемогоТипа, ИмяОпределяемогоТипа);
	
	Для Каждого ФайлПодписки Из МассивФайлов Цикл
		
		ДокументDOMИсточника = ДокументDOM(ФайлПодписки.ПолноеИмя);
		
		// Получение состава источника
		Выражение = СоответствиеВыражений.Получить(""EventSubscription"");
		РезультатXPath = ДокументDOMИсточника.ВычислитьВыражениеXPath(Выражение, ДокументDOMИсточника, Разыменователь);
		СоставИсточника = РезультатXPath.ПолучитьСледующий();
		
		Для Каждого Узел Из СоставИсточника.ДочерниеУзлы Цикл
			
			Если ИсключатьДокументы И Лев(Узел.ТекстовоеСодержимое, 12) = ""cfg:Document"" Тогда
				Прервать;
			КонецЕсли;
			
			Если СоответствиеТипов.Получить(Узел.ТекстовоеСодержимое) = Неопределено Тогда
				
				НовыйУзел = ДокументDOMОпределяемогоТипа.СоздатьЭлемент(""v8:Type"");
				НовыйУзел.ТекстовоеСодержимое = Узел.ТекстовоеСодержимое;
				СоставОпределяемогоТипа.ДобавитьДочерний(НовыйУзел);
				СоответствиеТипов.Вставить(Узел.ТекстовоеСодержимое, Истина); // Защита от дублей в типе
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьДокументDOMВФайл(ДокументDOMОпределяемогоТипа, ПутьКФайлуОпределяемогоТипа);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСоставТиповСсылочногоОпределяемогоТипа(СсылочныйТип, ОбъектныйТип)
	
	ФлагОшибки = Ложь;
	
	ПутьКФайлуСсылочногоТипа = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", СсылочныйТип);
	ПутьКФайлуОбъектногоТипа = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", ОбъектныйТип);
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOMСсылочный = ДокументDOM(ПутьКФайлуСсылочногоТипа);
	ДокументDOMОбъектный = ДокументDOM(ПутьКФайлуОбъектногоТипа);
	
	СоставОпределяемогоТипа = ОчиститьСоставОпределяемогоТипа(ДокументDOMОбъектный, Разыменователь);
	
	// Получение состава определяемого типа
	СоставТипа = ВычислитьВыражениеXPath(ДокументDOMСсылочный, ""DefinedType"");
	
	Для Каждого Узел Из СоставТипа.ДочерниеУзлы Цикл
		
		НовыйУзел = ДокументDOMОбъектный.СоздатьЭлемент(""v8:Type"");
		НовыйУзел.ТекстовоеСодержимое = ЗаменитьКлассНаОбъект(Узел.ТекстовоеСодержимое);
		СоставОпределяемогоТипа.ДобавитьДочерний(НовыйУзел);
		
	КонецЦикла;
	
	ЗаписатьДокументDOMВФайл(ДокументDOMОбъектный, ПутьКФайлуОбъектногоТипа);
	
КонецПроцедуры

&НаСервере
Процедура СоставОпределяемогоТипаГруппаЗначенийДоступаОбъект()
	
	// Алгоритм работы:
	// Получить состав подписки ОбновитьГруппыЗначенийДоступа
	// Получить состав определяемого типа ВладелецНастроекПравОбъект
	// Вычесть из состава подписки ОбновитьГруппыЗначенийДоступа состав определяемого типа ВладелецНастроекПрав
	// Результат записать в определяемый тип ГруппаЗначенийДоступаОбъект.
	
	ФлагОшибки = Ложь;
	
	ФайлВладелецНастроекПравОбъект = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", ""ВладелецНастроекПравОбъект"");
	ФайлОбновитьГруппыЗначенийДоступа = ИмяФайлаПоИмениОбъектаИТипу(""EventSubscription"", ""ОбновитьГруппыЗначенийДоступа"");
	ФайлГруппаЗначенийДоступаОбъект = ИмяФайлаПоИмениОбъектаИТипу(""DefinedType"", ""ЗначениеДоступаСГруппамиЗначенийДоступаОбъект"");
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOMВладелецНастроекПравОбъект = ДокументDOM(ФайлВладелецНастроекПравОбъект);
	ДокументDOMОбновитьГруппыЗначенийДоступа = ДокументDOM(ФайлОбновитьГруппыЗначенийДоступа);
	ДокументDOMГруппаЗначенийДоступаОбъект = ДокументDOM(ФайлГруппаЗначенийДоступаОбъект);
	
	// Получение состава определяемого типа
	СоставОпределяемогоТипа = ВычислитьВыражениеXPath(ДокументDOMВладелецНастроекПравОбъект, ""DefinedType"");
	СоответствиеТипа = СоставОпределяемогоТипаВСоответствие(СоставОпределяемогоТипа, ""ВладелецНастроекПравОбъект"");
	
	// Получение состава подписки
	СоставПодписки = ВычислитьВыражениеXPath(ДокументDOMОбновитьГруппыЗначенийДоступа, ""EventSubscription"");
	СоответствиеПодписки = СоставОпределяемогоТипаВСоответствие(СоставПодписки, ""ОбновитьГруппыЗначенийДоступа"");
	
	СоответствиеНовогоТипа = Новый Соответствие;
	Для Каждого Тип Из СоответствиеПодписки Цикл
		
		Если СоответствиеТипа.Получить(Тип.Ключ) = Неопределено Тогда
			СоответствиеНовогоТипа.Вставить(Тип.Ключ, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	СоставНовогоТипа = ВычислитьВыражениеXPath(ДокументDOMГруппаЗначенийДоступаОбъект, ""DefinedType"");
	СоответствиеТекущее = СоставОпределяемогоТипаВСоответствие(СоставНовогоТипа, ""ЗначениеДоступаСГруппамиЗначенийДоступаОбъект"");
	
	Для Каждого Тип Из СоответствиеНовогоТипа Цикл
		
		Если СоответствиеТекущее.Получить(Тип.Ключ) = Неопределено Тогда
			
			НовыйУзел = ДокументDOMГруппаЗначенийДоступаОбъект.СоздатьЭлемент(""v8:Type"");
			НовыйУзел.ТекстовоеСодержимое = Тип.Ключ;
			СоставНовогоТипа.ДобавитьДочерний(НовыйУзел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДокументDOMВФайл(ДокументDOMГруппаЗначенийДоступаОбъект, ФайлГруппаЗначенийДоступаОбъект);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////
// Вспомогательные процедуры для работы с определяемыми типами

&НаСервере
Функция СоответствиеПространстваИмен()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(""ns"", ""http://v8.1c.ru/8.3/MDClasses"");
	Соответствие.Вставить(""app"", ""http://v8.1c.ru/8.2/managed-application/core"");
	Соответствие.Вставить(""cfg"",""http://v8.1c.ru/8.1/data/enterprise/current-config"");
	Соответствие.Вставить(""cmi"", ""http://v8.1c.ru/8.2/managed-application/cmi"");
	Соответствие.Вставить(""ent"", ""http://v8.1c.ru/8.1/data/enterprise"");
	Соответствие.Вставить(""lf"", ""http://v8.1c.ru/8.2/managed-application/logform"");
	Соответствие.Вставить(""style"", ""http://v8.1c.ru/8.1/data/ui/style"");
	Соответствие.Вставить(""sys"", ""http://v8.1c.ru/8.1/data/ui/fonts/system"");
	Соответствие.Вставить(""v8"", ""http://v8.1c.ru/8.1/data/core"" );
	Соответствие.Вставить(""v8ui"", ""http://v8.1c.ru/8.1/data/ui"");
	Соответствие.Вставить(""web"", ""http://v8.1c.ru/8.1/data/ui/colors/web"");
	Соответствие.Вставить(""win"", ""http://v8.1c.ru/8.1/data/ui/colors/windows"");
	Соответствие.Вставить(""xen"", ""http://v8.1c.ru/8.3/xcf/enums"");
	Соответствие.Вставить(""xpr"", ""http://v8.1c.ru/8.3/xcf/predef"");
	Соответствие.Вставить(""xr"", ""http://v8.1c.ru/8.3/xcf/readable"");
	Соответствие.Вставить(""xs"", ""http://www.w3.org/2001/XMLSchema"");
	Соответствие.Вставить(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция СоответствиеВыражений()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(""CommonCommand"", ""/ns:MetaDataObject/ns:CommonCommand/ns:Properties/ns:CommandParameterType"");
	Соответствие.Вставить(""EventSubscription"", ""/ns:MetaDataObject/ns:EventSubscription/ns:Properties/ns:Source"");
	Соответствие.Вставить(""DefinedType"", ""/ns:MetaDataObject/ns:DefinedType/ns:Properties/ns:Type"");
	Соответствие.Вставить(""InformationRegister"", ""/ns:MetaDataObject/ns:InformationRegister/ns:ChildObjects/ns:Dimension/ns:Properties/ns:Type"");
	Соответствие.Вставить(""Catalog"", ""/ns:MetaDataObject/ns:Catalog/ns:ChildObjects/ns:Attribute/ns:Properties/ns:Type"");
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ВычислитьВыражениеXPath(ДокументDOM, ТипИсточника)
	
	Выражение = СоответствиеВыражений.Получить(ТипИсточника);
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	Возврат РезультатXPath.ПолучитьСледующий();
	
КонецФункции

&НаСервере
Функция ИмяФайлаПоИмениОбъектаИТипу(ИмяТипа, ИмяОбъекта)
	
	Каталог = ?(ИмяТипа = ""DefinedType"", КаталогВыгрузкиПослеОбновления, КаталогВыгрузкиДоОбновления);
	ИмяФайла = Каталог + ""\"" + ИмяТипа + ""."" + ИмяОбъекта + "".xml"";
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		Возврат ИмяФайла;
	Иначе
		
		ФлагОшибки = Истина;
		ШаблонОшибки = НСтр(""ru = 'Файл %1 не найден.'"");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяФайла);
		ТекстовыйДокумент.ДобавитьСтроку(СтрокаОшибки);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

&НаСервере
// Очищает состав определяемого типа и возвращает узел типа
//
Функция ОчиститьСоставОпределяемогоТипа(ДокументDOM, Разыменователь)
	
	Выражение = СоответствиеВыражений.Получить(""DefinedType"");
	СоставТипа = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	Родитель = СоставТипа.ПолучитьСледующий();
	Пока Родитель.ЕстьДочерниеУзлы() Цикл
		Родитель.УдалитьДочерний(Родитель.ПервыйДочерний);
	КонецЦикла;
	
	Возврат Родитель;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
КонецПроцедуры

&НаСервере
Функция ФайлыПодписокПоШаблону(ШаблонИмени)
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиДоОбновления, ""EventSubscription.*"" + ШаблонИмени + ""*.xml"");
	
	Если МассивФайлов.Количество() = 0 Тогда
		ФлагОшибки = Истина;
		ШаблонОшибки = НСтр(""ru = 'Не найдены файлы подписок с именами по шаблону """"%1""""'"");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ШаблонИмени);
		ТекстовыйДокумент.ДобавитьСтроку(СтрокаОшибки);
	Иначе
		Возврат МассивФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПодсистемаВнедрена(ИмяПодсистемы)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Возврат Подсистема <> Неопределено;
	
КонецФункции

&НаСервере
Функция СтруктураТипа(СтрокаТипа)
	
	СтруктураТипа = Новый Структура(""Префикс, Тип, Класс, ИмяОбъекта"");
	
	МассивСтроки = СтрРазделить(СтрокаТипа, "":"");
	СтруктураТипа.Префикс = МассивСтроки[0];
	МассивСтроки = СтрРазделить(МассивСтроки[1], ""."");
	
	СтрокаТипКласс = МассивСтроки[0];
	ДлинаТипКласс = СтрДлина(СтрокаТипКласс);
	Если Прав(СтрокаТипКласс, 3) = ""Ref"" Тогда
		СтруктураТипа.Тип = Лев(СтрокаТипКласс, ДлинаТипКласс - 3);
		СтруктураТипа.Класс = ""Ref"";
	ИначеЕсли Прав(СтрокаТипКласс, 6) = ""Object"" Тогда
		СтруктураТипа.Тип = Лев(СтрокаТипКласс, ДлинаТипКласс - 6);
		СтруктураТипа.Класс = ""Object"";
	ИначеЕсли Прав(СтрокаТипКласс, 7) = ""Manager"" Тогда
		СтруктураТипа.Тип = Лев(СтрокаТипКласс, ДлинаТипКласс - 7);
		СтруктураТипа.Класс = ""Manager"";
	Иначе
		ВызватьИсключение НСтр(""ru = 'Неподдерживаемый тип'"");
	КонецЕсли;
	
	СтруктураТипа.ИмяОбъекта = МассивСтроки[1];
	
	Возврат СтруктураТипа;
	
КонецФункции

&НаСервере
Функция СтрокаТипаИзСтруктуры(СтруктураТипа)
	
	Возврат СтруктураТипа.Префикс + "":"" + СтруктураТипа.Тип + СтруктураТипа.Класс + ""."" + СтруктураТипа.ИмяОбъекта;
	
КонецФункции

&НаСервере
Функция ЗаменитьКлассНаОбъект(СтрокаТипа)
	
	СтруктураТипа = СтруктураТипа(СтрокаТипа);
	СтруктураТипа.Класс = ""Object"";
	Возврат СтрокаТипаИзСтруктуры(СтруктураТипа);
	
КонецФункции

&НаСервере
Функция СоставОпределяемогоТипаВСоответствие(СоставОпределяемогоТипа, ИмяОпределяемогоТипа)
	
	СоответствиеТипов = Новый Соответствие;
	
	// Сохраняем состав определяемого типа для защиты от дублирования типов
	Для Каждого Узел Из СоставОпределяемогоТипа.ДочерниеУзлы Цикл
		СоответствиеТипов.Вставить(Узел.ТекстовоеСодержимое, Истина);
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

&НаСервере
Процедура ДобавитьТипыВОпределяемыйТип(СоставИсточника, СоответствиеТипов, ДокументDOMОпределяемогоТипа, СоставОпределяемогоТипа, ИмяОпределяемогоТипа)
	
	Для Каждого Узел Из СоставИсточника.ДочерниеУзлы Цикл
		
		Если СоответствиеТипов.Получить(Узел.ТекстовоеСодержимое) = Неопределено Тогда
			
			Если Узел.ИмяЭлемента = ""v8:TypeSet"" Тогда
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'Не удалось перенести в состав определяемого типа %1 тип %2'""),
					ИмяОпределяемогоТипа, СтрРазделить(Узел.ТекстовоеСодержимое, "":"")[1]);
				ТекстовыйДокумент.ДобавитьСтроку(СтрокаОшибки);
				Продолжить;
			КонецЕсли;
			
			НовыйУзел = ДокументDOMОпределяемогоТипа.СоздатьЭлемент(""v8:Type"");
			НовыйУзел.ТекстовоеСодержимое = Узел.ТекстовоеСодержимое;
			СоставОпределяемогоТипа.ДобавитьДочерний(НовыйУзел);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Блок по переходу от подсистемы Свойства.

&НаСервере
Процедура ВнедритьСвойства()
	
	МассивФайловМодулей = НайтиФайлы(КаталогВыгрузкиПослеОбновления, ""*.txt"");
	ТекстФайлаМодуля    = Новый ТекстовыйДокумент;
	СтрокаПоиска        = ""УправлениеСвойствами.ПриСозданииНаСервере("";
	ШаблонСообщенияСвойстваВОбщемМодуле = НСтр(""ru = 'Подключение свойств для формы выполняется в общем модуле,
		|автоматический переход невозможен. Требуется вручную выполнить переход
		|на новую версию по подсистеме """"Свойства"""" для таких форм.
		|Найденные вызовы:
		|'"");
	ШаблонСообщенийОшибкаВнедрения = НСтр(""ru = 'В следующих формах обнаружено не типовое внедрение.
		|Требуется вручную определить необходимость перехода на новую версию в таких местах:
		|'"");
	
	ШаблонСообщенийНесколькоВызовов = НСтр(""ru = 'В следующих объектах обнаружено несколько вызовов
		|метода """"УправлениеСвойствами.ПриСозданииНаСервере("""". Требуется вручную выполнить
		|переход на новую версию в этих объектах:
		|'"");
	
	СтрокаОшибокСвойстваВОбщемМодуле  = """";
	СтрокаОшибокНеправильноеВнедрение = """";
	СтрокаОшибокНесколькоВызовов      = """";
	
	Для Каждого ФайлМодуля Из МассивФайловМодулей Цикл
		ТекстФайлаМодуля.Прочитать(ФайлМодуля.ПолноеИмя);
		СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
		
		Позиция = СтрНайти(СтрокаТекста, СтрокаПоиска);
		Если Позиция = 0
			Или СокрЛП(Сред(СтрокаТекста, Позиция - 1, 1)) <> """"
			Или ЭтоКомментарий(СтрокаТекста, Позиция) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(СтрокаТекста, СтрокаПоиска) > 1 Тогда
			Если Не ЗначениеЗаполнено(СтрокаОшибокНесколькоВызовов) Тогда
				СтрокаОшибокНесколькоВызовов = ШаблонСообщенийНесколькоВызовов;
			КонецЕсли;
			СтрокаОшибокНесколькоВызовов = СтрокаОшибокНесколькоВызовов
				+ ФайлМодуля.ИмяБезРасширения + Символы.ПС;
			Продолжить;
		КонецЕсли;
		
		// Переход на новый программный интерфейс.
		НомерСтроки = НомерСтроки(СтрокаТекста, Позиция);
		ИмяЭлементаДляРазмещения = """";
		ИмяСтруктурыПараметров = """";
		ПерейтиНаНовыйПрограммныйИнтерфейс(ТекстФайлаМодуля, НомерСтроки, ИмяЭлементаДляРазмещения, ИмяСтруктурыПараметров);
		
		Если СтрНайти(ФайлМодуля.ПолноеИмя, ""CommonModule"") > 0 Тогда
			Если Не ЗначениеЗаполнено(СтрокаОшибокСвойстваВОбщемМодуле) Тогда
				СтрокаОшибокСвойстваВОбщемМодуле = ШаблонСообщенияСвойстваВОбщемМодуле;
			КонецЕсли;
			ИмяМодуляМассив = СтрРазделить(ФайлМодуля.ПолноеИмя, ""."");
			СтрокаОшибокСвойстваВОбщемМодуле = СтрокаОшибокСвойстваВОбщемМодуле
				+ НСтр(""ru = 'Имя модуля:'"") + "" "" + ИмяМодуляМассив[1] + "", "" + НСтр(""ru ='строка'"") + "" "" + НомерСтроки
				+ Символы.ПС;
			Продолжить; // Дальнейшие действия проводятся только в модулях форм.
		КонецЕсли;
		
		// Поддержка настройки зависимостей реквизитов.
		СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
		Если СтрНайти(СтрокаТекста, ""УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов("") = 0 Тогда
			ТекстОшибки = """";
			ВыполнитьОбязательныеДействия(ТекстФайлаМодуля, СтрокаТекста, ФайлМодуля.ПолноеИмя, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если Не ЗначениеЗаполнено(СтрокаОшибокНеправильноеВнедрение) Тогда
					СтрокаОшибокНеправильноеВнедрение = ШаблонСообщенийОшибкаВнедрения;
				КонецЕсли;
				СтрокаОшибокНеправильноеВнедрение = СтрокаОшибокНеправильноеВнедрение
					+ ТекстОшибки + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		// Отложенная загрузка дополнительных реквизитов.
		Если ВыполнитьОтложеннуюИнициализацию Тогда
			ПерейтиНаОтложеннуюИнициализацию(ФайлМодуля.ПолноеИмя, ТекстФайлаМодуля, ИмяЭлементаДляРазмещения, ИмяСтруктурыПараметров);
		КонецЕсли;
		
		ТекстФайлаМодуля.Записать(ФайлМодуля.ПолноеИмя);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаОшибокСвойстваВОбщемМодуле)
		Или ЗначениеЗаполнено(СтрокаОшибокНеправильноеВнедрение)
		Или ЗначениеЗаполнено(СтрокаОшибокНесколькоВызовов) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(СтрокаОшибокСвойстваВОбщемМодуле
			+ Символы.ПС + СтрокаОшибокНеправильноеВнедрение
			+ Символы.ПС + СтрокаОшибокНесколькоВызовов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнедритьПечать()
	
	ИмяФайла = ИмяФайлаМодуляУправлениеПечатьюПереопределяемый();
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		ТекстовыйДокумент.ДобавитьСтроку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru = 'Файл не найден: """"%1"""",
			|Подсистема Печать не обновлена.'""), Файл.ПолноеИмя));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокОбъектовСКомандамиПечати();
	ЗаполнитьСписокЖурналовСФиксированнымиКомандамиПечати();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбъектовСКомандамиПечати()
	
	ОбъектыСКомандамиПечати = ОбъектыСКомандамиПечати();
	
	ТекстДляВставки = Новый ТекстовыйДокумент;
	
	Для Каждого ИмяОбъекта Из ОбъектыСКомандамиПечати Цикл
		ТекстДляВставки.ДобавитьСтроку(Символы.Таб + ""СписокОбъектов.Добавить("" + ИмяОбъекта + "");"");
	КонецЦикла;
	
	Если ОбъектыСКомандамиПечати.Количество() > 0 Тогда
		ТекстДляВставки.ВставитьСтроку(1, Символы.Таб);
		ТекстДляВставки.ДобавитьСтроку(Символы.Таб);
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаМодуляУправлениеПечатьюПереопределяемый());
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ЗаголовокПроцедуры = ""Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт"";
	
	ПроцедураНайдена = Ложь;
	ПозицияВставки = СтрНайти(ТекстМодуля, ЗаголовокПроцедуры);
	Если ПозицияВставки = 0 Тогда
		ПозицияВставки = СтрНайти(ТекстМодуля, ""#КонецОбласти"");
		Если ПозицияВставки = 0 Тогда
			ПозицияВставки = 1;
		КонецЕсли;
		
		ОписаниеПроцедуры = 
			""// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
			|//
			|// Параметры:
			|//  СписокОбъектов - Массив - список менеджеров объектов.
			|//
			|"";
		ТекстДляВставки.ВставитьСтроку(1, Символы.ПС + ОписаниеПроцедуры + ЗаголовокПроцедуры);
		ТекстДляВставки.ДобавитьСтроку(""КонецПроцедуры"" + Символы.ПС);
	Иначе
		ПозицияВставки = ПозицияВставки + СтрДлина(ЗаголовокПроцедуры);
		ПроцедураНайдена = Истина;
	КонецЕсли;
		
	ТекстДляВставки = ТекстДляВставки.ПолучитьТекст();
	
	Если ПроцедураНайдена И Не СтрНачинаетсяС(СокрЛ(Сред(ТекстМодуля, ПозицияВставки)), ""КонецПроцедуры"") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМодуля = СокрП(Лев(ТекстМодуля, ПозицияВставки - 1)) + Символы.ПС
			+ ТекстДляВставки
			+ СокрЛ(Сред(ТекстМодуля, ПозицияВставки));
			
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаМодуляУправлениеПечатьюПереопределяемый());
	ЗаписьТекста.Записать(ТекстМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЖурналовСФиксированнымиКомандамиПечати()
	
	ОбъектыСКомандамиПечати = ОбъектыСКомандамиПечати(""ЖурналыДокументов"");
	
	ТекстДляВставки = """";
	Для Каждого ИмяОбъекта Из ОбъектыСКомандамиПечати Цикл
		Если Не ПустаяСтрока(ТекстДляВставки) Тогда
			ТекстДляВставки = ТекстДляВставки + Символы.ПС + Символы.Таб + Символы.Таб + ""Или "";
		КонецЕсли;
		ТекстДляВставки = ТекстДляВставки + ""НастройкиСписка.МенеджерКомандПечати = "" + ИмяОбъекта;
	КонецЦикла;
	
	
	Если ОбъектыСКомандамиПечати.Количество() > 0 Тогда
		ТекстДляВставки = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Символы.Таб + Символы.ПС
				+ Символы.Таб + ""Если %1 Тогда"", ТекстДляВставки) + Символы.ПС
			+ Символы.Таб + Символы.Таб + ""НастройкиСписка.АвтоматическоеЗаполнение = Ложь;"" + Символы.ПС
			+ Символы.Таб + ""КонецЕсли;"" + Символы.ПС
			+ Символы.Таб + Символы.ПС;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстДляВставки) Тогда
		ТекстДляВставки = Символы.Таб + Символы.ПС;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаМодуляУправлениеПечатьюПереопределяемый());
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ЗаголовокПроцедуры = ""Процедура ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка) Экспорт"";
	
	ПроцедураНайдена = Ложь;
	ПозицияВставки = СтрНайти(ТекстМодуля, ЗаголовокПроцедуры);
	Если ПозицияВставки = 0 Тогда
		ПозицияВставки = СтрНайти(ТекстМодуля, ""#КонецОбласти"");
		Если ПозицияВставки = 0 Тогда
			ПозицияВставки = 1;
		КонецЕсли;
		
		ОписаниеПроцедуры = 
			""// Дополнительные настройки списка команд печати.
			|//
			|// Параметры:
			|//  НастройкиСписка - Структура - модификаторы списка команд печати.
			|//   * МенеджерКомандПечати     - МенеджерОбъекта - менеджер объекта, в котором формируется список команд печати;
			|//   * АвтоматическоеЗаполнение - Булево - заполнять команды печати из объектов, входящих в состав журнала.
			|//                                         Значение по умолчанию: Истина.
			|//
			|"";
		ТекстДляВставки = Символы.ПС
			+ ОписаниеПроцедуры
			+ ЗаголовокПроцедуры + Символы.ПС
			+ ТекстДляВставки
			+ ""КонецПроцедуры"" + Символы.ПС
			+ Символы.ПС;
	Иначе
		ПозицияВставки = ПозицияВставки + СтрДлина(ЗаголовокПроцедуры);
		ПроцедураНайдена = Истина;
	КонецЕсли;
	
	Если ПроцедураНайдена И Не СтрНачинаетсяС(СокрЛ(Сред(ТекстМодуля, ПозицияВставки)), ""КонецПроцедуры"") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМодуля = СокрП(Лев(ТекстМодуля, ПозицияВставки - 1)) + Символы.ПС
			+ ТекстДляВставки
			+ СокрЛ(Сред(ТекстМодуля, ПозицияВставки));
			
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаМодуляУправлениеПечатьюПереопределяемый());
	ЗаписьТекста.Записать(ТекстМодуля);
	
КонецПроцедуры

&НаСервере
Функция ОбъектыСКомандамиПечати(Отбор = Неопределено)
	Результат = Новый Массив;
	КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	Для Каждого ОписаниеОбъекта Из СписокВсехОбъектовКонфигурации(Отбор) Цикл
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеОбъекта.ИмяОбъекта);
		КомандыПечати.Очистить();
		Попытка
			МенеджерОбъекта.ДобавитьКомандыПечати(КомандыПечати);
		Исключение
			КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
			Продолжить;
		КонецПопытки;
		Результат.Добавить(ОписаниеОбъекта.ИмяМенеджера);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция СписокВсехОбъектовКонфигурации(Отбор = Неопределено)
	
	КоллекцииОбъектовМетаданных = Новый Массив;
	Если Отбор = Неопределено Тогда
		КоллекцииОбъектовМетаданных.Добавить(""Справочники"");
		КоллекцииОбъектовМетаданных.Добавить(""Документы"");
		КоллекцииОбъектовМетаданных.Добавить(""ЖурналыДокументов"");
		КоллекцииОбъектовМетаданных.Добавить(""Перечисления"");
		КоллекцииОбъектовМетаданных.Добавить(""Отчеты"");
		КоллекцииОбъектовМетаданных.Добавить(""Обработки"");
		КоллекцииОбъектовМетаданных.Добавить(""ПланыВидовХарактеристик"");
		КоллекцииОбъектовМетаданных.Добавить(""ПланыСчетов"");
		КоллекцииОбъектовМетаданных.Добавить(""ПланыВидовРасчета"");
		КоллекцииОбъектовМетаданных.Добавить(""РегистрыСведений"");
		КоллекцииОбъектовМетаданных.Добавить(""РегистрыНакопления"");
		КоллекцииОбъектовМетаданных.Добавить(""РегистрыБухгалтерии"");
		КоллекцииОбъектовМетаданных.Добавить(""РегистрыРасчета"");
		КоллекцииОбъектовМетаданных.Добавить(""БизнесПроцессы"");
		КоллекцииОбъектовМетаданных.Добавить(""Задачи"");
		КоллекцииОбъектовМетаданных.Добавить(""ПланыОбмена"");
	Иначе
		КоллекцииОбъектовМетаданных.Добавить(Отбор);
	КонецЕсли;

	Результат = Новый Массив;
	Для Каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[КоллекцияОбъектовМетаданных] Цикл
			Результат.Добавить(Новый Структура(""ИмяОбъекта,ИмяМенеджера"", ОбъектМетаданных.ПолноеИмя(),
				ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) 
				+ ""."" + ОбъектМетаданных.Имя));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяФайлаМодуляУправлениеПечатьюПереопределяемый()
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиПослеОбновления) 
		+ ""CommonModule.УправлениеПечатьюПереопределяемый.Module.txt"";
КонецФункции
///////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры перехода.

&НаСервере
Процедура ПерейтиНаНовыйПрограммныйИнтерфейс(ТекстФайлаМодуля, НомерСтрокиВызова, ИмяЭлементаДляРазмещения, ИмяСтруктурыПараметров)
	
	МассивПараметров = ПараметрыПроцедуры(ТекстФайлаМодуля, НомерСтрокиВызова);
	Если МассивПараметров.Количество() = 1 Тогда
		Возврат; // Переход не требуется.
	КонецЕсли;
	
	СоответствиеПараметров = Новый Соответствие;
	СоответствиеПараметров.Вставить(""1"", ""Объект"");
	СоответствиеПараметров.Вставить(""2"", ""ИмяЭлементаДляРазмещения"");
	СоответствиеПараметров.Вставить(""3"", ""ПроизвольныйОбъект"");
	СоответствиеПараметров.Вставить(""4"", ""ИмяЭлементаКоманднойПанели"");
	
	ТребуетсяПереход = Ложь;
	Если МассивПараметров.Количество() = 2 Тогда
		СтрокаПоиска = СокрЛП(МассивПараметров[1]);
		НомерСтроки = НомерСтрокиВызова - 1;
		Пока НомерСтроки > 0 Цикл
			СтрокаМодуля = ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки);
			Если СокрЛП(СтрокаМодуля) = """" Тогда
				НомерСтроки = НомерСтроки - 1;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(СтрокаМодуля, СтрокаПоиска) = 0 Тогда
				ТребуетсяПереход = Истина;
				Прервать;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТребуетсяПереход = Истина;
	КонецЕсли;
	
	Если ТребуетсяПереход Тогда
		ИмяСтруктурыПараметров = ""ДополнительныеПараметры"";
		СтрокаПараметры = МассивПараметров[0] + "", ДополнительныеПараметры"";
		МассивПараметров.Удалить(0); // первый параметр не добавляется в структуру.
		ДобавляемаяСтрока          = ""	ДополнительныеПараметры = Новый Структура;"";
		ШаблонДобавленияВСтруктуру = ""	ДополнительныеПараметры.Вставить(""""%1"""", %2);"";
		НомерПараметра             = 1;
		Для Каждого ПараметрПроцедуры Из МассивПараметров Цикл
			ПараметрПроцедуры = СокрЛП(ПараметрПроцедуры);
			Если ПараметрПроцедуры = """" Тогда
				НомерПараметра = НомерПараметра + 1;
				Продолжить;
			КонецЕсли;
			
			Если НомерПараметра = 2 Тогда
				ИмяЭлементаДляРазмещения = ПараметрПроцедуры;
			КонецЕсли;
			
			ВставкаВСтруктуру = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДобавленияВСтруктуру,
				                          СоответствиеПараметров[Строка(НомерПараметра)],
				                          ПараметрПроцедуры);
			ДобавляемаяСтрока = ДобавляемаяСтрока + Символы.ПС + ВставкаВСтруктуру;
			НомерПараметра = НомерПараметра + 1;
		КонецЦикла;
		
		ЗаменяемаяСтрока = ТекстФайлаМодуля.ПолучитьСтроку(НомерСтрокиВызова);
		НачалоПараметров = СтрНайти(ЗаменяемаяСтрока, ""("");
		КонецПараметров = СтрНайти(ЗаменяемаяСтрока, "")"");
		
		ПреобразованнаяСтрока = Лев(ЗаменяемаяСтрока, НачалоПараметров) + СтрокаПараметры + Сред(ЗаменяемаяСтрока, КонецПараметров);
		ТекстФайлаМодуля.ЗаменитьСтроку(НомерСтрокиВызова, ПреобразованнаяСтрока);
		ТекстФайлаМодуля.ВставитьСтроку(НомерСтрокиВызова, ДобавляемаяСтрока);
		
	Иначе
		НомерСтроки = НомерСтрокиВызова - 1;
		ИмяПараметра = СокрЛП(МассивПараметров[1]);
		ИмяСтруктурыПараметров = ИмяПараметра;
		ШаблонИнициализацияПараметров = ""[ИмяПараметра] = Новый Структура"";
		СтрокаПоиска = СтрЗаменить(ШаблонИнициализацияПараметров, ""[ИмяПараметра]"", ИмяПараметра);
		Пока НомерСтроки > 0 Цикл
			СтрокаМодуля = ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки);
			Если СтрНайти(СтрокаМодуля, СтрокаПоиска) > 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрНайти(СтрокаМодуля, ""ИмяЭлементаДляРазмещения"") > 0 Тогда
				ПараметрыСтруктуры = ПараметрыПроцедуры(ТекстФайлаМодуля, НомерСтроки);
				Параметр = СокрЛП(ПараметрыСтруктуры[1]);
				ИмяЭлементаДляРазмещения = Сред(Параметр, 2, СтрДлина(Параметр) - 2);
				Прервать;
			КонецЕсли;
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбязательныеДействия(ТекстФайлаМодуля, СтрокаТекста, ИмяМодуля, ТекстОшибки)
	
	ТекстПриОткрытии =
		""	
		|	// СтандартныеПодсистемы.Свойства
		|	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		|	// Конец СтандартныеПодсистемы.Свойства"";
	
	ТекстВОбработкеОповещения = ""		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);"";
	
	// Вставка в обработчик ПриОткрытии.
	ИмяСобытияПриОткрытии = ""Процедура ПриОткрытии(Отказ)"";
	Позиция = СтрНайти(СтрокаТекста, ИмяСобытияПриОткрытии);
	НомерСтроки = 0;
	Если Позиция = 0 Тогда
		ДобавитьСобытиеПриОткрытии(ИмяМодуля);
		ДобавитьОбработчикСобытияПриОткрытии(ТекстФайлаМодуля, НомерСтроки);
		ТекстПриОткрытии = ТекстПриОткрытии + Символы.ПС + ""	"";
		СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
	КонецЕсли;
	
	Если НомерСтроки = 0 Тогда
		НомерСтроки = НомерСтроки(СтрокаТекста, Позиция);
	КонецЕсли;
	ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ТекстПриОткрытии);
	СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
	
	// Вставка в обработчик оповещения.
	СтрокаПоиска = ""УправлениеСвойствамиКлиент.ОбрабатыватьОповещения("";
	Позиция = СтрНайти(СтрокаТекста, СтрокаПоиска);
	Если Позиция = 0 Тогда
		ТекстОшибки = СтрЗаменить(ИмяМодуля, "".txt"", """");
	Иначе
		НомерСтроки = НомерСтроки(СтрокаТекста, Позиция);
		ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 2, ТекстВОбработкеОповещения);
	КонецЕсли;
	
	// Вставка новых процедур.
	ТекстПроцедур =
		""
		|&НаКлиенте
		|Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
		|	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
		|КонецПроцедуры
		|
		|&НаКлиенте
		|Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
		|	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
		|КонецПроцедуры"";
	
	ТекстПроцедурСКомментарием =
		""
		|// СтандартныеПодсистемы.Свойства
		|
		|&НаКлиенте
		|Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
		|	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
		|КонецПроцедуры
		|
		|&НаКлиенте
		|Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
		|	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
		|КонецПроцедуры
		|
		|// Конец СтандартныеПодсистемы.Свойства"";
	
	СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
	ОбластьСлужебныеПроцедурыИФункции = ""#Область СлужебныеПроцедурыИФункции"";
	Позиция = СтрНайти(СтрокаТекста, ОбластьСлужебныеПроцедурыИФункции);
	Если Позиция = 0 Тогда
		ДобавляемыйБлок = ""#Область СлужебныеПроцедурыИФункции""
			+ Символы.ПС + ТекстПроцедурСКомментарием + Символы.ПС + Символы.ПС + ""#КонецОбласти"";
		
		ТекстФайлаМодуля.ДобавитьСтроку(ДобавляемыйБлок);
	Иначе
		ИсходныйНомерСтроки = НомерСтроки(СтрокаТекста, Позиция);
		ВнутриПроцедурыФункции = Ложь;
		БлокСвойствНайден = Ложь;
		НомерСтроки = ИсходныйНомерСтроки + 1;
		Для НомерСтроки = НомерСтроки По ТекстФайлаМодуля.КоличествоСтрок() Цикл
			ТекстСтроки = ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки);
			Если Лев(ТекстСтроки, 9) = ""Процедура""
				Или Лев(ТекстСтроки, 7) = ""Функция"" Тогда
				ВнутриПроцедурыФункции = Истина;
			КонецЕсли;
			
			Если Лев(ТекстСтроки, 14) = ""КонецПроцедуры""
				Или Лев(ТекстСтроки, 12) = ""КонецФункции"" Тогда
				ВнутриПроцедурыФункции = Ложь;
			КонецЕсли;
			
			Если Не ВнутриПроцедурыФункции
				И СтрНайти(ТекстСтроки, ""// СтандартныеПодсистемы.Свойства"") Тогда
				БлокСвойствНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если БлокСвойствНайден Тогда
			ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ТекстПроцедур);
		Иначе
			ТекстФайлаМодуля.ВставитьСтроку(ИсходныйНомерСтроки + 1, ТекстПроцедурСКомментарием);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаОтложеннуюИнициализацию(ИмяМодуля, ТекстФайлаМодуля, ИмяЭлементаДляРазмещения, ИмяСтруктурыПараметров)
	Результат = РазмещениеГруппыДополнительныхРеквизитов(ИмяМодуля, ИмяЭлементаДляРазмещения);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = ""УправлениеСвойствами.ПриСозданииНаСервере("";
	СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
	Позиция = СтрНайти(СтрокаТекста, СтрокаПоиска);
	НомерСтроки = НомерСтроки(СтрокаТекста, Позиция);
	
	Шаблон = ""	[ИмяСтруктурыПараметров].Вставить(""""ОтложеннаяИнициализация"""", Истина);"";
	ДобавляемаяСтрока = СтрЗаменить(Шаблон, ""[ИмяСтруктурыПараметров]"", ИмяСтруктурыПараметров);
	Если СтрНайти(СтрокаТекста, ДобавляемаяСтрока) > 0 Тогда
		Возврат; // Отложенная инициализация не требуется.
	КонецЕсли;
	ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки, ДобавляемаяСтрока);
	
	Если Не Результат.ОбработчикСуществует Тогда
		ДобавитьОбработчикПриСменеСтраницы(ТекстФайлаМодуля, Результат);
	Иначе
		СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
		ШаблонВставки = 
		""	
		|	// СтандартныеПодсистемы.Свойства
		|	Если ТекущаяСтраница.Имя = """"[ИмяСтраницы]""""
		|		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		|		
		|		СвойстваВыполнитьОтложеннуюИнициализацию();
		|		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		|	КонецЕсли;
		|	// Конец СтандартныеПодсистемы.Свойства"";
		ШаблонВставки = СтрЗаменить(ШаблонВставки, ""[ИмяСтраницы]"", Результат.ИмяСтраницы);
		ШаблонСтрокиПоиска = ""Процедура [ИмяСобытия](Элемент, ТекущаяСтраница)"";
		ШаблонСтрокиПоиска = СтрЗаменить(ШаблонСтрокиПоиска, ""[ИмяСобытия]"", Результат.ИмяСобытия);
		Позиция = СтрНайти(СтрокаТекста, ШаблонСтрокиПоиска);
		НомерСтроки = НомерСтроки(СтрокаТекста, Позиция);
		Если Позиция = 0 Тогда
			ДобавитьОбработчикПриСменеСтраницы(ТекстФайлаМодуля, Результат);
		Иначе
			ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ШаблонВставки);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
	ШаблонПроцедуры =
		""
		|&НаСервере
		|Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
		|	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
		|КонецПроцедуры"";
	ШаблонПроцедурыСГруппой = 
		""#Область СлужебныеПроцедурыИФункции""
		+ ДобавляемаяСтрока
		+ Символы.ПС + Символы.ПС + ""#КонецОбласти"";
	
	ПозицияСлужебныеПроцедуры = СтрНайти(СтрокаТекста, ""#Область СлужебныеПроцедурыИФункции"");
	Если ПозицияСлужебныеПроцедуры = 0 Тогда
		ТекстФайлаМодуля.Добавить(ШаблонПроцедурыСГруппой);
	Иначе
		ИсходныйНомерСтроки = НомерСтроки(СтрокаТекста, ПозицияСлужебныеПроцедуры);
		ВсегоСтрок = ТекстФайлаМодуля.КоличествоСтрок();
		НомерСтроки = ИсходныйНомерСтроки + 1;
		ПроцедураДобавлена = Ложь;
		Пока СтрНайти(ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки), ""// СтандартныеПодсистемы.Свойства"") = 0 Цикл
			Если ВсегоСтрок = НомерСтроки Тогда
				ТекстФайлаМодуля.ВставитьСтроку(ИсходныйНомерСтроки + 1, ШаблонПроцедуры);
				ПроцедураДобавлена = Истина;
				Прервать;
			КонецЕсли;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если Не ПроцедураДобавлена Тогда
			ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ШаблонПроцедуры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Генерация элементов формы.

&НаСервере
Процедура ДобавитьСобытиеПриОткрытии(ИмяМодуля)
	
	ПутьКФайлуФормы = СтрЗаменить(ИмяМодуля, ""Module.txt"", ""xml"");
	ДокументDOMИсточника = ДокументDOM(ПутьКФайлуФормы);
	
	СоответствиеПространстваИмен = СоответствиеПространстваИмен();
	СоответствиеПространстваИмен.Вставить(""ns"", ""http://v8.1c.ru/8.3/xcf/logform"");
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространстваИмен);
	
	Выражение = ""/ns:Form"";
	РезультатXPath = ДокументDOMИсточника.ВычислитьВыражениеXPath(Выражение, ДокументDOMИсточника, Разыменователь);
	СоставИсточника = РезультатXPath.ПолучитьСледующий();
	Если СоставИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДочернийУзел Из СоставИсточника.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла = ""Events"" Тогда
			НовыйДочернийУзел = ДокументDOMИсточника.СоздатьЭлемент(""Event"");
			НовыйДочернийУзел.ТекстовоеСодержимое = ""ПриОткрытии"";
			НовыйДочернийУзел.УстановитьАтрибут(""name"", ""OnOpen"");
			
			ДочернийУзел.ДобавитьДочерний(НовыйДочернийУзел);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьДокументDOMВФайл(ДокументDOMИсточника, ПутьКФайлуФормы);
	
КонецПроцедуры

&НаСервере
Функция РазмещениеГруппыДополнительныхРеквизитов(ИмяМодуля, ИмяЭлементаДляРазмещения)
	
	ИмяЭлементаДляРазмещения = СтрЗаменить(ИмяЭлементаДляРазмещения, """""""", """");
	ПутьКФайлуФормы = СтрЗаменить(ИмяМодуля, ""Module.txt"", ""xml"");
	
	ДокументDOMИсточника = ДокументDOM(ПутьКФайлуФормы);
	СоответствиеПространстваИмен = СоответствиеПространстваИмен();
	СоответствиеПространстваИмен.Вставить(""ns"", ""http://v8.1c.ru/8.3/xcf/logform"");
	Разыменователь = Новый РазыменовательПространствИменDOM(СоответствиеПространстваИмен);
	
	Выражение = ""//*[@name='[ИмяГруппы]']"";
	Выражение = СтрЗаменить(Выражение, ""[ИмяГруппы]"", ИмяЭлементаДляРазмещения);
	РезультатXPath = ДокументDOMИсточника.ВычислитьВыражениеXPath(Выражение, ДокументDOMИсточника, Разыменователь);
	СоставИсточника = РезультатXPath.ПолучитьСледующий();
	Если СоставИсточника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ГруппаСтраницДляЭлемента(СоставИсточника);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ГруппаСтраниц = Результат.ГруппаСтраниц;
	ИмяСтраницы   = Результат.ИмяСтраницы;
	
	ОбработчикСуществует = Ложь;
	ИмяСобытия          = """";
	Для Каждого ДочернийУзел Из ГруппаСтраниц.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла = ""Events"" Тогда
			ИмяСобытия          = ДочернийУзел.ПервыйДочерний.ПервыйДочерний.ЗначениеУзла;
			ОбработчикСуществует = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяСобытия = """" Тогда
		ИмяГруппыСтраниц = ГруппаСтраниц.ПолучитьАтрибут(""name"");
		ИмяСобытия = ИмяГруппыСтраниц + ""ПриСменеСтраницы"";
		
		НовыйУзел = ДокументDOMИсточника.СоздатьЭлемент(""Events"");
		
		НовыйДочернийУзел = ДокументDOMИсточника.СоздатьЭлемент(""Event"");
		НовыйДочернийУзел.ТекстовоеСодержимое = ИмяСобытия;
		НовыйДочернийУзел.УстановитьАтрибут(""name"", ""OnCurrentPageChange"");
		
		НовыйУзел.ДобавитьДочерний(НовыйДочернийУзел);
		ГруппаСтраниц.ДобавитьДочерний(НовыйУзел);
	КонецЕсли;
	
	ЗаписатьДокументDOMВФайл(ДокументDOMИсточника, ПутьКФайлуФормы);
	
	Результат = Новый Структура;
	Результат.Вставить(""ИмяСобытия"", ИмяСобытия);
	Результат.Вставить(""ИмяСтраницы"", ИмяСтраницы);
	Результат.Вставить(""ОбработчикСуществует"", ОбработчикСуществует);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ГруппаСтраницДляЭлемента(Элемент, ИмяСтраницы = """")
	
	// Если дополнительные реквизиты выводятся на первую страницу - пропускаем.
	Если Элемент.ИмяУзла = ""Page""
		И Элемент.РодительскийУзел.ПервыйДочерний = Элемент Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Элемент.ИмяУзла = ""Page"" Тогда
		ИмяСтраницы = Элемент.ПолучитьАтрибут(""name"");
	КонецЕсли;
	
	РодительЭлемента = Элемент.РодительскийУзел;
	Если РодительЭлемента.ИмяУзла = ""Pages"" Тогда
		Результат = Новый Структура;
		Результат.Вставить(""ГруппаСтраниц"", РодительЭлемента);
		Результат.Вставить(""ИмяСтраницы"", ИмяСтраницы);
		Возврат Результат;
	ИначеЕсли РодительЭлемента.ИмяУзла = ""Form"" Тогда
		Возврат Неопределено;
	Иначе
		Возврат ГруппаСтраницДляЭлемента(РодительЭлемента, ИмяСтраницы);
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные методы.

&НаСервере
Процедура ДобавитьОбработчикПриСменеСтраницы(ТекстФайлаМодуля, ПараметрыОбработчика)
	ИмяСобытия = ПараметрыОбработчика.ИмяСобытия;
	ИмяСтраницы = ПараметрыОбработчика.ИмяСтраницы;
	
	ШаблонГруппаСобытияФормы        = ""#Область ОбработчикиСобытийФормы"";
	ШаблонГруппаЭлементовШапкиФормы = ""#Область ОбработчикиСобытийЭлементовШапкиФормы"";
	ШаблонГруппаСлужебные           = ""#Область СлужебныеПроцедурыИФункции"";
	
	ШаблонПриСменеСтраницы =
		""
		|&НаКлиенте
		|Процедура %1(Элемент, ТекущаяСтраница)
		|	
		|	// СтандартныеПодсистемы.Свойства
		|	Если ТекущаяСтраница.Имя = """"%2""""
		|		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		|		
		|		СвойстваВыполнитьОтложеннуюИнициализацию();
		|		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		|	КонецЕсли;
		|	// Конец СтандартныеПодсистемы.Свойства
		|	
		|КонецПроцедуры"";
	
	СтрокаТекста = ТекстФайлаМодуля.ПолучитьТекст();
	
	ПозицияГруппаЭлементовШапкиФормы = СтрНайти(СтрокаТекста, ШаблонГруппаЭлементовШапкиФормы);
	ПозицияГруппаСобытияФормы = СтрНайти(СтрокаТекста, ШаблонГруппаСобытияФормы);
	ПозицияГруппаСлужебные = СтрНайти(СтрокаТекста, ШаблонГруппаСлужебные);
	
	ДобавляемаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПриСменеСтраницы, ИмяСобытия, ИмяСтраницы);
	ДобавляемаяСтрокаСГруппой = 
		""#Область ОбработчикиСобытийЭлементовШапкиФормы""
		+ ДобавляемаяСтрока
		+ Символы.ПС + Символы.ПС + ""#КонецОбласти"";
	
	Если ПозицияГруппаЭлементовШапкиФормы > 0 Тогда
		НомерСтроки = НомерСтроки(СтрокаТекста, ПозицияГруппаЭлементовШапкиФормы);
		ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ДобавляемаяСтрока);
	ИначеЕсли ПозицияГруппаСобытияФормы > 0 Тогда
		НомерСтроки = ПозицияГруппы(ТекстФайлаМодуля, СтрокаТекста, ПозицияГруппаСобытияФормы);
		
		Если НомерСтроки <> Неопределено Тогда
			ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ДобавляемаяСтрокаСГруппой);
		Иначе
			ТекстФайлаМодуля.ДобавитьСтроку(ДобавляемаяСтрокаСГруппой);
		КонецЕсли;
		
	ИначеЕсли ПозицияГруппаСлужебные > 0 Тогда
		НомерСтроки = НомерСтроки(СтрокаТекста, ПозицияГруппаЭлементовШапкиФормы);
		ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки, ДобавляемаяСтрокаСГруппой);
	Иначе
		ТекстФайлаМодуля.ДобавитьСтроку(ДобавляемаяСтрокаСГруппой);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПозицияГруппы(ТекстФайлаМодуля, СтрокаТекста, Позиция)
	
	ВсегоСтрок = ТекстФайлаМодуля.КоличествоСтрок();
	НомерСтроки = НомерСтроки(СтрокаТекста, Позиция) + 1;
	КонецОбластиНайден = Ложь;
	Пока СтрНайти(ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки), ""#КонецОбласти"") = 0 Цикл
		Если НомерСтроки = ВсегоСтрок Тогда
			КонецОбластиНайден = Истина;
			Прервать;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если КонецОбластиНайден Тогда
		Возврат НомерСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьОбработчикСобытияПриОткрытии(ТекстФайлаМодуля, НомерСтроки)
	
	ШаблонПроцедурыПриОткрытии =
		""
		|&НаКлиенте
		|Процедура ПриОткрытии(Отказ)
		|КонецПроцедуры"";
	
	НайденоНачалоПроцедуры = Ложь;
	Для НомерСтроки = 1 По ТекстФайлаМодуля.КоличествоСтрок() Цикл
		СтрокаМодуля = ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки);
		Если СтрНайти(СтрокаМодуля, ""Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)"") > 0 Тогда
			НайденоНачалоПроцедуры = Истина;
		КонецЕсли;
		
		Если НайденоНачалоПроцедуры
			И СтрНайти(СтрокаМодуля, ""КонецПроцедуры"") Тогда
			ТекстФайлаМодуля.ВставитьСтроку(НомерСтроки + 1, ШаблонПроцедурыПриОткрытии);
			НомерСтроки = НомерСтроки + 3;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоКомментарий(СтрокаТекста, НачалоВызова)
	
	Отступ = 1;
	Пока СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), Символы.ПС) = 0 Цикл
		Отступ = Отступ + 1;
	КонецЦикла;
	
	Если СтрНайти(Сред(СтрокаТекста, НачалоВызова-Отступ, Отступ), ""//"") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НомерСтроки(СтрокаТекста, Позиция)
	
	Возврат СтрЧислоВхождений(Лев(СтрокаТекста, Позиция), Символы.ПС) + 1;
	
КонецФункции

&НаСервере
Функция ПараметрыПроцедуры(ТекстФайлаМодуля, НомерСтроки)
	
	СтрокаМодуля = ТекстФайлаМодуля.ПолучитьСтроку(НомерСтроки);
	НачалоПараметров = СтрНайти(СтрокаМодуля, ""("");
	КонецПараметров = СтрНайти(СтрокаМодуля, "")"");
	Если КонецПараметров = 0 Тогда
		Возврат Новый Массив; // Нет параметров.
	КонецЕсли;
	СтрокаПараметры = Сред(СтрокаМодуля, НачалоПараметров + 1, КонецПараметров - НачалоПараметров - 1);
	Возврат СтрРазделить(СтрокаПараметры, "","", Ложь);
	
КонецФункции

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = ""8.3""
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости[""Версия8_2_16""]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости[""Версия8_3_1""]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости[""Версия8_3_2""]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости[""Версия8_3_3""]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости[""Версия8_3_4""]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости[""Версия8_3_5""]))) Тогда
		
		ВызватьИсключение НСтр(""ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3.6 с отключенным режимом совместимости или выше'"");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти",
{4,4,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",53b4eb82-86ab-4f45-b5a4-15f95a47d10e}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"КаталогВыгрузкиДоОбновления",
{1,1,
{"ru","Каталог выгрузки до обновления"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"КаталогВыгрузкиПослеОбновления",
{1,1,
{"ru","Каталог выгрузки после обновления"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"ВыполнитьОтложеннуюИнициализацию",
{1,1,
{"ru","Выполнить отложенную инициализацию"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,1,"ДеревоОпераций.ЭтоПодсистема","",
{0},
{0},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCU0LXRgNC10LLQvtCe0L/QtdGA0LDRhtC40Lk8
L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9uPg0KCQkJPGZpbHRl
cj4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0K
CQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QlNC10YDQtdCy0L7Q
ntC/0LXRgNCw0YbQuNC5LtCt0YLQvtCf0L7QtNGB0LjRgdGC0LXQvNCwPC9sZWZ0
Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0K
CQkJCQk8cmlnaHQgeHNpOnR5cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0K
CQkJCTwvaXRlbT4NCgkJCTwvZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJ
PGRjc2NvcjppdGVtIHhzaTp0eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4N
CgkJCQkJPGRjc2NvcjpwYXJhbWV0ZXI+0KjRgNC40YTRgjwvZGNzY29yOnBhcmFt
ZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1aTpGb250IiBy
ZWY9InN5czpEZWZhdWx0R1VJRm9udCIgYm9sZD0idHJ1ZSIgaXRhbGljPSJmYWxz
ZSIgdW5kZXJsaW5lPSJmYWxzZSIgc3RyaWtlb3V0PSJmYWxzZSIga2luZD0iV2lu
ZG93c0ZvbnQiLz4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJhbmNl
Pg0KCQk8L2l0ZW0+DQoJPC9jb25kaXRpb25hbEFwcGVhcmFuY2U+DQo8L1NldHRp
bmdzPg==}
},
{0,0},
{0,1,
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьПереходНаВерсию",
{1,1,
{"ru","Выполнить"}
},
{1,1,
{"ru","Выполнить переход на версию"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьПереходНаВерсию",3,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}
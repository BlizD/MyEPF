// См. ниже раздел "ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет проверку совпадения текстов ограничений в разных ролей для
// одного и того же права одного и того же объекта и другое.
//
// Параметры:
//  ВсеПараметры - Структура - со свойствами:
//   * ПапкаВыгрузки   - Строка - полный путь к папке с выгрузкой конфигурации в файлы.
//   * ОшибкиВВыгрузке - Строка - (возвращаемое значение) - не пустое, если в файлах выгрузки конфигурации,
//                       размещенных в папке, указанной в параметре ПапкаВыгрузки найдены ошибки.
//   * НайденныеОшибки - Неопределено    - (возвращаемое значение) - когда заполнен параметр ОшибкиВВыгрузке.
//                     - ТаблицаЗначений - (возвращаемое значение) - с колонками:
//     * ВидОшибки    - Строка - см. в комментарии к процедуре ПриОбнаруженииОшибки.
//     * ТекстОшибки  - Строка - описание ошибки для пользователя.
//     * Роль         - Строка - имя роли.
//     * Таблица      - Строка - полное имя объекта метаданных (у которого есть данные).
//     * Право        - Строка - имя прав доступа - Чтение или Добавление или Изменение или Удаление.
//     * Поля         - Строка - список полей, для которых установлено ограничение.
//     * Ограничение  - Строка - текст установленного ограничения.
//     * ВидДоступа   - Строка - имя вида доступа (заполнено только для ошибки НеверноеИмяВидаДоступа).
//
//     Сведения о второй роли (заполнены только для ошибок ОграниченияВРазныхРоляхНеСовпадают,
//                             ОграничениеДобавленияНеСовпадаетСИзменением):
//     * Роль2        - Строка - имя роли.
//     * Таблица2     - Строка - полное имя объекта метаданных (у которого есть данные).
//     * Право2       - Строка - имя прав доступа - Чтение или Добавление или Изменение или Удаление.
//     * Поля2        - Строка - список полей, для которых установлено ограничение.
//     * Ограничение2 - Строка - текст установленного ограничения.
//
Процедура ПроверитьИспользованиеОграниченийДоступа(ВсеПараметры) Экспорт
	
	ВсеПараметры.Вставить("ОшибкиВВыгрузке", "");
	ВсеПараметры.Вставить("НайденныеОшибки", Неопределено);
	
	ОграниченияДоступа = ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(
		ВсеПараметры.ПапкаВыгрузки, ВсеПараметры.ОшибкиВВыгрузке);
	
	Если ЗначениеЗаполнено(ВсеПараметры.ОшибкиВВыгрузке) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеОшибки = Новый ТаблицаЗначений;
	НайденныеОшибки.Колонки.Добавить("ВидОшибки",        Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("ТекстОшибки",      Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Роль",             Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Таблица",          Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Право",            Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Поля",             Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Ограничение",      Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("ВидДоступа",       Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Роль2",            Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Таблица2",         Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Право2",           Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Поля2",            Новый ОписаниеТипов("Строка"));
	НайденныеОшибки.Колонки.Добавить("Ограничение2",     Новый ОписаниеТипов("Строка"));
	
	ВидыОграниченийПрав = Новый ТаблицаЗначений;
	ВидыОграниченийПрав.Колонки.Добавить("Таблица",          Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Право",            Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ВидДоступа",       Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Описание",         Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ТаблицаОбъекта",   Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокКоллекции", Новый ОписаниеТипов("Число"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокПрав",      Новый ОписаниеТипов("Число"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОграниченияДоступа",  ОграниченияДоступа);
	ПараметрыПроцедуры.Вставить("НайденныеОшибки",     НайденныеОшибки);
	ПараметрыПроцедуры.Вставить("ВидыОграниченийПрав", ВидыОграниченийПрав);
	
	ОпределитьВидыОграниченийПрав(ПараметрыПроцедуры);
	
	ВсеПараметры.НайденныеОшибки = ПараметрыПроцедуры.НайденныеОшибки;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выгружает конфигурацию текущей информационной базы в файлы.
//
// Параметры:
//  ПапкаВыгрузки   - Строка - каталог, в который будет выполнена выгрузка.
//
//  ИмяПользователя - Неопределено - использовать имя текущего пользователя.
//                  - Строка - имя пользователя, который будет выполнять выгрузку.
//
//  Пароль          - Неопределено - использовать пустой пароль, если не пустой показать ошибку.
//                  - Строка - использовать указанный пароль, если не совпадает, показывать ошибку.
// 
//
Процедура ВыгрузитьТекущуюКонфигурациюВФайлы(ПапкаВыгрузки, ИмяПользователя = Неопределено, Пароль = Неопределено)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Модель сервиса не поддерживается.'");
	КонецЕсли;
	
	Если ИмяПользователя = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Не ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У пользователя ""%1"" нет права Администрирование,
			           |необходимого для выгрузки конфигурации в файлы.'"),
			ПользовательИБ.Имя);
	КонецЕсли;
	
	Если Пароль = Неопределено Тогда
		ИспользуемыйПароль = "";
		Если ПользовательИБ.ПарольУстановлен Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя ""%1"" установлен пароль, который не передан в процедуру,
				           |но является необходимым для выгрузки конфигурации в файлы.'"),
				ПользовательИБ.Имя);
		КонецЕсли;
	Иначе
		ИспользуемыйПароль = Пароль;
		Если ПользовательИБ.СохраняемоеЗначениеПароля <> Пользователи.СохраняемоеЗначениеСтрокиПароля(Пароль) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя ""%1"" установлен пароль, который не совпадает с переданным в процедуру,
				           |но является необходимым для выгрузки конфигурации в файлы.'"),
				ПользовательИБ.Имя);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Кавычка", """");
	ПараметрыПодключения.Вставить("КаталогBin", КаталогПрограммы());
	
	ПараметрыПодключения.Вставить("Пароль", ИспользуемыйПароль);
	ПараметрыПодключения.Вставить("Пользователь",
		ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	Если СтрНачинаетсяС(СтрокаСоединения, "File=") > 0 И КонфигураторОткрыт() Тогда
		ТекущийКаталогИБ = Сред(СтрокаСоединения, 7, СтрДлина(СтрокаСоединения) - 8);
		ВременныйКаталог = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ВременныйКаталог);
		КопироватьФайл(ТекущийКаталогИБ + "\1Cv8.1CD", ВременныйКаталог + "\1Cv8.1CD");
		СтрокаСоединения = "File=""" + ВременныйКаталог + """;";
	Иначе
		ВременныйКаталог = "";
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("ПутьКБазе", СтрЗаменить(СтрокаСоединения,
		ПараметрыПодключения.Кавычка, ПараметрыПодключения.Кавычка + ПараметрыПодключения.Кавычка));
	
	ВыгрузитьКонфигурациюВФайлы(ПапкаВыгрузки, ПараметрыПодключения);
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст с описанием настроек, которые не поддерживаются
// при объединении прав через выгрузку и загрузку ролей конфигурации.
//
// Параметры:
//  ПапкаВыгрузки - Строка - каталог, содержащий выгрузку конфигурации в файлы.
//                    Если не пустая строка, тогда выгрузка будет выполнена во временный каталог.
//
Функция НеПоддерживаемыеНастройки(ПапкаВыгрузки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ПапкаВыгрузки) Тогда
		ВременныйКаталог = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ВременныйКаталог);
		ВыгрузитьТекущуюКонфигурациюВФайлы(ВременныйКаталог);
		ПапкаВыгрузки = ВременныйКаталог;
	КонецЕсли;
	
	Текст = "";
	
	// Анализ командных интерфейсов.
	Файлы = НайтиФайлы(ПапкаВыгрузки, "*.CommandInterface.xml");
	
	Для каждого Файл Из Файлы Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		Фабрика = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		ИмяОбъекта = СтрЗаменить(Файл.Имя, ".xml", "");
		ПроверитьСвойстваОбъекта(Текст, Фабрика, ИмяОбъекта, "CommandsVisibility",   "Command",   "Visibility");
		ПроверитьСвойстваОбъекта(Текст, Фабрика, ИмяОбъекта, "SubsystemsVisibility", "Subsystem", "Visibility");
	КонецЦикла;
	
	// Анализ форм (элементов, реквизитов и команд).
	Файлы = НайтиФайлы(ПапкаВыгрузки, "*.Form.xml");
	
	Для каждого Файл Из Файлы Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		Фабрика = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		ИмяОбъекта = СтрЗаменить(Файл.Имя, ".Form.xml", "");
		ПроверитьСвойстваОбъекта(Текст, Фабрика, ИмяОбъекта, "Commands",    "Command",  "Use");
		ПроверитьСвойстваОбъекта(Текст, Фабрика, ИмяОбъекта, "Attributes", "Attribute", "View");
		ПроверитьСвойстваОбъекта(Текст, Фабрика, ИмяОбъекта, "Attributes", "Attribute", "Edit");
		ПроверитьПользовательскуюВидимость(Текст, Фабрика, ИмяОбъекта);
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Начало ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

Процедура ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав)
	
	// СтандартныеПодсистемы.Пользователи
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";

	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Обработчик для описания исключений из стандартов.
// Параметры:
//  ВидОшибки     - Строка - строковые идентификаторы ошибок:
//                  "НеверноеИмяТаблицы" - проверка, что указанное имя таблицы соответствует
//                  имени реальной таблицы, для которой указано ограничение.
//                  "НеверноеИмяПрава" - проверка, что имя проверяемого права указано,
//                  то оно соответствует проверяемому праву для которого указано ограничение.
//                  "НеверноеИмяВидаДоступа" - проверка, что имя вида доступа указано корректно.
//                  "РолиБезОграничений" - проверка ролей ПолныеПрава, АдминистраторСистемы.
//                  "ОграничениеНеПоВсемПолям" - проверка, что ограничение задано для "<Прочие поля>".
//                  "ОграничениеПраваУдаление" - проверка, что не задано ограничения права Удаления.
//                  "ОграниченияВРазныхРоляхНеСовпадают" - проверка, что для той же таблицы с тем же
//                  правом ограничения совпадают в разных ролях.
//                  "ОграничениеДобавленияНеСовпадаетСИзменением" - проверяется, что в каждой роли
//                  по-отдельности ограничение добавления совпадает с ограничением изменения.
//
//  Строка        - СтрокаТаблицыЗначений с колонками Роль, Право, Таблица, Поля, Ограничение.
//  ЭтоИсключение - Булево (возвращаемое значение) - начальное значение Ложь,
//                  если установить Истина, тогда ошибка не будет добавлена в список.
//
Процедура ПриОбнаруженииОшибки(ВидОшибки, Строка, ЭтоИсключение)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ВидОшибки      = "ОграничениеНеПоВсемПолям"
	   И Строка.Роль    = "ЧтениеИнформацииОВерсияхОбъектов"
	   И Строка.Таблица = Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя()
	   И Строка.Право   = "Чтение"
	   И Строка.Поля    = "ВерсияОбъекта" Тогда
		
		ЭтоИсключение = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Конец  ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

// Только для внутреннего использования.
Процедура ОпределитьВидыОграниченийПрав(Параметры) Экспорт
	
	ВидыОграниченийПрав = Параметры.ВидыОграниченийПрав;
	ОграниченияДоступа  = Параметры.ОграниченияДоступа;
	НайденныеОшибки     = Параметры.НайденныеОшибки;
	
	НазначениеРолей = Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().НазначениеРолей();
	
	РолиТолькоДляВнешнихПользователей =
		НазначениеРолей.ТолькоДляВнешнихПользователей;
	
	РолиСовместноДляПользователейИВнешнихПользователей =
		НазначениеРолей.СовместноДляПользователейИВнешнихПользователей;
	
	ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав);
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Таблица");
	Ограничения.Колонки.Добавить("Роль");
	Ограничения.Колонки.Добавить("РольДляПользователей");
	Ограничения.Колонки.Добавить("РольДляВнешнихПользователей");
	Ограничения.Колонки.Добавить("Право");
	Ограничения.Колонки.Добавить("Поля");
	Ограничения.Колонки.Добавить("Ограничение");
	Ограничения.Колонки.Добавить("ОграничениеБезКомментария");
	
	Ограничения.Колонки.Добавить("УказаннаяТаблица"); // Таблица, указанная в ограничении.
	Ограничения.Колонки.Добавить("УказанноеПраво");   // Право, указанное в ограничении.
	
	
	Для Каждого Строка Из ОграниченияДоступа Цикл
		
		Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение, ОграничениеБезКомментария");
		ЗаполнитьЗначенияСвойств(Свойства, Строка);
		
		Если УправлениеДоступомСлужебный.ЭтоПрофильнаяРоль(Свойства.Роль) Тогда
			Продолжить;
		КонецЕсли;
		
		// Удаление переводов строки с краев текста ограничения.
		Свойства.Ограничение = СокрЛП(Свойства.Ограничение);
		
		// Удаление комментариев.
		Результат = "";
		Для НомерСтрокиОграничения = 1 По СтрЧислоСтрок(Свойства.Ограничение) Цикл
			Строка = СтрПолучитьСтроку(Свойства.Ограничение, НомерСтрокиОграничения);
			ПозицияКомментария = СтрНайти(Строка, "//");
			Если ПозицияКомментария > 0 Тогда
				Строка = Сред(Строка, 1, ПозицияКомментария - 1);
			КонецЕсли;
			Если НЕ ПустаяСтрока(Результат) Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			Результат = Результат + Строка;
		КонецЦикла;
		Свойства.ОграничениеБезКомментария = СокрЛП(Результат);
		Ограничение = Свойства.ОграничениеБезКомментария;
		
		Если ВРег(Свойства.Роль) = ВРег("ПолныеПрава")
		 Или ВРег(Свойства.Роль) = ВРег("АдминистраторСистемы") Тогда
			
			Если ЗначениеЗаполнено(Ограничение) Тогда
				ДобавитьОшибку("РолиБезОграничений", Свойства, НайденныеОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для роли %1 не должно быть ограничений на уровне записей, однако обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5'"),
					Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Ограничения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойства);
		НоваяСтрока.РольДляПользователей =
			РолиТолькоДляВнешнихПользователей.Получить(Свойства.Роль) = Неопределено;
		НоваяСтрока.РольДляВнешнихПользователей =
			РолиТолькоДляВнешнихПользователей.Получить(Свойства.Роль) <> Неопределено
			Или РолиСовместноДляПользователейИВнешнихПользователей.Получить(Свойства.Роль) <> Неопределено;
		
		Если ВРег(Свойства.Право) = ВРег("Добавление")
		 ИЛИ ВРег(Свойства.Право) = ВРег("Удаление") Тогда
		
			// Эти права не используются для отдельного ограничения доступа.
			// Ограничение добавления совпадает с ограничением изменения,
			// ограничение удаления, либо не используется, либо совпадает с ограничением изменения.
			ПропуститьПраво = Истина;
		Иначе
			ПропуститьПраво = Ложь;
		КонецЕсли;
		
		Ограничение = СтрЗаменить(Ограничение, Символы.ПС, " ");
		Пока СтрНайти(Ограничение, ", ") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, ", ", ",");
		КонецЦикла;
		Пока СтрНайти(Ограничение, " ,") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, " ,", ",");
		КонецЦикла;
		
		Если ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениям("))) = ВРег("#ПоЗначениям(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямРасширенный("))) = ВРег("#ПоЗначениямРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямИНаборамРасширенный("))) = ВРег("#ПоЗначениямИНаборамРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоНаборамЗначений("))) = ВРег("#ПоНаборамЗначений(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока, НайденныеОшибки);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока, НайденныеОшибки);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			ВидДоступа = "Объект";
			
			Если НЕ ЗначениеЗаполнено(ПолноеИмяПоля) Тогда
				ПолноеИмяПоля = "Ссылка";
			КонецЕсли;
			
			ДобавитьВидДоступа(НоваяСтрока, НайденныеОшибки, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
		КонецЕсли;
	КонецЦикла;
	
	// Удаление видов ограничений НастройкиПрав, для которых в поле нет ни одного из типов владельцев настроек прав.
	Отбор = Новый Структура("ВидДоступа, ТаблицаОбъекта", "НастройкиПрав", "");
	НайденныеСтроки = ВидыОграниченийПрав.НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		ВидыОграниченийПрав.Удалить(ВидыОграниченийПрав.Индекс(Строка));
	КонецЦикла;
	
	// Проверка использование ограничения по всем полям.
	СтрокаПрочиеПоля = НСтр("ru = '<Прочие поля>'");
	Для каждого Строка Из Ограничения Цикл
		Если ВРег(Строка.Поля) <> ВРег(СтрокаПрочиеПоля) Тогда
			
			ДобавитьОшибку("ОграничениеНеПоВсемПолям", Строка, НайденныеОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ограничения на уровне записей стандартно применяются ко всем полям: ""%6"".
				           |Но в роли %1 обнаружено
				           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
				           |%5'"),
				Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, СтрокаПрочиеПоля));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка отсутствия ограничения на право Удаление.
	Для каждого Строка Из Ограничения Цикл
		Если ВРег(Строка.Право) = ВРег("Удаление") И ЗначениеЗаполнено(Строка.ОграничениеБезКомментария) Тогда
			
			ДобавитьОшибку("ОграничениеПраваУдаление", Строка, НайденныеОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ограничения для права Удаление стандартно не используются.
				           |Но в роли %1 обнаружено
				           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
				           |%5'"),
				Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка совпадения текстов ограничения в разных ролях для одной таблицы и одного права.
	Ограничения.Колонки.Добавить("Обработана");
	
	Для ВидРолей = 1 По 2 Цикл
		Если ВидРолей = 1 Тогда
			Поля = "Таблица, Право, РольДляПользователей";
		Иначе
			Поля = "Таблица, Право, РольДляВнешнихПользователей";
		КонецЕсли;
		ПраваТаблиц = Ограничения.Скопировать(, Поля);
		ПраваТаблиц.Свернуть(Поля);
		
		Для Каждого ПравоТаблицы Из ПраваТаблиц Цикл
			// Проверка совпадения ограничений.
			Отбор = Новый Структура(Поля);
			ЗаполнитьЗначенияСвойств(Отбор, ПравоТаблицы);
			НайденныеСтроки = Ограничения.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяСтрока = НайденныеСтроки[0];
			Если ПерваяСтрока.Обработана <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПерваяСтрока.Обработана = Истина;
			
			ПерваяСтрокаОграничение = ПерваяСтрока.ОграничениеБезКомментария;
			ПерваяСтрокаОграничение = СтрЗаменить(ПерваяСтрокаОграничение, """" + ПерваяСтрока.УказанноеПраво   + """", """""");
			ПерваяСтрокаОграничение = СтрЗаменить(ПерваяСтрокаОграничение, """" + ПерваяСтрока.УказаннаяТаблица + """", """""");
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Обработана = Истина;
				
				СтрокаОграничение = Строка.ОграничениеБезКомментария;
				СтрокаОграничение = СтрЗаменить(СтрокаОграничение,       """" + Строка.УказанноеПраво   + """", """""");
				СтрокаОграничение = СтрЗаменить(СтрокаОграничение,       """" + Строка.УказаннаяТаблица + """", """""");
				
				Если СокрЛП(ПерваяСтрокаОграничение) = СокрЛП(СтрокаОграничение)
				 ИЛИ НЕ ЗначениеЗаполнено(ПерваяСтрока.ОграничениеБезКомментария)
				 ИЛИ НЕ ЗначениеЗаполнено(Строка.ОграничениеБезКомментария) Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьОшибку("ОграниченияВРазныхРоляхНеСовпадают", Строка, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ограничения на уровне записей в разных ролях стандартно должны совпадать для той же таблицы и права.
						           |Но в роли %1 обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5'"),
						Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение)
					+ Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'которое не совпадает с ролью %1, в которой
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5'"),
						ПерваяСтрока.Роль, ПерваяСтрока.Поля, ПерваяСтрока.Право, ПерваяСтрока.Таблица, ПерваяСтрока.Ограничение),
					ПерваяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Проверка совпадения текста ограничения прав Добавление и Изменение в ролях по-отдельности.
	// (Дополнительное ограничение на Добавление папок файлов накладывается в обработчике ПередЗаписью).
	Ограничения.ЗаполнитьЗначения(Неопределено, "Обработана");
	
	Для Каждого Строка Из Ограничения Цикл
		
		Если ВРег(Строка.Право) <> ВРег("Добавление")
		 Или Строка.Обработана <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка.Обработана = Истина;
		
		Если ОбщегоНазначения.ЭтоРегистр(Метаданные.НайтиПоПолномуИмени(Строка.Таблица)) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Таблица, Право, Роль, Поля");
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Отбор.Право = "Изменение";
		НайденныеСтроки = Ограничения.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Отбор.Вставить("Ограничение", "");
			ДобавитьОшибку("ОграничениеДобавленияНеСовпадаетСИзменением", Строка, НайденныеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ограничения для права Добавление стандартно совпадает с ограничением права Изменение.
					           |Но в роли %1 обнаружено
					           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
					           |%5
					           |для которого не найдено соответствующего ограничения права Изменение.'"),
					Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение),
				Отбор);
		Иначе
			НайденныеСтроки[0].Обработана = Истина;
			ОграничениеДобавления = Строка.ОграничениеБезКомментария;
			ОграничениеДобавления = СтрЗаменить(ОграничениеДобавления, """" + Строка.УказанноеПраво   + """", """""");
			ОграничениеДобавления = СтрЗаменить(ОграничениеДобавления, """" + Строка.УказаннаяТаблица + """", """""");
			ОграничениеИзменения  = НайденныеСтроки[0].ОграничениеБезКомментария;
			ОграничениеИзменения  = СтрЗаменить(ОграничениеИзменения,  """" + НайденныеСтроки[0].УказанноеПраво   + """", """""");
			ОграничениеИзменения  = СтрЗаменить(ОграничениеИзменения,  """" + НайденныеСтроки[0].УказаннаяТаблица + """", """""");
			
			Если СокрЛП(ОграничениеДобавления)<> СокрЛП(ОграничениеИзменения) Тогда
				ДобавитьОшибку("ОграничениеДобавленияНеСовпадаетСИзменением", Строка, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ограничения для права Добавление стандартно совпадает с ограничением права Изменение.
						           |Но в роли %1 обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5
						           |которое не совпадает с ограничением тех же полей для права Изменение:
						           |%6'"),
						Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, НайденныеСтроки[0].Ограничение),
					НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Ограничения Цикл
		
		Если ВРег(Строка.Право) <> ВРег("Изменение")
		 Или Строка.Обработана <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка.Обработана = Истина;
		
		Если ОбщегоНазначения.ЭтоРегистр(Метаданные.НайтиПоПолномуИмени(Строка.Таблица)) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Таблица, Право, Роль, Поля");
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Отбор.Право = "Добавление";
		НайденныеСтроки = Ограничения.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ПравоДоступа("Добавление", Метаданные.НайтиПоПолномуИмени(Отбор.Таблица), Метаданные.Роли[Отбор.Роль]) Тогда
				Отбор.Вставить("Ограничение", "");
				ДобавитьОшибку("ОграничениеДобавленияНеСовпадаетСИзменением", Строка, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ограничения для права Добавление стандартно совпадает с ограничением права Изменение.
						           |Но в роли %1 обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5
						           |для которого не найдено соответствующего ограничения права Добавление.'"),
						Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение),
					Отбор);
			КонецЕсли;
		Иначе
			НайденныеСтроки[0].Обработана = Истина;
			ОграничениеДобавления = НайденныеСтроки[0].ОграничениеБезКомментария;
			ОграничениеДобавления = СтрЗаменить(ОграничениеДобавления, """" + НайденныеСтроки[0].УказанноеПраво   + """", """""");
			ОграничениеДобавления = СтрЗаменить(ОграничениеДобавления, """" + НайденныеСтроки[0].УказаннаяТаблица + """", """""");
			ОграничениеИзменения  = Строка.ОграничениеБезКомментария;
			ОграничениеИзменения  = СтрЗаменить(ОграничениеИзменения,  """" + Строка.УказанноеПраво   + """", """""");
			ОграничениеИзменения  = СтрЗаменить(ОграничениеИзменения,  """" + Строка.УказаннаяТаблица + """", """""");
			
			Если СокрЛП(ОграничениеДобавления)<> СокрЛП(ОграничениеИзменения) Тогда
				ДобавитьОшибку("ОграничениеДобавленияНеСовпадаетСИзменением", Строка, НайденныеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ограничения для права Добавление стандартно совпадает с ограничением права Изменение.
						           |Но в роли %1 обнаружено
						           |ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
						           |%5
						           |которое не совпадает с ограничением тех же полей для права Добавление:
						           |%6'"),
						Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, НайденныеСтроки[0].Ограничение),
					НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(НайденныеОшибки) = Тип("Строка") Тогда
		Параметры.НайденныеОшибки = СокрЛ(НайденныеОшибки);
	Иначе
		Параметры.НайденныеОшибки = НайденныеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузки = "", ОшибкиВВыгрузке = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ПапкаВыгрузки) Тогда
		ВременныйКаталог = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ВременныйКаталог);
		ВыгрузитьТекущуюКонфигурациюВФайлы(ВременныйКаталог);
		ПапкаВыгрузки = ВременныйКаталог;
	КонецЕсли;
	
	ОграниченияПрав = Новый ТаблицаЗначений;
	ОграниченияПрав.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	
	ОшибкиВВыгрузке = "";
	Для Каждого Роль Из Метаданные.Роли Цикл
		ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль.Имя, ПапкаВыгрузки, ОшибкиВВыгрузке);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ОграниченияПрав;
	
КонецФункции

// Только для внутреннего использования.
Процедура ОбновитьПраваПрофильныхРолей(Журнал) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'Действие доступно только для полноправного пользователя.'");
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Действие доступно только для пользователя без пароля.'");
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Модель сервиса не поддерживается.'");
	КонецЕсли;
	
	Попытка
		СоздаваемыеРоли = ВсеПрофильныеРоли();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении описания поставляемых профилей возникла ошибка:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	
	Пути = Новый Структура;
	Пути.Вставить("ПапкаДляЖурнала",      ВременныйКаталог);
	Пути.Вставить("ПапкаДляВыгрузкиПрав", ВременныйКаталог + "\ВыгрузкаПравРолей");
	Пути.Вставить("ПапкаДляЗагрузкиПрав", ВременныйКаталог + "\ЗагрузкаПравРолей");
	
	СоздатьКаталог(Пути.ПапкаДляЖурнала);
	СоздатьКаталог(Пути.ПапкаДляВыгрузкиПрав);
	СоздатьКаталог(Пути.ПапкаДляЗагрузкиПрав);
	
	Журнал = ДобавитьКонечныйРазделительПути(Пути.ПапкаДляЖурнала) + "ЖурналОбновленияПравПрофильныхРолей.txt";
	ЗаписьТекста = Новый ЗаписьТекста(Журнал, "UTF-8");
	ЗаписьТекста.Закрыть();
	Пути.Вставить("Журнал", Журнал);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Кавычка", """");
	ПараметрыПодключения.Вставить("КаталогBin", КаталогПрограммы());
	
	ПараметрыПодключения.Вставить("Пароль", "");
	ПараметрыПодключения.Вставить("Пользователь",
		ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ПараметрыПодключения.Вставить("ПутьКБазе", СтрЗаменить(СтрокаСоединенияИнформационнойБазы(),
		ПараметрыПодключения.Кавычка, ПараметрыПодключения.Кавычка + ПараметрыПодключения.Кавычка));
	
	ЗаписатьСообщение(Журнал,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало процедуры %1'"), Формат(ТекущаяДатаСеанса(), "ДЛФ=DT")));
	
	ЕстьОшибки = Ложь;
	Попытка
		ВыгрузитьПраваРолей(ПараметрыПодключения, Пути, Журнал, ЕстьОшибки);
		
		Если Не ЕстьОшибки Тогда
			СоздатьПраваРолей(Пути, ЕстьОшибки, СоздаваемыеРоли);
		КонецЕсли;
		
		Если Не ЕстьОшибки Тогда
			ЗагрузитьПраваРолей(ПараметрыПодключения, Пути, Журнал, ЕстьОшибки);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Журнал,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить процедуру по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
	КонецПопытки;
	
	ЗаписатьСообщение(Журнал,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Окончание процедуры %1'"), Формат(ТекущаяДатаСеанса(), "ДЛФ=DT")));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для процедуры ВыгрузитьТекущуюКонфигурациюВФайлы.
Функция КонфигураторОткрыт()
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.ИмяПриложения = "Designer" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ВыгрузитьТекущуюКонфигурациюВФайлы.
Процедура ВыгрузитьКонфигурациюВФайлы(ПапкаВыгрузки, ПараметрыПодключения)

	КодВозврата = Неопределено;
	Кавычка = ПараметрыПодключения.Кавычка;
	ИмяФайлаСообщений = ПапкаВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	ЗапуститьПриложение(Кавычка + ПараметрыПодключения.КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
	+ " /IBConnectionString " + Кавычка + ПараметрыПодключения.ПутьКБазе + Кавычка
	+ " /N "                  + Кавычка + ПараметрыПодключения.Пользователь + Кавычка
	+ " /P "                  + Кавычка + ПараметрыПодключения.Пароль + Кавычка
	+ " /DumpConfigToFiles "  + Кавычка + ПапкаВыгрузки + Кавычка
	+ " /Out "                + Кавычка + ИмяФайлаСообщений + Кавычка
	+ " /DisableStartupMessages /DisableStartupDialogs "
	,
	,
	Истина,
	КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		ЕстьОшибки = Истина;
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры


// Для процедуры НеПоддерживаемыеНастройки.
Процедура ПроверитьПользовательскуюВидимость(Текст, ОписаниеЭлементов, ИмяФормы)
	
	Если ТипЗнч(ОписаниеЭлементов) = Тип("СписокXDTO") Тогда
		Для каждого ОбъектXDTO Из ОписаниеЭлементов Цикл
			ПроверитьПользовательскуюВидимость(Текст, ОбъектXDTO, ИмяФормы);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеЭлементов) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Свойство Из ОписаниеЭлементов.Свойства() Цикл
		Если Свойство.ОбъектВладелец = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСвойства = Свойство.ОбъектВладелец[Свойство.Имя];
		
		Если Свойство.Имя = "UserVisible" Тогда
			ПроверитьСвязиСРолямиСвойстваОбъекта(Текст, ОписаниеЭлементов, ИмяФормы, ЗначениеСвойства, "Item", "UserVisible");
		Иначе
			ПроверитьПользовательскуюВидимость(Текст, ЗначениеСвойства, ИмяФормы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры НеПоддерживаемыеНастройки.
Процедура ПроверитьСвойстваОбъекта(Текст, ОбъектXDTO, ИмяФормы, ИмяСвойств, ИмяСвойства, ИмяСвязи)
	
	ОбъектСвойств = ПолучитьСвойство(ОбъектXDTO, ИмяСвойств);
	Если ОбъектСвойств = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСвойства = ПолучитьСвойство(ОбъектСвойств, ИмяСвойства, Ложь);
	Если ОбъектСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбъектов = ПолучитьСписокОбъектов(ОбъектСвойства);
	
	Для каждого ОбъектСвойства Из СписокОбъектов Цикл
		Связи = ПолучитьСвойство(ОбъектСвойства, ИмяСвязи);
		Если Связи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьСвязиСРолямиСвойстваОбъекта(Текст, ОбъектСвойства, ИмяФормы, Связи, ИмяСвойства, ИмяСвязи);
	КонецЦикла;
	
КонецПроцедуры


// Для процедур ПроверитьСвойстваОбъекта, ПроверитьПользовательскуюВидимость.
Процедура ПроверитьСвязиСРолямиСвойстваОбъекта(Текст, ОбъектXDTO, ИмяФормы, Связи, ИмяСвойства, ИмяСвязи)
	
	СвязиСРолями = ПолучитьСвойство(Связи, "Value", Ложь);
	Если СвязиСРолями = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРолей = ПолучитьСписокОбъектов(СвязиСРолями);
	РольНайдена = Ложь;
	
	Для каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Если Не ЗначениеЗаполнено(ОписаниеРоли.name) Тогда
			Продолжить;
		КонецЕсли;
		Если Не РольНайдена Тогда
			РольНайдена = Истина;
			Текст = Текст + ИмяФормы  + "." + ИмяСвойства
				+ "." + ОбъектXDTO.name + " " + ИмяСвязи  +":" + Символы.ПС;
		КонецЕсли;
		Текст = Текст + " - " + ОписаниеРоли.name + Символы.ПС;
	КонецЦикла;
	
	Если РольНайдена Тогда
		Текст = Текст + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ПроверитьСвойстваОбъекта, ПроверитьСвязиСРолямиСвойстваОбъекта.
Функция ПолучитьСвойство(ОбъектXDTO, ИмяОбъекта, Получить = Истина)
	
	Если ОбъектXDTO.Свойства().Получить(ИмяОбъекта) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Получить Тогда
		Возврат ОбъектXDTO.Получить(ИмяОбъекта);
	Иначе
		Возврат ОбъектXDTO[ИмяОбъекта];
	КонецЕсли;
	
КонецФункции

// Для процедур ПроверитьСвойстваОбъекта, ПроверитьСвязиСРолямиСвойстваОбъекта.
Функция ПолучитьСписокОбъектов(ОбъектИлиСписок)
	
	Если ТипЗнч(ОбъектИлиСписок) = Тип("СписокXDTO") Тогда
		Возврат ОбъектИлиСписок;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(ОбъектИлиСписок);
		Возврат Массив;
	КонецЕсли;
	
КонецФункции


// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ПроверитьИмяТаблицы(Свойства, НайденныеОшибки)
	
	Если Свойства.Таблица <> Свойства.УказаннаяТаблица Тогда
		ДобавитьОшибку("НеверноеИмяТаблицы", Свойства, НайденныеОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В роли %1 неверно указано имя таблицы в
			           |ограничении полей ""%2"" права ""%3"" таблицы ""%4"":
			           |%5'"),
			Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ПроверитьИмяПрава(Свойства, НайденныеОшибки)
	
	Если ЗначениеЗаполнено(Свойства.УказанноеПраво)
	   И Свойства.Право <> Свойства.УказанноеПраво Тогда
		
		ДобавитьОшибку("НеверноеИмяПрава", Свойства, НайденныеОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В роли %1 неверно указано имя права в
			           |ограничении полей ""%2"" права ""%3"" таблицы ""%4"":
			           |%5'"),
			Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ДобавитьВидДоступа(Знач Свойства, НайденныеОшибки, Знач ВидыОграниченийПрав,
		Знач ВидДоступа, Знач ПолноеИмяПоля, Знач ПрисоединяемыеТаблицы)
	
	Если ВидДоступа <> "Условие"
	   И ВидДоступа <> "ПравоЧтения"
	   И ВидДоступа <> "ПравоИзменения" Тогда
		
		Отбор = Новый Структура("Таблица, Право, ВидДоступа, ТаблицаОбъекта");
		
		Отбор.Таблица    = Свойства.Таблица;
		Отбор.Право      = Свойства.Право;
		Отбор.ВидДоступа = ВидДоступа;
		
		Если ВидДоступа = "Объект" Или ВидДоступа = "НастройкиПрав" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			| " + ПолноеИмяПоля + " КАК ПолеИскомыхТипов
			|ИЗ
			|	" + Свойства.Таблица + " КАК Т
			|" + ПрисоединяемыеТаблицы + "
			|ГДЕ
			|	Ложь";
			
			Если ВидДоступа = "НастройкиПрав" Тогда
				ТекущиеПараметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
				ВладельцыПрав = ТекущиеПараметры.ВозможныеПраваДляНастройкиПравОбъектов.ПоПолнымИменам;
			КонецЕсли;
			
			Для каждого Тип Из Запрос.Выполнить().Выгрузить().Колонки.ПолеИскомыхТипов.ТипЗначения.Типы() Цикл
				Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(Тип) <> Неопределено Тогда
					МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
					ТаблицаТипа = МетаданныеТипа.ПолноеИмя();
					Если ВидДоступа = "НастройкиПрав" И ВладельцыПрав.Получить(ТаблицаТипа) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Отбор.ТаблицаОбъекта = ТаблицаТипа;
					Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа) = Неопределено Тогда
			
			ДобавитьОшибку("НеверноеИмяВидаДоступа", Свойства, НайденныеОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В роли %1 неверно указано имя вида доступа ""%2"" в
				           |ограничении полей ""%3"" права ""%4"" таблицы ""%5"":
				           |%6'"),
				Свойства.Роль, ВидДоступа, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение));
		Иначе
			Отбор.ТаблицаОбъекта = "";
			Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав, ПроверитьИмяТаблицы, ПроверитьИмяПрава.
Процедура ДобавитьОшибку(ВидОшибки, Строка, НайденныеОшибки, ТекстОшибки, Строка2 = Неопределено)
	
	ЭтоИсключение = Ложь;
	ПриОбнаруженииОшибки(ВидОшибки, Строка, ЭтоИсключение);
	
	Если ЭтоИсключение Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НайденныеОшибки) = Тип("Строка") Тогда
		НайденныеОшибки = НайденныеОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НайденныеОшибки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	НоваяСтрока.ВидОшибки   = ВидОшибки;
	НоваяСтрока.ТекстОшибки = ТекстОшибки;
	
	Если Строка2 <> Неопределено Тогда
		НоваяСтрока.Роль2        = Строка2.Роль;
		НоваяСтрока.Таблица2     = Строка2.Таблица;
		НоваяСтрока.Право2       = Строка2.Право;
		НоваяСтрока.Поля2        = Строка2.Поля;
		НоваяСтрока.Ограничение2 = Строка2.Ограничение;
	КонецЕсли;
	
КонецПроцедуры


// Для процедуры ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы.
Процедура ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль, ПапкаВыгрузки, ОписаниеОшибки)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Пути",   Новый Структура("ПапкаДляВыгрузкиПрав", ПапкаВыгрузки));
	Контекст.Вставить("Журнал", Новый Структура("Текст", ""));
	Контекст.Вставить("МассивОбъектов",       Новый Массив);
	Контекст.Вставить("СоответствиеОбъектов", Новый Соответствие);
	Контекст.Вставить("МассивШаблонов",       Новый Массив);
	Контекст.Вставить("СоответствиеШаблонов", Новый Соответствие);
	
	ЕстьОшибки = Ложь;
	Попытка
		ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
	Права = Новый Соответствие;
	Права.Вставить("Read",   "Чтение");
	Права.Вставить("Insert", "Добавление");
	Права.Вставить("Update", "Изменение");
	Права.Вставить("Delete", "Удаление");
	
	СоответствиеОбъектов = Контекст.СоответствиеОбъектов;
	
	Для Каждого ОписаниеОбъекта Из СоответствиеОбъектов Цикл
		Если СтрЧислоВхождений(ОписаниеОбъекта.Ключ, ".") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъекта.Ключ).ПолноеИмя();
		Если ПолноеИмя = Неопределено Тогда
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти объект метаданных ""%1"".'"), ПолноеИмя));
			ЕстьОшибки = Истина;
		КонецЕсли;
		СоответствиеПрав = ОписаниеОбъекта.Значение.СоответствиеПрав;
		Для Каждого ОписаниеПрава Из СоответствиеПрав Цикл
			ОграниченияПолей = ОписаниеПрава.Значение.ОграниченияПолей;
			Если Не ЗначениеЗаполнено(ОграниченияПолей) Тогда
				Продолжить;
			КонецЕсли;
			Право = Права[ОписаниеПрава.Ключ];
			Для Каждого ОписаниеОграничения Из ОграниченияПолей Цикл
				Если ОписаниеОграничения.Ключ = "" И Не ЗначениеЗаполнено(ОписаниеОграничения.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Поля = ?(ОписаниеОграничения.Ключ = "", НСтр("ru = '<Прочие поля>'"), ОписаниеОграничения.Ключ);
				НоваяСтрока = ОграниченияПрав.Добавить();
				НоваяСтрока.Таблица     = ПолноеИмя;
				НоваяСтрока.Роль        = Роль;
				НоваяСтрока.Право       = Право;
				НоваяСтрока.Поля        = Поля;
				НоваяСтрока.Ограничение = ОписаниеОграничения.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


// Для процедуры ОбновитьПраваПрофильныхРолей.
Процедура ВыгрузитьПраваРолей(ПараметрыПодключения, Пути, Журнал, ЕстьОшибки)
	
	ЗаписатьСообщение(Журнал,, НСтр("ru = 'Выгрузка прав всех ролей'"));
	
	КодВозврата = Неопределено;
	Кавычка = ПараметрыПодключения.Кавычка;
	ИмяФайлаСообщений = Пути.ПапкаДляЖурнала + "\СообщенияВыгрузкиПрав.txt";
	
	ЗапуститьПриложение(Кавычка + ПараметрыПодключения.КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
	+ " /IBConnectionString " + Кавычка + ПараметрыПодключения.ПутьКБазе + Кавычка
	+ " /N "                  + Кавычка + ПараметрыПодключения.Пользователь + Кавычка
	+ " /P "                  + Кавычка + ПараметрыПодключения.Пароль + Кавычка
	+ " /DumpConfigFiles "    + Кавычка + Пути.ПапкаДляВыгрузкиПрав + Кавычка
	+ " -Right"
	+ " /Out "                + Кавычка + ИмяФайлаСообщений + Кавычка
	+ " /DisableStartupMessages /DisableStartupDialogs "
	,
	,
	Истина,
	КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		ЕстьОшибки = Истина;
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ЗаписатьСообщение(Журнал,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку прав по причине:
			           |%1'"), Сообщения));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьПраваПрофильныхРолей.
Процедура ЗагрузитьПраваРолей(ПараметрыПодключения, Пути, Журнал, ЕстьОшибки)
	
	ЗаписатьСообщение(Журнал,, НСтр("ru = 'Загрузка прав профильных ролей'"));
	
	КодВозврата = Неопределено;
	Кавычка = ПараметрыПодключения.Кавычка;
	ИмяФайлаСообщений = Пути.ПапкаДляЖурнала + "\СообщенияЗагрузкиПрав.txt";
	
	ЗапуститьПриложение(Кавычка + ПараметрыПодключения.КаталогBIN + "1cv8.exe" + Кавычка + " DESIGNER"
	+ " /IBConnectionString " + Кавычка + ПараметрыПодключения.ПутьКБазе + Кавычка
	+ " /N "                  + Кавычка + ПараметрыПодключения.Пользователь + Кавычка
	+ " /P "                  + Кавычка + ПараметрыПодключения.Пароль + Кавычка
	+ " /LoadConfigFiles "    + Кавычка + Пути.ПапкаДляЗагрузкиПрав + Кавычка
	+ " -Right"
	+ " /Out "                + Кавычка + ИмяФайлаСообщений + Кавычка
	+ " /DisableStartupMessages /DisableStartupDialogs "
	,
	,
	Истина,
	КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		ЕстьОшибки = Истина;
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ЗаписатьСообщение(Журнал,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку прав профильных ролей по причине:
			           |%1'"), Сообщения));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьПраваПрофильныхРолей.
Функция ВсеПрофильныеРоли()
	
	ЕстьИзменения = Ложь;
	Справочники.ПрофилиГруппДоступа.ОбновитьОписаниеПоставляемыхПрофилей(ЕстьИзменения, Истина);
	
	Если ЕстьИзменения Тогда
		ВызватьИсключение НСтр("ru = 'Описание поставляемых профилей не обновлено. Выполните обновление информационной базы.'");
	КонецЕсли;
	
	ТекущиеПараметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ОписанияПрофилей = ТекущиеПараметры.ПоставляемыеПрофилиГруппДоступа.ОписанияПрофилейМассив;
	
	ВсеПрофильныеРоли = Новый Соответствие;
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеПрофиля.Имя)
		 Или ОписаниеПрофиля.Имя = "Администратор" Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяПрофильнойРоли = "Профиль" + ОписаниеПрофиля.Имя;
		Если Метаданные.Роли.Найти(ИмяПрофильнойРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПрофильныеРоли.Вставить(ИмяПрофильнойРоли, ОписаниеПрофиля.Роли);
	КонецЦикла;
	
	Возврат ВсеПрофильныеРоли;
	
КонецФункции

// Для процедуры ОбновитьПраваПрофильныхРолей.
Процедура СоздатьПраваРолей(Пути, ЕстьОшибки, СоздаваемыеРоли = Неопределено)
	
	Журнал = Пути.Журнал;
	
	Для каждого СоздаваемаяРоль Из СоздаваемыеРоли Цикл
		ЕстьОшибкиСозданияРоли = Ложь;
		ЗаписатьСообщение(Журнал,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Создание прав профильной роли %1'"), СоздаваемаяРоль.Ключ));
		
		СоздатьПраваРоли(СоздаваемаяРоль.Ключ, СоздаваемаяРоль.Значение, Пути, Журнал, ЕстьОшибкиСозданияРоли);
		Если ЕстьОшибкиСозданияРоли Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры СоздатьПраваРолей.
Процедура СоздатьПраваРоли(СоздаваемаяРоль, ИзРолей, Пути, Журнал, ЕстьОшибки)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Пути",   Пути);
	Контекст.Вставить("Журнал", Журнал);
	Контекст.Вставить("СтарыйФорматИмениФайла");
	Контекст.Вставить("МассивОбъектов",       Новый Массив);
	Контекст.Вставить("СоответствиеОбъектов", Новый Соответствие);
	Контекст.Вставить("МассивШаблонов",       Новый Массив);
	Контекст.Вставить("СоответствиеШаблонов", Новый Соответствие);
	
	Для каждого Роль Из ИзРолей Цикл
		ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки);
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При записи прав роли %1 произошла ошибка:'"), СоздаваемаяРоль);
	
	ИмяФайлаРоли = "Роль." + СоздаваемаяРоль + ".Права.xml";
	ПолноеИмяФайлаРоли = ДобавитьКонечныйРазделительПути(Пути.ПапкаДляЗагрузкиПрав) + ИмяФайлаРоли;
	ЗаписьXML = Новый ЗаписьXML;
	Попытка
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайлаРоли, "UTF-8");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ну удалось открыть для записи файл XML по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Rights");
	ЗаписьXML.ЗаписатьАтрибут("xmlns",     "http://v8.1c.ru/8.2/roles");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xsi:type",  "Rights");
	
	ЗаписатьЭлемент(ЗаписьXML, "setForNewObjects", False);
	ЗаписатьЭлемент(ЗаписьXML, "setForAttributesByDefault", True);
	ЗаписатьЭлемент(ЗаписьXML, "independentRightsOfChildObjects", False);
	
	Для Каждого ИмяОбъекта Из Контекст.МассивОбъектов Цикл
		ЗаписатьОбъект(ЗаписьXML, ИмяОбъекта, Контекст.СоответствиеОбъектов[ИмяОбъекта]);
	КонецЦикла;
	
	Для Каждого ИмяШаблона Из Контекст.МассивШаблонов Цикл
		ЗаписатьШаблон(ЗаписьXML, ИмяШаблона, Контекст.СоответствиеШаблонов[ИмяШаблона]);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Rights
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Для процедуры ДобавитьОграниченияПравРоли, СоздатьПраваРоли.
Процедура ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки)
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При чтении прав роли %1 произошла ошибка:'"), Роль);
	
	Контекст.Вставить("ЗаголовокОшибкиЧтенияПравРоли", ЗаголовокОшибки);
	
	Если Контекст.Свойство("СтарыйФорматИмениФайла") Тогда
		ИмяФайлаРоли = "Роль." + Роль + ".Права.xml";
	Иначе
		ИмяФайлаРоли = "Role." + Роль + ".Rights.xml";
	КонецЕсли;
	ПолноеИмяФайлаРоли = ДобавитьКонечныйРазделительПути(Контекст.Пути.ПапкаДляВыгрузкиПрав) + ИмяФайлаРоли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайлаРоли);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ну удалось открыть для чтения файл XML по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	Если Не ЧтениеXML.Прочитать()
	 Или Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "Rights"
	 Или Не ЧтениеXML.URIПространстваИмен = "http://v8.1c.ru/8.2/roles"
	 Или Не ЧтениеXML.Прочитать()
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForNewObjects") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForAttributesByDefault") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "independentRightsOfChildObjects") <> Неопределено
	 Или Не ЧтениеXML.ИмеетИмя Тогда
		
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'Некорректный файл прав'"));
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Не (  ЧтениеXML.Имя = "Rights"
	         И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеXML.Имя = "object" Тогда
			Попытка
				ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ну удалось прочитать элемент object по причине:
					           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
			
		ИначеЕсли ЧтениеXML.Имя = "restrictionTemplate" Тогда
			Попытка
				ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ну удалось прочитать элемент restrictionTemplate по причине:
					           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
		Иначе
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать файл прав, т.к. обнаружен неизвестный элемент %1'"), ЧтениеXML.Имя));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЧтениеXML.ИмеетИмя Тогда
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'В структуре XML элемент не завершен'"));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяОбъекта = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя объекта)'");
	КонецЕсли;
	
	СвойстваОбъекта = Контекст.СоответствиеОбъектов.Получить(ИмяОбъекта);
	Если СвойстваОбъекта = Неопределено Тогда
		Контекст.МассивОбъектов.Добавить(ИмяОбъекта);
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("МассивПрав",       Новый Массив);
		СвойстваОбъекта.Вставить("СоответствиеПрав", Новый Соответствие);
		Контекст.СоответствиеОбъектов.Вставить(ИмяОбъекта, СвойстваОбъекта);
	КонецЕсли;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "right" Цикл
		
		Попытка
			ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ну удалось прочитать элемент right элемента object с именем
				           |%1
				           |по причине:
				           |%2'"), ИмяОбъекта, КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "object" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента object с именем:
			           |%1'"), ИмяОбъекта);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьОбъект.
Процедура ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяПрава = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя права)'");
	КонецЕсли;
	
	ЗначениеПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "value");
	Если ИмяПрава = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство value (значение права с именем %1)'"), ИмяПрава);
	КонецЕсли;
	
	ЗначениеПрава = XMLЗначение(Тип("Булево"), ЗначениеПрава);
	
	СвойстваПрава = СвойстваОбъекта.СоответствиеПрав.Получить(ИмяПрава);
	Если СвойстваПрава = Неопределено Тогда
		СвойстваОбъекта.МассивПрав.Добавить(ИмяПрава);
		СвойстваПрава = Новый Структура;
		СвойстваПрава.Вставить("Значение",         ЗначениеПрава);
		СвойстваПрава.Вставить("ОграниченияПолей", Неопределено);
		СвойстваОбъекта.СоответствиеПрав.Вставить(ИмяПрава, СвойстваПрава);
	Иначе
		Если ЗначениеПрава = Истина Тогда
			СвойстваПрава.Значение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОграниченияПолей = Новый Соответствие;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "restrictionByCondition" Цикл
		
		Попытка
			ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава);
		Исключение
			ЕстьОшибки = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ну удалось прочитать элемент restrictionByCondition права %1 по причине:
				           |%2'"), ИмяПрава, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеПрава = Истина Тогда
		ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "right" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента right с именем:
			           |%1'"), ИмяПрава);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава)
	
	ЧтениеXML.Прочитать();
	
	Поля = Новый Массив;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "field" Цикл
		
		ИмяПоля = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "field");
		Если ИмяПоля = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'У элемента restrictionByCondition некорректное свойство field'");
		КонецЕсли;
		Поля.Добавить(ИмяПоля);
	КонецЦикла;
	
	Если Поля.Количество() = 0 Тогда
		Поля.Добавить(""); // Прочие поля.
	КонецЕсли;
	
	Ограничение = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Ограничение = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'У элемента restrictionByCondition не найдено свойство condition'");
	КонецЕсли;
	
	Для каждого Поле Из Поля Цикл
		ОграниченияПолей.Вставить(Поле, Ограничение);
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionByCondition" Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось найти конец элемента restrictionByCondition'");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки)
	
	Если ОграниченияПолей.Количество() > 0
	   И ОграниченияПолей.Получить("") = Неопределено Тогда
		
		// Ограничение "Прочие поля" есть всегда, либо пустое, либо заполненное.
		ОграниченияПолей.Вставить("", "");
	КонецЕсли;
	
	Если СвойстваПрава.ОграниченияПолей = Неопределено Тогда
		// Ограничения полей текущего права обрабатываются первый раз.
		СвойстваПрава.ОграниченияПолей = ОграниченияПолей;
		Возврат;
		
	ИначеЕсли СвойстваПрава.ОграниченияПолей.Количество() = 0 Тогда
		// Одна из ролей не имеет ограничений права ни на одно из полей.
		Возврат;
	КонецЕсли;
	
	Если ОграниченияПолей.Количество() = 0 Тогда
		// Текущая роль не имеет ограничений права ни на одно из полей.
		СвойстваПрава.ОграниченияПолей = Новый Соответствие;
		Возврат;
	КонецЕсли;
	
	НовоеОграничениеПрочихПолей = ОграниченияПолей.Получить("");
	
	// Проверка/обновление текущих ограничений отдельных полей по новому ограничению для прочих полей.
	Для каждого КлючИЗначение Из СвойстваПрава.ОграниченияПолей Цикл
		ИмяПоля         = КлючИЗначение.Ключ;
		ОграничениеПоля = КлючИЗначение.Значение;
		Если ОграниченияПолей.Получить(ИмяПоля) <> Неопределено Тогда
			// Это поле имеет отдельную новую настройку ограничения.
			Продолжить;
		КонецЕсли;
		Если ОграничениеПоля = "" Тогда
			// Это поле не имеет ограничения, поэтому не должно совпадать с новым общим ограничением.
			Продолжить;
		КонецЕсли;
		Если НовоеОграничениеПрочихПолей = "" Тогда
			СвойстваПрава.ОграниченияПолей[ИмяПоля] = "";
		ИначеЕсли ОграничениеПоля <> НовоеОграничениеПрочихПолей Тогда
			ЕстьОшибки = Истина;
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, НовоеОграничениеПрочихПолей));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка текущих ограничений полей по новым ограничения.
	// Добавление ограничений новых отдельных полей.
	СтароеОграничениеПрочихПолей = СвойстваПрава.ОграниченияПолей.Получить("");
	Для каждого КлючИЗначение Из ОграниченияПолей Цикл
		Поле        = КлючИЗначение.Ключ;
		Ограничение = КлючИЗначение.Значение;
		
		ОграничениеПоля = СвойстваПрава.ОграниченияПолей.Получить(Поле);
		Если ОграничениеПоля = Неопределено Тогда
			ОграничениеПоля = СтароеОграничениеПрочихПолей;
			СвойстваПрава.ОграниченияПолей.Вставить(Поле, ОграничениеПоля);
		КонецЕсли;
		
		Если ОграничениеПоля = "" Тогда
			// Поле без ограничения не может стать с ограничением.
		ИначеЕсли Ограничение = "" Тогда
			СвойстваПрава.ОграниченияПолей[Поле] = "";
		ИначеЕсли ОграничениеПоля <> Ограничение Тогда
			ЕстьОшибки = Истина;
			ИмяПоля = ?(ЗначениеЗаполнено(Поле), Поле, НСтр("ru = '<Прочие поля>'"));
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, Ограничение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяШаблона = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяШаблона = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя шаблона)'");
	КонецЕсли;
	
	Шаблон = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Шаблон = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство condition (текст шаблона)'");
	КонецЕсли;
	
	ТекстШаблона = Контекст.СоответствиеШаблонов.Получить(ИмяШаблона);
	Если ТекстШаблона = Неопределено Тогда
		Контекст.МассивШаблонов.Добавить(ИмяШаблона);
		Контекст.СоответствиеШаблонов.Вставить(ИмяШаблона, Шаблон);
		
	ИначеЕсли ТекстШаблона <> Шаблон Тогда
		ЕстьОшибки = Истина;
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Текст шаблона с именем %1, загруженный ранее:
			           |%2
			           |не совпадает с указанным:
			           |%3'"), ИмяШаблона, ТекстШаблона, Шаблон));
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionTemplate" Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось найти конец элемента restrictionTemplate'");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры СоздатьПраваРоли.
Процедура ЗаписатьОбъект(ЗаписьXML, ИмяОбъекта, СвойстваОбъекта)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
	ЗаписатьЭлемент(ЗаписьXML, "name", ИмяОбъекта);
	
	Для Каждого Право Из СвойстваОбъекта.МассивПрав Цикл
		СвойстваПрава = СвойстваОбъекта.СоответствиеПрав[Право];
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("right");
		ЗаписатьЭлемент(ЗаписьXML, "name", Право);
		ЗаписатьЭлемент(ЗаписьXML, "value", СвойстваПрава.Значение);
		Если ЗначениеЗаполнено(СвойстваПрава.ОграниченияПолей) Тогда
			ПоляОграничений = ПоляОграничений(СвойстваПрава.ОграниченияПолей);
			Для Каждого ПоляОграничения Из ПоляОграничений Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("restrictionByCondition");
				Ограничение = ПоляОграничения.Ключ;
				Поля = ПоляОграничения.Значение;
				Для Каждого Поле Из Поля Цикл
					Если Поле = "" Тогда
						Продолжить;
					КонецЕсли;
					ЗаписатьЭлемент(ЗаписьXML, "field", Поле);
				КонецЦикла;
				ЗаписатьЭлемент(ЗаписьXML, "condition", Ограничение);
				ЗаписьXML.ЗаписатьКонецЭлемента(); // restrictionByCondition
			КонецЦикла;
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // right
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // object
	
КонецПроцедуры

// Для процедуры ЗаписатьОбъект.
Функция ПоляОграничений(ОграниченияПолей)
	
	ПоляОграничений = Новый Соответствие;
	
	Для каждого КлючИЗначение Из ОграниченияПолей Цикл
		Поле        = КлючИЗначение.Ключ;
		Ограничение = КлючИЗначение.Значение;
		
		ПоляОграничения = ПоляОграничений.Получить(Ограничение);
		Если ПоляОграничения = Неопределено Тогда
			ПоляОграничения = Новый Массив;
			ПоляОграничений.Вставить(Ограничение, ПоляОграничения);
		КонецЕсли;
		ПоляОграничения.Добавить(Поле);
	КонецЦикла;
	
	ОграничениеПрочихПолей = ОграниченияПолей.Получить("");
	Если ОграничениеПрочихПолей = Неопределено Тогда
		Возврат ПоляОграничений;
	КонецЕсли;
	
	ПоляОграничения = ПоляОграничений.Получить(ОграничениеПрочихПолей);
	Если ПоляОграничения.Количество() <> 1 Тогда
		ПоляОграничения.Очистить();
		ПоляОграничения.Добавить("");
	КонецЕсли;
	
	Если ОграничениеПрочихПолей = "" Тогда
		ПоляОграничений.Удалить("");
	КонецЕсли;
	
	Возврат ПоляОграничений;
	
КонецФункции

// Для процедуры СоздатьПраваРоли.
Процедура ЗаписатьШаблон(ЗаписьXML, ИмяШаблона, ТекстШаблона)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("restrictionTemplate");
	ЗаписатьЭлемент(ЗаписьXML, "name", ИмяШаблона);
	ЗаписатьЭлемент(ЗаписьXML, "condition", ТекстШаблона);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // restrictionTemplate
	
КонецПроцедуры

// Для процедур СоздатьПраваРоли, ЗаписатьОбъект, ЗаписатьШаблон.
Процедура ЗаписатьЭлемент(ЗаписьXML, ИмяЭлемента, Значение)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Для процедур ДобавитьПраваРоли, ПрочитатьОбъект, ПрочитатьПравоОбъекта,
// ПрочитатьОграничениеПолей, ПрочитатьШаблонОграничения.
Функция ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, ИмяЭлемента)
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = ИмяЭлемента Тогда
		
		ЧтениеXML.Прочитать();
		Возврат "";
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст
	 Или Не ЧтениеXML.ИмеетЗначение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = ЧтениеXML.Значение;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

// Для процедур ОбновитьПраваПрофильныхРолей, ДобавитьОграниченияПравРоли,
// ВыгрузитьПраваРолей, ЗагрузитьПраваРолей, СоздатьПраваРолей, СоздатьПраваРоли,
// ДобавитьПраваРоли, ПрочитатьОбъект, ДобавитьОграниченияПолей, ПрочитатьШаблонОграничения.
//
Процедура ЗаписатьСообщение(Журнал, Заголовок = "", Описание = "")
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста = Новый ЗаписьТекста(Журнал, "UTF-8",, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок)
	 Или ЗначениеЗаполнено(Описание) Тогда
		
		Строка = СокрЛП(Заголовок + Символы.ПС + Описание) + Символы.ПС;
		
		Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
			ЗаписьТекста.ЗаписатьСтроку(Строка);
		Иначе
			Журнал.Текст = Журнал.Текст + Символы.ПС + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьПраваПрофильныхРолей, СоздатьПраваРоли, ДобавитьПраваРоли.
Функция ДобавитьКонечныйРазделительПути(ПутьКаталога)
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли

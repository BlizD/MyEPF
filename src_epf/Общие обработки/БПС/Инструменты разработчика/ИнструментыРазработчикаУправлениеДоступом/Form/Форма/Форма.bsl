// См. в модуле объекта раздел "ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ".

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИсточникОграничений = "ИзТабличногоДокумента";
	ВыполнятьВыгрузкуВоВременнуюПапку = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Пояснение5ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка <> "НайтиНеподдерживаемыеНастройки" Тогда
		Возврат;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'Работа в веб-клиенте не поддерживается.'"));
	Возврат;
#КонецЕсли
	
	Если Не ИнформационнаяБазаФайловая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Поддерживается работа только в файловой информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(НеподдерживаемыеНастройки());
	ТекстовыйДокумент.Показать(НСтр("ru = 'Неподдерживаемые настройки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОграниченийПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаГотовойВыгрузкиКонфигурацииВФайлыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = ПапкаГотовойВыгрузкиКонфигурацииВФайлы;
	Диалог.Заголовок = НСтр("ru = 'Выбор папки, содержащей файлы выгрузки конфигурации'");
	
	Диалог.Показать(Новый ОписаниеОповещения(
		"ПапкаГотовойВыгрузкиКонфигурацииВФайлыНачалоВыбораПослеВыбора", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОписаниеПрофилейВыполнить(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ОписаниеНачальногоЗаполненияПрофилейНаВстроенномЯзыке());
	ТекстовыйДокумент.Показать(НСтр("ru = 'Описание начального заполнения имеющихся профилей групп доступа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьВыгрузкуВоВременнуюПапкуПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПолноеОписание(Команда)
	
	СформироватьОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписаниеРазличий(Команда)
	
	СформироватьОписание(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПраваПрофильныхРолей(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'Работа в веб-клиенте не поддерживается.'"));
	Возврат;
#КонецЕсли
	
	Если Не ИнформационнаяБазаФайловая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Поддерживается работа только в файловой информационной базе.'"));
		Возврат;
	КонецЕсли;
	
	Журнал = "";
	ОбновитьПраваПрофильныхРолейНаСервере(Журнал);
	
	Если ЗначениеЗаполнено(Журнал) Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(Журнал);
		Текст.Показать(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Журнал обновления (%1)'"), Журнал));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементов(Контекст)
	
	Элементы = Контекст.Элементы;
	Элементы.ПапкаГотовойВыгрузкиКонфигурацииВФайлы.Доступность = Не Контекст.ВыполнятьВыгрузкуВоВременнуюПапку;
	
	Если Контекст.ИсточникОграничений = "ИзВыгрузкиКонфигурацииВФайлы" Тогда
		Элементы.ПолучениеОграничений.ТекущаяСтраница = Элементы.ОграниченияИзВыгрузки;
	Иначе
		Элементы.ПолучениеОграничений.ТекущаяСтраница = Элементы.ОграниченияИзСписка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаГотовойВыгрузкиКонфигурацииВФайлыНачалоВыбораПослеВыбора(ВыбранныеФайлы, Контекст) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		ПапкаГотовойВыгрузкиКонфигурацииВФайлы = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписание(ПолноеОписание = Истина)
	
	СуществующееОписание = "";
	ЗаполнитьВидыОграниченийПравОбъектовМетаданных(СуществующееОписание);
	
	Если ИсточникОграничений <> "ИзВыгрузкиКонфигурацииВФайлы"
	   И ВсеОграниченияДоступа.ВысотаТаблицы = 0 Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Требуется заполнение табличного
			           |документа ""Все ограничения доступа"".
			           |Инструкции см. выше.'"));
		Возврат;
	КонецЕсли;
	
	НовоеОписание = НовоеОписаниеВидовОграниченийПрав();
	Если НовоеОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолноеОписание Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(
		"	Описание =
		|	""");
		
		Текст.ДобавитьСтроку(НовоеОписание);
		
		Текст.ДобавитьСтроку(
		"	|"";");
		
		Текст.Показать(НСтр("ru = 'Описание видов ограничений прав объектов метаданных'"));
		Возврат;
	КонецЕсли;
	
	НедостающиеСтроки = "";
	ЧислоСтрок = СтрЧислоСтрок(НовоеОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(НовоеОписание, НомерСтроки);
		Если СтрНайти(СуществующееОписание, Сред(Строка, 3)) = 0 Тогда
			НедостающиеСтроки = НедостающиеСтроки + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	ЛишниеСтроки = "";
	ЧислоСтрок = СтрЧислоСтрок(СуществующееОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = "	|" + СтрПолучитьСтроку(СуществующееОписание, НомерСтроки);
		Если СтрНайти(НовоеОписание, Строка) = 0 Тогда
			ЛишниеСтроки = ЛишниеСтроки + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Текст = Новый ТекстовыйДокумент;
	
	Текст.ДобавитьСтроку(НСтр("ru = 'Недостающие виды ограничений прав объектов метаданных:'"));
	Текст.ДобавитьСтроку(СокрП(НедостающиеСтроки));
	Текст.ДобавитьСтроку("");
	
	Текст.ДобавитьСтроку(НСтр("ru = 'Лишние виды ограничений прав объектов метаданных:'"));
	Текст.ДобавитьСтроку(СокрП(ЛишниеСтроки));
	Текст.ДобавитьСтроку("");
	
	Текст.Показать(НСтр("ru = 'Недостающие и лишние виды ограничений прав объектов метаданных'"));
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьВидыОграниченийПравОбъектовМетаданных(СуществующееОписание)
	
	Список = УправлениеДоступомСлужебныйПовтИсп.ПостоянныеВидыОграниченийПравОбъектовМетаданных(Истина);
	
	Для Каждого Строка Из Список Цикл
		СуществующееОписание = СуществующееОписание
			+ Строка.ПолноеИмяТаблицы + "." + Строка.Право + "." + Строка.ИмяВидаДоступа
			+ ?(ЗначениеЗаполнено(Строка.ПолноеИмяТаблицыОбъекта), "." + Строка.ПолноеИмяТаблицыОбъекта, "")
			+ Символы.ПС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовоеОписаниеВидовОграниченийПрав()
	
	ВидыОграниченийПрав.Очистить();
	
	ОшибкиВВыгрузке = "";
	НайденныеОшибки = ОпределитьВидыОграниченийПравНаСервере(ОшибкиВВыгрузке);
	Если ЗначениеЗаполнено(ОшибкиВВыгрузке) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ОшибкиВВыгрузке);
		ТекстовыйДокумент.Показать(НСтр("ru = 'Ошибки при загрузке ограничений из файлов выгрузки конфигурации'"));
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(НайденныеОшибки) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(НайденныеОшибки);
		ТекстовыйДокумент.Показать(НСтр("ru = 'Ошибки, найденные в текстах ограничений доступа'"));
	КонецЕсли;
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		Если ВРег(Лев(Строка.Таблица, СтрДлина("Справочник."))) = ВРег("Справочник.") Тогда
			Строка.ПорядокКоллекции = 1;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Документ."))) = ВРег("Документ.") Тогда
			Строка.ПорядокКоллекции = 2;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ЖурналДокументов."))) = ВРег("ЖурналДокументов.") Тогда
			Строка.ПорядокКоллекции = 3;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовХарактеристик."))) = ВРег("ПланВидовХарактеристик.") Тогда
			Строка.ПорядокКоллекции = 4;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланСчетов."))) = ВРег("ПланСчетов.") Тогда
			Строка.ПорядокКоллекции = 5;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовРасчета."))) = ВРег("ПланВидовРасчета.") Тогда
			Строка.ПорядокКоллекции = 6;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрСведений."))) = ВРег("РегистрСведений.") Тогда
			Строка.ПорядокКоллекции = 7;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрНакопления."))) = ВРег("РегистрНакопления.") Тогда
			Строка.ПорядокКоллекции = 8;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрБухгалтерии."))) = ВРег("РегистрБухгалтерии.") Тогда
			Строка.ПорядокКоллекции = 9;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрРасчета."))) = ВРег("РегистрРасчета.") Тогда
			Строка.ПорядокКоллекции = 10;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("БизнесПроцесс."))) = ВРег("БизнесПроцесс.") Тогда
			Строка.ПорядокКоллекции = 11;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Задача."))) = ВРег("Задача.") Тогда
			Строка.ПорядокКоллекции = 12;
			
		КонецЕсли;
		
		Если Строка.Право = "Чтение" Тогда
			Строка.ПорядокПрав = 1;
		Иначе
			Строка.ПорядокПрав = 2;
		КонецЕсли;
	КонецЦикла;
	
	ВидыОграниченийПрав.Сортировать("ПорядокКоллекции Возр, Таблица Возр, ПорядокПрав Возр, ВидДоступа Возр, ТаблицаОбъекта Возр");
	
	НовоеОписание = "";
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		
		НовоеОписание = НовоеОписание
			+ "	|"
			+ Строка.Таблица
			+ "." + Строка.Право
			+ "." + Строка.ВидДоступа
			+ ?(ЗначениеЗаполнено(Строка.ТаблицаОбъекта), "." + Строка.ТаблицаОбъекта, "")
			+ Символы.ПС;
		
	КонецЦикла;
	
	Возврат СокрП(НовоеОписание);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНачальногоЗаполненияПрофилейНаВстроенномЯзыке()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|ГДЕ
	|	Профили.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|	И НЕ Профили.ПометкаУдаления
	|	И &ОтборЭлементов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Профили.Наименование";
	
	Если Метаданные.Справочники.ПрофилиГруппДоступа.Иерархический
	   И Метаданные.Справочники.ПрофилиГруппДоступа.ВидИерархии
	     = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		УсловиеОтбораЭлементов = "(НЕ Профили.ЭтоГруппа)";
	Иначе
		УсловиеОтбораЭлементов = "Истина";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭлементов", УсловиеОтбораЭлементов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Текст = "";
	Пока Выборка.Следующий() Цикл
		Текст = Текст + ОписаниеНачальногоЗаполненияПрофиляНаВстроенномЯзыке(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Текст + Символы.ПС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНачальногоЗаполненияПрофиляНаВстроенномЯзыке(Профиль)
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ТекущиеПараметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ОписанияПрофилей = ТекущиеПараметры.ПоставляемыеПрофилиГруппДоступа.ОписанияПрофилей;
	СвойстваПрофиля = ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	ОписаниеПоставляемогоПрофиля = "";
	Если СвойстваПрофиля <> Неопределено Тогда
		ОписаниеПоставляемогоПрофиля = СвойстваПрофиля.Описание;
	КонецЕсли;
	
	Описание = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(ОписаниеПоставляемогоПрофиля) Цикл
		Если ЗначениеЗаполнено(Описание) Тогда
			Описание = Описание
			+ "
			  |		           |";
		КонецЕсли;
		Описание = Описание + СтрПолучитьСтроку(ОписаниеПоставляемогоПрофиля, НомерСтроки);
	КонецЦикла;
	
	Имя = ОбщегоНазначения.ИмяПредопределенного(Профиль);
	
	Если Не ЗначениеЗаполнено(Имя)
	   И СвойстваПрофиля <> Неопределено
	   И ЗначениеЗаполнено(СвойстваПрофиля.Имя) Тогда
		
		Имя = СвойстваПрофиля.Имя;
	КонецЕсли;
	
	Если Профиль.ИдентификаторПоставляемыхДанных
		= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		
		Идентификатор = Строка(Профиль.УникальныйИдентификатор());
	Иначе
		Идентификатор = Строка(Профиль.ИдентификаторПоставляемыхДанных);
	КонецЕсли;
	
	Текст = "
	|	// Профиль """ + Профиль.Наименование + """.
	|	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();" + ?(НЕ ЗначениеЗаполнено(Имя), "", "
	|	ОписаниеПрофиля.Имя           = """ + Имя + """") + ";
	|	ОписаниеПрофиля.Идентификатор = """ + Профиль.УникальныйИдентификатор() + """;
	|	ОписаниеПрофиля.Наименование  =
	|		НСтр(""ru = '" + Профиль.Наименование + "'"",
	|			Метаданные.ОсновнойЯзык.КодЯзыка);
	|	ОписаниеПрофиля.Описание =
	|		НСтр(""ru = '" + Описание + "'"",
	|			Метаданные.ОсновнойЯзык.КодЯзыка);";
	
	ОписаниеРолей = Новый СписокЗначений;
	Для каждого ОписаниеРоли Из Профиль.Роли Цикл
		ОписаниеРолей.Добавить(ОписаниеРоли.Роль.Имя);
	КонецЦикла;
	ОписаниеРолей.СортироватьПоЗначению();
	
	Для каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Текст = Текст + "
		|	ОписаниеПрофиля.Роли.Добавить(""" + ОписаниеРоли.Значение + """);"
	КонецЦикла;
	
	Для каждого ОписаниеВидаДоступа Из Профиль.ВидыДоступа Цикл
		
		ИмяВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.ВидДоступа).Имя;
		
		Текст = Текст + "
		|	ОписаниеПрофиля.ВидыДоступа.Добавить(""" + ИмяВидаДоступа + """"
			+ ?(ОписаниеВидаДоступа.Предустановленный,
			    ", ""Предустановленный""",
			    ?(ОписаниеВидаДоступа.ВсеРазрешены,
			      ", ""ВначалеВсеРазрешены""", ""))
			+ ");";
		
		Для каждого ОписаниеЗначенияДоступа Из Профиль.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа)) Цикл
			Если НЕ ЗначениеЗаполнено(ОписаниеЗначенияДоступа.ЗначениеДоступа) Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеЗначения = ОписаниеЗначенияДоступа.ЗначениеДоступа.Метаданные();
			Если Метаданные.Перечисления.Найти(МетаданныеЗначения.Имя) = МетаданныеЗначения Тогда
				ИмяЗначенияДоступа = ОбщегоНазначения.ИмяЗначенияПеречисления(ОписаниеЗначенияДоступа.ЗначениеДоступа);
			Иначе
				ИмяЗначенияДоступа = ОбщегоНазначения.ИмяПредопределенного(ОписаниеЗначенияДоступа.ЗначениеДоступа);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИмяЗначенияДоступа) Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмяЗначенияДоступа = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОписаниеЗначенияДоступа.ЗначениеДоступа) + "." + ИмяЗначенияДоступа;
			Текст = Текст + "
			|	ОписаниеПрофиля.ЗначенияДоступа.Добавить(""" + ИмяВидаДоступа + """,
			|		""" + ПолноеИмяЗначенияДоступа + """);"
		КонецЦикла;
	КонецЦикла;
	
	Текст = Текст + "
	|	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	|";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ОпределитьВидыОграниченийПравНаСервере(ОшибкиВВыгрузке)
	
	ОграниченияДоступа = ОграниченияДоступа(ОшибкиВВыгрузке);
	Если ЗначениеЗаполнено(ОшибкиВВыгрузке) Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОграниченияДоступа",  ОграниченияДоступа);
	ПараметрыПроцедуры.Вставить("ВидыОграниченийПрав", ВидыОграниченийПрав);
	ПараметрыПроцедуры.Вставить("НайденныеОшибки",     "");
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ОпределитьВидыОграниченийПрав(ПараметрыПроцедуры);
	
	Возврат ПараметрыПроцедуры.НайденныеОшибки;
	
КонецФункции

// Возвращает таблицу с полями Таблица, Роль, Право, Поля, Ограничение,
// как вывод списка конфигуратора "Все ограничения доступа" в табличный документ.
//
// Параметры:
//  ПапкаВыгрузки - Строка - каталог, содержащий выгрузку конфигурации в файлы.
//                    Если не пустая строка, тогда выгрузка будет выполнена во временный каталог.
//
&НаСервере
Функция ОграниченияДоступа(ОшибкиВВыгрузке)
	
	Если ИсточникОграничений = "ИзВыгрузкиКонфигурацииВФайлы" Тогда
		ПапкаВыгрузки = ?(ВыполнятьВыгрузкуВоВременнуюПапку, "", ПапкаГотовойВыгрузкиКонфигурацииВФайлы);
		Возврат РеквизитФормыВЗначение("Объект").ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузки, ОшибкиВВыгрузке);
	Иначе
		Возврат ОграниченияДоступаИзТабличногоДокумента();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОграниченияДоступаИзТабличногоДокумента()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	
	Для НомерСтроки = 2 По ВсеОграниченияДоступа.ВысотаТаблицы Цикл
		
		Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение");
		Свойства.Таблица     = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C1").Текст;
		Свойства.Роль        = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C2").Текст;
		Свойства.Право       = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C3").Текст;
		Свойства.Поля        = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C4").Текст;
		Свойства.Ограничение = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C5").Текст;
		
		Если Не ЗначениеЗаполнено(Свойства.Таблица)
		   И Не ЗначениеЗаполнено(Свойства.Роль)
		   И Не ЗначениеЗаполнено(Свойства.Право)
		   И Не ЗначениеЗаполнено(Свойства.Поля)
		   И Не ЗначениеЗаполнено(Свойства.Ограничение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Свойства);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ОбновитьПраваПрофильныхРолейНаСервере(Журнал)
	
	РеквизитФормыВЗначение("Объект").ОбновитьПраваПрофильныхРолей(Журнал);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнформационнаяБазаФайловая()
	
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 1;
	
КонецФункции

&НаСервере
Функция НеподдерживаемыеНастройки()
	
	Возврат РеквизитФормыВЗначение("Объект").НеподдерживаемыеНастройки();
	
КонецФункции

#КонецОбласти

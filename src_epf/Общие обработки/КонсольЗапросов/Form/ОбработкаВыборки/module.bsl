Перем CписокК1, СписокЧ, Кол, КолК, СпВ;
Перем пр, пр1, пр2, пр3, пр4, пр5, пр6, пр7, пр8, пр9, ф, ф1;


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	//пер
	пр  = 0;
	пр1 = 0;
	пр2 = 0;
	пр3 = 0;
	пр4 = 0;
	пр5 = 0;
	пр6 = 0;
	пр7 = 0;
	пр8 = 0;
	пр9 = 0;
	ф 	 = Неопределено;	
	ф1	 = Неопределено;
	//пер
	
	ЭлементыФормы.И1.Видимость = Истина;
	
	НачалоАлгоритма = "";
	КонецАлгоритма = Символы.ПС;
	й = 0;
	//
	Если ЭтаФорма.ВладелецФормы.СпособВыгрузки = 2 Тогда
		ТЧ = ЭтаФорма.ВладелецФормы.РезультатДерево.Строки;
	Иначе
		ТЧ = ЭтаФорма.ВладелецФормы.РезультатТаблица;
	КонецЕсли;
	
	ЭлементыФормы.И1.МаксимальноеЗначение 	= ЭтаФорма.ВладелецФормы.РезультатТаблица.Количество();
	ЭлементыФормы.И1.МинимальноеЗначение	= 0;
	ЭлементыФормы.И1.Значение 					= 0;
	
	Попытка
		Выполнить(НачалоАлгоритма + ЭлементыФормы.Текст1.ПолучитьТекст() + КонецАлгоритма);
	Исключение
		
		СтрокаМодуля   = ОтделитьРазделителем2(ОписаниеОшибки(), "{");
		ОписаниеОшибки = ОтделитьРазделителем2(СтрокаМодуля, "}: ");
		Сообщить("Перед выборкой:  " + ОписаниеОшибки);
		
	КонецПопытки;
	//
	Стр 	= "";
	Длина	= 50;
	
	Если ЭтаФорма.ВладелецФормы.СпособВыгрузки = 2 Тогда
		Рекурсия(ТЧ, й, Стр, Длина);
	Иначе
		Для каждого Выборка Из ТЧ Цикл
			
			Попытка
				Выполнить(НачалоАлгоритма + ЭлементыФормы.Текст.ПолучитьТекст() + КонецАлгоритма);
				
			Исключение
				
				СтрокаМодуля   = ОтделитьРазделителем2(ОписаниеОшибки(), "{");
				ОписаниеОшибки = ОтделитьРазделителем2(СтрокаМодуля, "}: ");
				Сообщить("Выборка:  " + ОписаниеОшибки);
				Если Найти(ОписаниеОшибки, "Перед выполнением операции нужно открыть базу") Тогда
					//Предупреждение("Закройте файл");
					Прервать;
				КонецЕсли;
				
				
			КонецПопытки;
			й = й + 1;
			ЭлементыФормы.И1.Значение = й;
			ОбработкаПрерыванияПользователя();
			Если СтрДлина(Стр) > Длина Тогда Стр = "" КонецЕсли;
			Стр = СтрЗаменить(Стр, CписокК1[1], "") + CписокК1[0] + CписокК1[1];
			Состояние("Запись:" + Стр);
			
		КонецЦикла;
	КонецЕсли;
	//
	Попытка
		Выполнить(НачалоАлгоритма + ЭлементыФормы.Текст2.ПолучитьТекст() + КонецАлгоритма);
	Исключение
		
		СтрокаМодуля   = ОтделитьРазделителем2(ОписаниеОшибки(), "{");
		ОписаниеОшибки = ОтделитьРазделителем2(СтрокаМодуля, "}: ");
		Сообщить("После выборки:  " + ОписаниеОшибки);
		
	КонецПопытки;
	//
	
	ЭлементыФормы.И1.Видимость = Ложь;
	
КонецПроцедуры

Функция ОтделитьРазделителем2(Стр, Знач Разделитель, Режим=0) Экспорт
	
	ПраваяЧасть      = "";
	ПозРазделителя   = Найти(Стр, Разделитель);
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть = Сред(Стр, ПозРазделителя + ?(Режим = 2, 0, ДлинаРазделителя));
		Стр         = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим = 1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;
	
	Возврат(ПраваяЧасть);
	
КонецФункции // ОтделитьРазделителем()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	     
	Если СокрЛП(Дерево.ТекущаяСтрока.ВыборкаТекст) = "" Тогда
		Если СокрЛП(ЭлементыФормы.Текст.ПолучитьТекст()) = "" Тогда
			ЭлементыФормы.Текст.УстановитьТекст("	//Выборка - строка выборки запроса
			|	// пр, пр1, ... пр9, ф - ф1 - переменные
			|	Док			= Выборка.Ссылка.ПолучитьОбъект();
			|	Док.Сос 		= 3;
			|	Док.Считать = Ложь;
			|	Док.Записать();
			|");
		КонецЕсли;
	Иначе
		ЭлементыФормы.Текст.УстановитьТекст(Дерево.ТекущаяСтрока.ВыборкаТекст);
		ЭлементыФормы.Текст1.УстановитьТекст(Дерево.ТекущаяСтрока.ПередВыборкойТекст);
		ЭлементыФормы.Текст2.УстановитьТекст(Дерево.ТекущаяСтрока.ПослеВыборкиТекст);
	КонецЕсли;

	
	ЭлементыФормы.И1.Видимость = Ложь;
	Кол = ЭтаФорма.ВладелецФормы.РезультатТаблица.Количество();
	КолК = ЭтаФорма.ВладелецФормы.РезультатТаблица.Колонки.Количество();	
	ЭлементыФормы.Надпись1.Значение = "Количество строк: " + Кол;
	ЭлементыФормы.НеОбновлять.Видимость = Ложь;
	
КонецПроцедуры

Процедура ПриОткрытии()
	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Выборка;
КонецПроцедуры

Процедура КоманднаяПанель1Записать(Кнопка)
	
	ЭлементыФормы.Текст.Очистить();
	ЭлементыФормы.Текст1.Очистить();
	ЭлементыФормы.Текст2.Очистить();
	ЭлементыФормы.Текст.УстановитьТекст("	//Выборка - строка выборки запроса
	|	// пр, пр1, ... пр9, ф - ф1 - переменные
	|	Док			= Выборка.Ссылка.ПолучитьОбъект();
	|	Док.Сос 		= 3;
	|	Док.Считать = Ложь;
	|	Док.Записать();
	|");
	Панель1ПриСменеСтраницы(0, 3);
	ЭлементыФормы.НеОбновлять.Видимость = Ложь;
КонецПроцедуры


Процедура КоманднаяПанель1Удалить(Кнопка)
	ЭлементыФормы.Текст.Очистить();
	ЭлементыФормы.Текст1.Очистить();
	ЭлементыФормы.Текст2.Очистить();
	ЭлементыФормы.Текст.УстановитьТекст("	//Выборка - строка выборки запроса
	|	// пр, пр1, ... пр9, ф - ф1 - переменные
	|	Док = Выборка.Ссылка.ПолучитьОбъект();
	|	Док.Удалить();
	|");
	Панель1ПриСменеСтраницы(0, 3);
	ЭлементыФормы.НеОбновлять.Видимость = Ложь;
КонецПроцедуры

Процедура КоманднаяПанель1ЗаписьПроведение(Кнопка)
	ЭлементыФормы.Текст.Очистить();
	ЭлементыФормы.Текст1.Очистить();
	ЭлементыФормы.Текст2.Очистить();
	ЭлементыФормы.Текст.УстановитьТекст("	//Выборка - строка выборки запроса
	|	// пр, пр1, ... пр9, ф - ф1 - переменные
	|	Док = Выборка.Ссылка.ПолучитьОбъект();
	|	Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	|");
	Панель1ПриСменеСтраницы(0, 3);
	ЭлементыФормы.НеОбновлять.Видимость = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанель1DBF(Кнопка)
	сп = Новый ТаблицаЗначений();
	сп.Колонки.Добавить("Колонка");
	сп.Колонки.Добавить("Значение");
	Если ЭтаФорма.ВладелецФормы.СпособВыгрузки = 2 Тогда
		ТЧ = ЭтаФорма.ВладелецФормы.РезультатДерево;
	Иначе
		ТЧ = ЭтаФорма.ВладелецФормы.РезультатТаблица;
	КонецЕсли;
	
	
	Текст1 = "";
	Текст1 = "
	|		Если Тч.Количество() > 0 Тогда
	|			ф = Новый xBase(); 
	|			ф.Кодировка = КодировкаXBase.OEM;";
	Для каждого ТекСт Из Тч.Колонки Цикл
		Стр = ПолучитьТип(ТекСт);
		у = сп.Добавить();
		у.Колонка = ТекСт.Имя;
		у.Значение = Стр.Стр;
		Текст1 = Текст1 + "
		|			ф.поля.Добавить(""" + Стр.Стр + """,""" + Стр.Тип + """," + Стр.Знч + "," + Стр.Знч1 + ");";
	КонецЦикла; 
	Текст1 = Текст1 + "
	|			ф.СоздатьФайл(""C:\DBF.dbf"");
	|		КонецЕсли;";
	ЭлементыФормы.Текст1.Очистить();
	ЭлементыФормы.Текст1.УстановитьТекст(Текст1);	
	
	Текст0 = "";
	
	Текст0 = "	
	|			ф.Добавить();";
	
	Для каждого ТекСт Из Тч.Колонки Цикл
		Если СтрДлина(сп.Найти(ТекСт.Имя, "колонка").Значение) < 4 Тогда
			таб = Символы.Таб + Символы.Таб + Символы.Таб;
		ИначеЕсли СтрДлина(сп.Найти(ТекСт.Имя, "колонка").Значение) >= 4 и СтрДлина(сп.Найти( ТекСт.Имя, "колонка").Значение) < 7 Тогда
			таб = Символы.Таб + Символы.Таб;
		ИначеЕсли СтрДлина(сп.Найти(ТекСт.Имя, "колонка").Значение) = 10 Тогда
			таб = "";
		Иначе
			таб = Символы.Таб;
		КонецЕСли;
		
		Текст0 = Текст0 + "
		|			ф." + сп.Найти( ТекСт.Имя, "колонка").Значение + таб +"= Выборка." + сп.Найти(ТекСт.Имя, "колонка").Колонка + ";";
	КонецЦикла;
	Текст0 = Текст0 + "
	|			ф.Записать();";
	
	ЭлементыФормы.Текст.Очистить();
	ЭлементыФормы.Текст.УстановитьТекст(Текст0);
	
	ЭлементыФормы.Текст2.Очистить();
	ЭлементыФормы.Текст2.УстановитьТекст("
	|	Если НЕ ф = Неопределено Тогда
	|		ф.ЗакрытьФайл();
	|		//ЗаписьZIP = Новый ЗаписьZIPФайла(""c:\dbf.zip"");
	|		//ЗаписьZIP.Добавить(""C:\DBF.dbf"");
	|		//ЗаписьZIP.Записать();
	|	КонецЕсли;");
	Панель1ПриСменеСтраницы(0, 3);
	
	//ЭлементыФормы.НеОбновлять.Видимость = Истина;
	
КонецПроцедуры

Функция ПолучитьТип(Колонка)
	Стр = Новый Структура("Стр,Тип,Знч,Знч1");
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИССтр.Поле1,
	|	Соответствие.р1,
	|	Соответствие.а1,
	|	ИССтр.Поле2 КАК Поле2
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 1, 1) КАК Поле1,
	|		1 КАК Поле2
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 2, 1),
	|		2
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 3, 1),
	|		3
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 4, 1),
	|		4
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 5, 1),
	|		5
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 6, 1),
	|		6
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 7, 1),
	|		7
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(Строка.Стр, 8, 1),
	|		8
	|	ИЗ
	|		(ВЫБРАТЬ
	|			&Стр КАК Стр) КАК Строка) КАК ИССтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			""а"" КАК р1,
	|			""a"" КАК а1
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""б"",
	|			""b""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""в"",
	|			""v""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""г"",
	|			""g""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""д"",
	|			""d""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""е"",
	|			""e""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ж"",
	|			""zh""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""з"",
	|			""z""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""и"",
	|			""i""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""к"",
	|			""k""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""л"",
	|			""l""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""м"",
	|			""m""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""н"",
	|			""n""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""о"",
	|			""o""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""п"",
	|			""p""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""р"",
	|			""r""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""с"",
	|			""s""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""т"",
	|			""t""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""у"",
	|			""u""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ф"",
	|			""f""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""х"",
	|			""h""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ц"",
	|			""c""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ч"",
	|			""ch""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ш"",
	|			""sh""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""щ"",
	|			""tsh""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ы"",
	|			""i""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""э"",
	|			""e""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""ю"",
	|			""yu""
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""я"",
	|			""ya"") КАК Соответствие
	|		ПО ИССтр.Поле1 = Соответствие.р1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поле2");
	
	Запрос.УстановитьПараметр("Стр", Колонка.Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Ст = "";
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			Ст = Ст + Выборка.а1;
		КонецЦикла;
		Для каждого Ч Из СписокЧ Цикл
			н = Найти(Колонка.Имя, Ч);
			Если НЕ н = 0 Тогда
				Ст = Ст + Сред(Колонка.Имя, н, 1);
			КонецЕсли;
		КонецЦикла; // 
		
		Стр.Вставить("Стр", ?(СтрДлина(Ст) > 10, Сред(Ст, 1, 10),Ст));
	Иначе
		Стр.Вставить("Стр", ?(СтрДлина(Колонка.Имя) > 10, Сред(Колонка.Имя, 1, 10),Колонка.Имя));
	КонецЕСли;
	
	Если Найти(Колонка.ТипЗначения,"Строка")<>0 Тогда
		Стр.Вставить("Тип", "S");
		Стр.Вставить("Знч", Строка(?(Колонка.ТипЗначения.КвалификаторыСтроки.Длина = 0, Колонка.Ширина, Колонка.ТипЗначения.КвалификаторыСтроки.Длина)));
		Стр.Вставить("Знч1", "");
	иначеесли Найти(Колонка.ТипЗначения,"Число")<>0 тогда	
		Стр.Вставить("Тип", "N");
		Стр.Вставить("Знч", Строка(Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность+2));
		Стр.Вставить("Знч1", Строка(Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти));
	иначеесли Найти(Колонка.ТипЗначения,"Дата")<>0 тогда	
		Стр.Вставить("Тип", "S");
		Стр.Вставить("Знч", "19");
		Стр.Вставить("Знч1", "");
	иначеесли Найти(Колонка.ТипЗначения,"Булево")<>0 тогда	
		Стр.Вставить("Тип", "L");
		Стр.Вставить("Знч", "1");
		Стр.Вставить("Знч1", "0");
	иначе 
		Стр.Вставить("Тип", "S");
		Стр.Вставить("Знч", "100");
		Стр.Вставить("Знч1", "");
	КонецЕсли;
	
	
	
	Возврат Стр;
	
КонецФункции // ПолучитьТип(Колонка)

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = 3 Тогда
		ЭлементыФормы.Текст3.УстановитьТекст("//Перед выборкой" + "
		|" + ЭлементыФормы.Текст1.ПолучитьТекст() + "
		|
		|//Выборка
		|" + ЭлементыФормы.Текст.ПолучитьТекст() + "
		|
		|//После выборки
		|" + ЭлементыФормы.Текст2.ПолучитьТекст());
	КонецЕСли;
КонецПроцедуры

Процедура ОбработкаАктивизацииОбъекта(АктивныйОбъект, Источник)
	
	Если НЕОбновлять и (НЕ СпВ = ЭтаФорма.ВладелецФормы.СпособВыгрузки или НЕ Кол = ЭтаФорма.ВладелецФормы.РезультатТаблица.Количество() Или НЕ КолК = ЭтаФорма.ВладелецФормы.РезультатТаблица.Колонки.Количество()) и Найти(ЭлементыФормы.Текст1.ПолучитьТекст(), "xBase") Тогда
		КоманднаяПанель1DBF(0);
	КонецЕсли;
	КолК = ЭтаФорма.ВладелецФормы.РезультатТаблица.Колонки.Количество();	
	Кол = ЭтаФорма.ВладелецФормы.РезультатТаблица.Количество();
	СпВ = ЭтаФорма.ВладелецФормы.СпособВыгрузки;
	ЭлементыФормы.Надпись1.Значение = "Количество строк: " + Кол;
	
	//Если Найти(ЭлементыФормы.Текст1.ПолучитьТекст(), "xBase") Тогда
	//	ЭлементыФормы.НеОбновлять.Видимость = Истина;
	//Иначе
	//	ЭлементыФормы.НеОбновлять.Видимость = Ложь;
	//КонецЕсли;
	
	мТекущаяСтрока.ВыборкаТекст = ЭлементыФормы.Текст.ПолучитьТекст();
	мТекущаяСтрока.ПередВыборкойТекст = ЭлементыФормы.Текст1.ПолучитьТекст();
	мТекущаяСтрока.ПослеВыборкиТекст = ЭлементыФормы.Текст2.ПолучитьТекст();
	ЭлементыФормы.Текст.УстановитьТекст(Дерево.ТекущаяСтрока.ВыборкаТекст);
	ЭлементыФормы.Текст1.УстановитьТекст(Дерево.ТекущаяСтрока.ПередВыборкойТекст);
	ЭлементыФормы.Текст2.УстановитьТекст(Дерево.ТекущаяСтрока.ПослеВыборкиТекст);
   ЭтаФорма.ВладелецФормы.Модифицированность = Истина;

КонецПроцедуры

Процедура Рекурсия(ТЧ, й, Стр, Длина)
	НачалоАлгоритма = "";
	КонецАлгоритма = Символы.ПС;

	Для каждого Выборка Из ТЧ Цикл
		
			й = й + 1;
			ЭлементыФормы.И1.Значение = й;
			ОбработкаПрерыванияПользователя();
			Если СтрДлина(Стр) > Длина Тогда Стр = "" КонецЕсли;
			Стр = СтрЗаменить(Стр, CписокК1[1], "") + CписокК1[0] + CписокК1[1];
			Состояние("Запись:" + Стр);

		Если Выборка.Строки.Количество() = 0 Тогда
			
			Попытка
				Выполнить(НачалоАлгоритма + ЭлементыФормы.Текст.ПолучитьТекст() + КонецАлгоритма);
				
			Исключение
				
				СтрокаМодуля   = ОтделитьРазделителем2(ОписаниеОшибки(), "{");
				ОписаниеОшибки = ОтделитьРазделителем2(СтрокаМодуля, "}: ");
				Сообщить("Выборка:  " + ОписаниеОшибки);
				Если Найти(ОписаниеОшибки, "Перед выполнением операции нужно открыть базу") Тогда
					//Предупреждение("Закройте файл");
					Прервать;
				КонецЕсли;
				
				
			КонецПопытки;

		Иначе
			Попытка
				Выполнить(НачалоАлгоритма + ЭлементыФормы.Текст.ПолучитьТекст() + КонецАлгоритма);
				
			Исключение
				
				СтрокаМодуля   = ОтделитьРазделителем2(ОписаниеОшибки(), "{");
				ОписаниеОшибки = ОтделитьРазделителем2(СтрокаМодуля, "}: ");
				Сообщить("Выборка:  " + ОписаниеОшибки);
				Если Найти(ОписаниеОшибки, "Перед выполнением операции нужно открыть базу") Тогда
					//Предупреждение("Закройте файл");
					Прервать;
				КонецЕсли;
				
				
			КонецПопытки;

			Рекурсия(Выборка.Строки, й, Стр, Длина);
		КонецЕСли;
		
	КонецЦикла;

КонецПроцедуры  //  <"Имя процедуры">

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Дерево.ТекущаяСтрока.ВыборкаТекст = ЭлементыФормы.Текст.ПолучитьТекст();
	Дерево.ТекущаяСтрока.ПередВыборкойТекст = ЭлементыФормы.Текст1.ПолучитьТекст();
	Дерево.ТекущаяСтрока.ПослеВыборкиТекст = ЭлементыФормы.Текст2.ПолучитьТекст();
	ЭтаФорма.ВладелецФормы.Модифицированность = Истина;
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	Стр1 = ЭлементыФормы.Текст.ВыделенныйТекст;
	Стр2 = "";
	Для й = 1 ПО СтрДлина(Стр1) Цикл
		Стр2 = Стр2 + DosToWin(Сред(Стр1, й, 1));
		//Сообщить(Стр2);
	КонецЦикла;
	ЭлементыФормы.Текст.ВыделенныйТекст = Стр2;
КонецПроцедуры

Функция DosToWin(Ст)
	
	Ст = КодСимвола(Ст);
	//Сообщить(ст);
	Если Ст >= 192 и Ст <= 223 Тогда
		Ст = Ст + 848;
	ИначеЕсли Ст >= 224 и Ст <= 255 Тогда
		Ст = Ст + 848;
	ИначеЕсли Ст = 184 Тогда
		Ст = Ст + 921;
	ИначеЕсли Ст = 168 Тогда
		Ст = Ст + 857;
   КонецЕСли;
			

	Возврат Символ(Ст);
	
КонецФункции // DosToWin()

Процедура ОбновитьНажатие(Элемент)
	Форма = ЭтотОбъект.ПолучитьФорму("Форма");
	Форма.ВыполнитьЗапрос();
КонецПроцедуры


CписокК1 = Новый СписокЗначений();
CписокК1.Добавить("-");
CписокК1.Добавить(">");

СписокЧ = Новый СписокЗначений;
СписокЧ.Добавить(0);
СписокЧ.Добавить(1);
СписокЧ.Добавить(2);
СписокЧ.Добавить(3);
СписокЧ.Добавить(4);
СписокЧ.Добавить(5);
СписокЧ.Добавить(6);
СписокЧ.Добавить(7);
СписокЧ.Добавить(8);
СписокЧ.Добавить(9);









//Vitkovsky


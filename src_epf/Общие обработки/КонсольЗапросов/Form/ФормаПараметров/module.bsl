
//==============================================================================================================================================
// ПЕРЕМЕННЫЕ МОДУЛЯ
//==============================================================================================================================================

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//==============================================================================================================================================

//Обработка события "Перед открытием" формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеПериодомНаФорме();   
	
	ОбновитьНадписи();
	
КонецПроцедуры //ПередОткрытием

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ
//==============================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------------------

// Проверка указанного значения на заполненность.
Функция глПустоеЗначение1(Значение, ПроверятьКакСсылку = Ложь) Экспорт

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Значение = NULL Тогда
		Возврат Истина;
	ИначеЕсли ПроверятьКакСсылку Тогда
		Возврат Значение.Пустая();
	КонецЕсли; 
	
	// Все остальные типы
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);
		
	Если ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
	// Для остальных будем считать значение пустым, если оно равно
	// дефолтному значению своего типа
	Иначе
		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли; 
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // глПустоеЗначение()

//----------------------------------------------------------------------------------------------------------------------------------------------

Процедура рдСписокНастройкаПериодаСдвинуть1(пНастройкаПериода, пЗнакНаправления, пПериодПоУмолчанию = "Месяц") Экспорт
	
	НачДата = пНастройкаПериода.ДатаНачала;
	КонДата = пНастройкаПериода.ДатаОкончания;
	
	ВариантПериодаПоУмолчанию = ВариантПериода[пПериодПоУмолчанию];
	ПериодПоУмолчаниюРод = ?(пПериодПоУмолчанию = "День", "Дня", пПериодПоУмолчанию + "а");
		
	Если НачДата = '00010101000000' И КонДата = '00010101000000' Тогда
		// интервал без ограничения
		Возврат;
		
	ИначеЕсли НачДата = '00010101000000' Тогда
		// интервал с начала времен по конкретную дату
		
		//Если пЗнакНаправления > 0 Тогда
		//	
		//	// установим период длины по умолчанию, следующий за конечной датой
		//	КонДата = Вычислить("Конец" + ПериодПоУмолчаниюРод + "(КонДата)");
		//	НачДата = Вычислить("Начало" + ПериодПоУмолчаниюРод + "(КонДата)");
		//	// собственно изменение периода будет дальше
		//	
		//Иначе
			
			// установим интервал с начала времен по дату, меньшую конечной даты на период по умолчанию
			Если пПериодПоУмолчанию = "День" Тогда
				пНастройкаПериода.ДатаОкончания = КонецДня(КонДата + пЗнакНаправления * 86400);
			Иначе
				Если пПериодПоУмолчанию = "Год" Тогда
					КоличествоМесяцев = 12;
				ИначеЕсли пПериодПоУмолчанию = "Квартал" Тогда
					КоличествоМесяцев = 3;
				Иначе
					КоличествоМесяцев = 1;
				КонецЕсли;
				пНастройкаПериода.ДатаОкончания = Вычислить("Конец" + ПериодПоУмолчаниюРод + "(ДобавитьМесяц(КонДата, пЗнакНаправления * КоличествоМесяцев))");
			КонецЕсли;
			пНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Интервал;
			пНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.БезОграничения;
			пНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.КонкретнаяДата;
			
		//КонецЕсли; 
		
	ИначеЕсли КонДата = '00010101000000' Тогда
		// интервал с конкретной даты по конец времен
		
		//Если пЗнакНаправления > 0 Тогда
			
			// установим интервал с даты, большей конечной даты на период по умолчанию, по конец времен
			Если пПериодПоУмолчанию = "День" Тогда
				пНастройкаПериода.ДатаНачала = НачалоДня(НачДата + пЗнакНаправления * 86400);
			Иначе
				Если пПериодПоУмолчанию = "Год" Тогда
					КоличествоМесяцев = 12;
				ИначеЕсли пПериодПоУмолчанию = "Квартал" Тогда
					КоличествоМесяцев = 3;
				Иначе
					КоличествоМесяцев = 1;
				КонецЕсли;
				пНастройкаПериода.ДатаНачала = Вычислить("Начало" + ПериодПоУмолчаниюРод + "(ДобавитьМесяц(НачДата, пЗнакНаправления * КоличествоМесяцев))");
			КонецЕсли;
			пНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Интервал;
			пНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.КонкретнаяДата;
			пНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения;
			
		//Иначе
		//	
		//	// установим период длины по умолчанию, перед начальной датой
		//	НачДата = Вычислить("Начало" + ПериодПоУмолчаниюРод + "(НачДата)");
		//	КонДата = Вычислить("Конец" + ПериодПоУмолчаниюРод + "(НачДата)");
		//	// собственно изменение периода будет дальше
		//	
		//КонецЕсли; 
				
	Иначе
		// интервал с конкретной даты по конкретную дату
		
		Если Год(НачДата) = Год(КонДата) Тогда       
			РазницаМесяцев = Месяц(КонДата) - Месяц(НачДата);
			Если РазницаМесяцев = 0 Тогда
				Если День(НачДата) = День(КонДата) Тогда
					// прокрутка на день
					НачДата = НачалоДня(НачДата + пЗнакНаправления * 86400);
					КонДата = КонецДня(НачДата); 
					ТекВариантПериода = ВариантПериода.День;
				Иначе 
					// прокрутка на месяц
					НачДата = НачалоМесяца(ДобавитьМесяц(НачДата, пЗнакНаправления));
					КонДата = КонецМесяца(НачДата);
					ТекВариантПериода = ВариантПериода.Месяц;
				КонецЕсли;
			ИначеЕсли РазницаМесяцев > 6 Тогда 
				// в пределах года
				НачДата = НачалоГода(ДобавитьМесяц(НачДата, 12*пЗнакНаправления));
				КонДата = КонецГода(НачДата);
				ТекВариантПериода = ВариантПериода.Год;
			Иначе // в пределах квартала
				НачДата = НачалоКвартала(ДобавитьМесяц(НачДата, 3*пЗнакНаправления));
				КонДата = КонецКвартала(НачДата);
				ТекВариантПериода = ВариантПериода.Квартал;
			КонецЕсли;                     
		Иначе
			НачДата = НачалоГода(ДобавитьМесяц(НачДата, 12*пЗнакНаправления));
			КонДата = КонецГода(НачДата);
			ТекВариантПериода = ВариантПериода.Год;
		КонецЕсли;
		
		пНастройкаПериода.ДатаНачала = НачДата;
		пНастройкаПериода.ДатаОкончания = КонДата;
		пНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
		пНастройкаПериода.ВариантПериода = ТекВариантПериода;
	
	КонецЕсли;
	
КонецПроцедуры // рдНастройкаПериодаСдвинуть()

//----------------------------------------------------------------------------------------------------------------------------------------------



// Обработчик события при начале редактирования строки параметров
Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока)

	УправлениеКолонкамиПараметры();

КонецПроцедуры // ПараметрыПриНачалеРедактирования()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события при окончании редактирования строки параметров
Процедура ПараметрыПриОкончанииРедактирования(Элемент, НоваяСтрока)

	ВладелецФормы.Модифицированность = Истина;

КонецПроцедуры // ПараметрыПриОкончанииРедактирования()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события перед удалением строки параметров
Процедура ПараметрыПередУдалением(Элемент, Отказ)

	ВладелецФормы.Модифицированность = Истина;

КонецПроцедуры // ПараметрыПередУдалением()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик изменения флажка "ЭтоВыражение"
Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)

	Если Колонка.Имя = "ЭтоВыражение" Тогда

		Если Элемент.ТекущаяСтрока.ЭтоВыражение Тогда
			Если Не ТипЗнч(Элемент.ТекущаяСтрока.ЗначениеПараметра) = Тип("Строка") Тогда
				Элемент.ТекущаяСтрока.ЗначениеПараметра = "";
			КонецЕсли; 
		КонецЕсли;

		УправлениеКолонкамиПараметры();

	КонецЕсли; 

КонецПроцедуры // ПараметрыПриИзмененииФлажка()

//----------------------------------------------------------------------------------------------------------------------------------------------

//Назначает тип значения списка значений
Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЭлементыФормы.Параметры.Колонки.ЗначениеПараметра.ЭлементУправления.ТипЗначенияСписка = ЭлементыФормы.Параметры.ТекущаяСтрока.ТипЗначения;
	
КонецПроцедуры

//----------------------------------------------------------------------------------------------------------------------------------------------

//Обновление таблицы параметров
Процедура КоманднаяПанельФормыОбновить(Кнопка)
	
	ТекстЗапроса = ЭтаФорма.ВладелецФормы.ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		
		ИскомыйПараметр = Параметры.Найти(Параметр.Имя, "ИмяПараметра");
		
		Если ИскомыйПараметр = Неопределено Тогда
			ИскомыйПараметр = Параметры.Добавить();
			ИскомыйПараметр.ИмяПараметра = Параметр.Имя;
		КонецЕсли; 
		
		Если ТипЗнч(ИскомыйПараметр.ЗначениеПараметра) <> Тип("СписокЗначений") И Не ИскомыйПараметр.ЭтоВыражение Тогда
			ИскомыйПараметр.ТипЗначения 		= Параметр.ТипЗначения;
			ИскомыйПараметр.ЗначениеПараметра 	= Параметр.ТипЗначения.ПривестиЗначение(ИскомыйПараметр.ЗначениеПараметра);
		КонецЕсли; 
		
		
		ЭлементыФормы.Параметры.Колонки.ЗначениеПараметра.ЭлементУправления.ТипЗначенияСписка = Параметр.ТипЗначения;
		
	КонецЦикла; 
	
	// Если в таблице параметров есть ДатаНачала или ДатаКонца тогда удаляем их из таблицы и показываем элементы формы.
	// Иначе сворачиваем элементы формы.
	СтрокаДатаНачала =  Параметры.Найти("ДатаНачала", "ИмяПараметра");
	СтрокаДатаКонца =  Параметры.Найти("ДатаКонца", "ИмяПараметра");
	
	Если СтрокаДатаНачала = Неопределено И СтрокаДатаКонца = Неопределено Тогда
		ЕстьПериодВПараметрах = Ложь;
	Иначе
		ЕстьПериодВПараметрах = Истина;
	КонецЕсли; 
	
	Если СтрокаДатаНачала <> Неопределено Тогда
		
		Если НЕ глПустоеЗначение1(СтрокаДатаНачала.ЗначениеПараметра) Тогда
			ДатаНачала = СтрокаДатаНачала.ЗначениеПараметра;
		КонецЕсли;
		
		Параметры.Удалить(Параметры.Индекс(СтрокаДатаНачала));
	КонецЕсли; 
	
	Если СтрокаДатаКонца <> Неопределено Тогда
		
		Если НЕ глПустоеЗначение1(СтрокаДатаКонца.ЗначениеПараметра) Тогда
			ДатаКонца = СтрокаДатаКонца.ЗначениеПараметра;
		КонецЕсли;
		
		Параметры.Удалить(Параметры.Индекс(СтрокаДатаКонца));
	КонецЕсли; 
	
	УправлениеПериодомНаФорме();
	
	ОбновитьНадписи();
	
КонецПроцедуры //КоманднаяПанельФормыОбновить

//----------------------------------------------------------------------------------------------------------------------------------------------

//Выбор периода через стандартную форму
Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	ФормаВыбора = ПолучитьОбщуюФорму("ВыборПериода");
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.ДатаНачала = ДатаНачала;
	НастройкаПериода.ДатаОкончания = ДатаКонца;
	
	ФормаВыбора.НастройкаПериода = НастройкаПериода;
	
	Если ФормаВыбора.ОткрытьМодально() <> Неопределено Тогда
		
		ДатаНачала = ФормаВыбора.НастройкаПериода.ДатаНачала;
		ДатаКонца = ФормаВыбора.НастройкаПериода.ДатаОкончания;
		
		ОбновитьНадписи(); 
		
	КонецЕсли;
	
КонецПроцедуры //КнопкаВыбораПериодаНажатие

//----------------------------------------------------------------------------------------------------------------------------------------------

//Сдвиг периода назад
Процедура СдвинутьНазадНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.ДатаНачала = ДатаНачала;
	НастройкаПериода.ДатаОкончания = ДатаКонца;
	
	рдСписокНастройкаПериодаСдвинуть1(НастройкаПериода, - 1, "Месяц");
	
	ДатаНачала = НастройкаПериода.ДатаНачала;
	ДатаКонца = НастройкаПериода.ДатаОкончания;
	
	ОбновитьНадписи(); 
	
КонецПроцедуры //СдвинутьНазадНажатие

//----------------------------------------------------------------------------------------------------------------------------------------------

//Сдвиг периода вперед
Процедура СдвинутьВпередНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.ДатаНачала = ДатаНачала;
	НастройкаПериода.ДатаОкончания = ДатаКонца;
	
	рдСписокНастройкаПериодаСдвинуть1(НастройкаПериода, + 1, "Месяц");
	
	ДатаНачала = НастройкаПериода.ДатаНачала;
	ДатаКонца = НастройкаПериода.ДатаОкончания;
	
	ОбновитьНадписи(); 
	
КонецПроцедуры //СдвинутьВпередНажатие

//==============================================================================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//==============================================================================================================================================

// Управляет признаком выбора типа у поля ввода, редактирующего значения параметра
Процедура УправлениеКолонкамиПараметры()

	ЭлементыФормы.Параметры.Колонки.ЗначениеПараметра.ЭлементУправления.ВыбиратьТип = Не ЭлементыФормы.Параметры.ТекущаяСтрока.ЭтоВыражение;

КонецПроцедуры // УправлениеКолонкамиПараметры()

//----------------------------------------------------------------------------------------------------------------------------------------------

//Показывает или скрывает выбор периода
Процедура УправлениеПериодомНаФорме() Экспорт

	Если НЕ ЕстьПериодВПараметрах Тогда
		ЭлементыФормы.ПанельПериода.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельПериода.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ОбновитьНадписи();
		
	КонецЕсли; 

КонецПроцедуры //УправлениеПериодомНаФорме

//----------------------------------------------------------------------------------------------------------------------------------------------

//Обновление надписей на форме
Процедура ОбновитьНадписи()

	ЭлементыФормы.СтрокаПредставленияПериода.Заголовок = ПредставлениеПериода(ДатаНачала,ДатаКонца); 

КонецПроцедуры //ОбновитьНадписи

//==============================================================================================================================================
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//==============================================================================================================================================
//==============================================================================================================================================
// ПЕРЕМЕННЫЕ МОДУЛЯ
//==============================================================================================================================================
 
Перем мИмяФайла;                        // имя файла запросов
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

//Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
Перем мИдетДобавление;                  // признак добавления
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи

Перем мРезЗапроса;                      // результат 

Перем мФормаПараметров;                 // форма параметров

Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
//Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу

Перем мТипЧисло; // Тип("число")
Перем База80;
Перем Соединение;


//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//==============================================================================================================================================
 
// Обработчик события при открытии формы
//
Процедура ПриОткрытии()

	// Создадим структуру дерева запросов
	ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыЗапроса");
	ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");
	ДеревоЗапросов.Колонки.Добавить("СтруктураПериода");
	ДеревоЗапросов.Колонки.Добавить("ВыборкаТекст");
	ДеревоЗапросов.Колонки.Добавить("ПередВыборкойТекст");
	ДеревоЗапросов.Колонки.Добавить("ПослеВыборкиТекст");

	// Попытаемся загрузить последний открывавшийся файл запросов
	ВосстановитьИмяФайла();
	Если ПустаяСтрока(мИмяФайла) Тогда
		СоздатьНовыйФайлЗапросов();
	Иначе
		ЗагрузитьЗапросыИзФайла();
		мТекущаяСтрока = НеОпределено;
	КонецЕсли;

	ИспользоватьАвтосохранение = ВосстановитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение");
	ИнтервалАвтосохранения = ВосстановитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения");
	ОбработкаАвтосохранения();
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДеревоЗапросов;

КонецПроцедуры // ПриОткрытии()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
	НоваяСтрока[0] = мТекущаяСтрока[0]; // Запрос
	НоваяСтрока[1] = мТекущаяСтрока[1]; // ТекстЗапроса
	НоваяСтрока[2] = мТекущаяСтрока[2]; // ПараметрыЗапроса
	НоваяСтрока[3] = мТекущаяСтрока[3]; // СпособВыгрузки
	НоваяСтрока[4] = мТекущаяСтрока[4]; // СтруктураПериода

	СкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока);

    РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
	РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
	мТекущаяСтрока = НеОпределено;

	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;

	Модифицированность = Истина;

КонецПроцедуры // ОбработкаВыбора()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если СохранитьЗапросыВФайл(Истина) Тогда
		СохранитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение", ИспользоватьАвтосохранение);
		СохранитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения", ИнтервалАвтосохранения);
	Иначе
        СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

//----------------------------------------------------------------------------------------------------------------------------------------------

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Если ПустаяСтрока(ЭтаФорма.КлючУникальности) Тогда
	//
	//	Отказ = Истина;
	//	
	//	ТекДата = ТекущаяДата();
	//	
	//	КлючУникальности = "КонсольОтчетов" + Строка(Час(ТекДата)) + Строка(Минута(ТекДата)) + Строка(Секунда(ТекДата));
	//	
	//	ФормаОтчета = ЭтотОбъект.ПолучитьФорму(,,КлючУникальности);
	//	
	//	ФормаОтчета.Открыть();
	//
	//КонецЕсли; 
	ЭтаФорма.Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
КонецПроцедуры

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ
//==============================================================================================================================================
 
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()

	Если СохранитьЗапросыВФайл(Истина) Тогда
		СоздатьНовыйФайлЗапросов();
	КонецЕсли;

КонецПроцедуры // НовыйФайл()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура ОткрытьФайл()

	Если СохранитьЗапросыВФайл(Истина) Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Выберите файл со списком запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
			ЗагрузитьЗапросыИзФайла();
			мТекущаяСтрока = НеОпределено;
			СохранитьИмяФайла();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьФайл()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()

	СохранитьЗапросыВФайл();

КонецПроцедуры // Сохранить()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()

	СохранитьЗапросыВФайл(Ложь, Истина);

КонецПроцедуры // СохранитьКак()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура НастройкаАвтосохранения()

	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();

	ОбработкаАвтосохранения();

КонецПроцедуры // НастройкаАвтосохранения()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()

	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;

	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();

КонецПроцедуры // ПеренестиСтрокуДерева()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос() Экспорт
	
	СохранитьЗапросТекущейСтроки();

	ОбъектЗапрос = Новый Запрос;

	Для каждого СтрокаПараметров Из мФормаПараметров.Параметры Цикл
        Если СтрокаПараметров.ЭтоВыражение Тогда
            Если Найти(ВРЕГ(СтрокаПараметров.ЗначениеПараметра),"РЕЗУЛЬТАТ") > 0 Тогда
            	Результат = "";
                Выполнить(СтрокаПараметров.ЗначениеПараметра);
                ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Результат);
            Иначе
                ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
            КонецЕсли; 
		Иначе
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;

	Если мФормаПараметров.ЕстьПериодВПараметрах Тогда
		ОбъектЗапрос.УстановитьПараметр("ДатаНачала", мФормаПараметров.ДатаНачала);
		ОбъектЗапрос.УстановитьПараметр("ДатаКонца", мФормаПараметров.ДатаКонца);
	КонецЕсли; 
	
	ОбъектЗапрос.Текст = СтрЗаменить(ПолучитьТекстЗапроса(Истина), "|", "");

	Если ПустаяСтрока(ОбъектЗапрос.Текст) Тогда
		Предупреждение("Не заполнен текст запроса!", 30);
		Возврат;
	КонецЕсли;

	ЭлементыФормы.НадписьВремяВыполнения.Видимость = Истина;
	ЭлементыФормы.ВремяВыполнения.Видимость = Истина;
	ЭлементыФормы.ВремяВыполнения.Заголовок = "...";

	ДатаНачала = ТекущаяДата();
	
	мРезЗапроса = ОбъектЗапрос.Выполнить();

	ДатаКонцаВыполнения = ТекущаяДата();
 	ЭлементыФормы.ВремяВыполнения.Значение = Формат('00010101' + (ДатаКонцаВыполнения - ДатаНачала), "ДЛФ=В; ДП=0:00:00");

	мТаблицаЗагружена = Ложь;
	//мСводнаяТаблицаЗагружена = Ложь;

	ЗагрузитьРезультат();
	
	ДатаКонца = ТекущаяДата();

КонецПроцедуры // ВыполнитьЗапрос()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Параметры"
//
Процедура Параметры()

	Если мФормаПараметров.Открыта() = Истина Тогда
		мФормаПараметров.Закрыть();
	Иначе
		мФормаПараметров.Открыть();
	КонецЕсли;

КонецПроцедуры // Параметры()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультат()
	Перем ЗаголовокКолонки;

	Если мРезЗапроса <> Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
		КоличествоКолонок = мРезЗапроса.Колонки.Количество();

		Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	    ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголвка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголвка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
            Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголвка);
		ОбластьЗаголвка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголвка.Шрифт = Новый Шрифт(ОбластьЗаголвка.Шрифт, , , Истина, , ,);
		ОбластьЗаголвка.ЦветФона = Новый Цвет(255, 255, 0);
		ОбластьЗаголвка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

        ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
				
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();

		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик нажатия кнопки командной панели "Добавить / Удалить "|""
//
Процедура ДобавитьУдалитьПереносыСтрок(Кнопка)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ОбработатьТекстЗапроса(ЭлементыФормы.ТекстЗапроса.ПолучитьТекст()));
	
КонецПроцедуры //ДобавитьУдалитьПереносыСтрок

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();

КонецПроцедуры // ДеревоЗапросовВыбор()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	НадоСохранять = Истина;
	
	Если мИдетДобавление Тогда
		Если мАктивизированаДобавляемаяЗапись Тогда

			// Произошла отмена добавления записи.
			НадоСохранять = Ложь;
			мАктивизированаДобавляемаяЗапись = Ложь;
		Иначе
			мАктивизированаДобавляемаяЗапись = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НадоСохранять Тогда
		СохранитьЗапросТекущейСтроки();
	КонецЕсли;

	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		ЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);

		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		мФормаПараметров.Параметры.Очистить();
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				НоваяСтрока = мФормаПараметров.Параметры.Добавить();
				НоваяСтрока[0] = СтрокаИсходнойТаблицы[0]; // Имя параметра
				НоваяСтрока[1] = СтрокаИсходнойТаблицы[1]; // Вид параметра
				НоваяСтрока[2] = СтрокаИсходнойТаблицы[2]; // Значение
			КонецЦикла;
		КонецЕсли;

		// задаем период
		СтруктураПериода = мТекущаяСтрока.СтруктураПериода;
		
		Если СтруктураПериода <> Неопределено Тогда
			мФормаПараметров.ЕстьПериодВПараметрах = СтруктураПериода.ЕстьПериодВПараметрах;
			мФормаПараметров.ДатаНачала = СтруктураПериода.ДатаНачала;
			мФормаПараметров.ДатаКонца = СтруктураПериода.ДатаКонца;
		Иначе						
			мФормаПараметров.ЕстьПериодВПараметрах = Ложь;
			мФормаПараметров.ДатаНачала = Дата("00010101000000");
			мФормаПараметров.ДатаКонца = Дата("00010101000000");
		КонецЕсли; 
		
		мФормаПараметров.УправлениеПериодомНаФорме();
		
		Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;

		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;

	Иначе

		ЗадатьТекстЗапроса("");
		мФормаПараметров.Параметры.Очистить();

	КонецЕсли;

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Если Копирование Тогда
		Отказ = Истина;
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Элемент.Значение.Строки.Добавить();
		КонецЕсли; 
		ДобавитьСтроки(ТекСтрока, НоваяСтрока, Элемент.Значение);
	КонецЕсли; 
	
	мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПередУдалением()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыгрузки = НеОпределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли;

	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	Если мИдетДобавление Тогда

		Если ОтменаРедактирования Тогда
			мТекущаяСтрока = Неопределено;
		КонецЕсли;
		
		мИдетДобавление = Ложь;
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗагрузитьРезультат();
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)
	
	мТаблицаЗагружена = Ложь;
   ЗагрузитьРезультат();
	Модифицированность = Истина;

КонецПроцедуры // СпособВыгрузкиПриИзменении()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
    СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];

	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	Иначе
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;

КонецПроцедуры // ТаблицаРезультатаВыбор()

//==============================================================================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//==============================================================================================================================================

// Получает текст запроса из текстового поля
//
// Параметры:
//  СВыделением - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция ПолучитьТекстЗапроса(СВыделением)

	Если Не СВыделением Тогда
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

    ТекстЗап = ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст();
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

КонецФункции // ПолучитьТекстЗапроса()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура ЗадатьТекстЗапроса(Текст)

	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);

КонецПроцедуры // ЗадатьТекстЗапроса()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура СохранитьЗапросТекущейСтроки()

	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		Если мТекущаяСтрока.ТекстЗапроса <> ПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		мТекущаяСтрока.ТекстЗапроса = ПолучитьТекстЗапроса(Ложь);
		мТекущаяСтрока.ПараметрыЗапроса = мФормаПараметров.Параметры.Скопировать();
		мТекущаяСтрока.СпособВыгрузки = СпособВыгрузки;
		
		СтруктураПериода = Новый Структура;
		СтруктураПериода.Вставить("ЕстьПериодВПараметрах", мФормаПараметров.ЕстьПериодВПараметрах);
		СтруктураПериода.Вставить("ДатаНачала", мФормаПараметров.ДатаНачала); 
		СтруктураПериода.Вставить("ДатаКонца", мФормаПараметров.ДатаКонца); 
		
		мТекущаяСтрока.СтруктураПериода = СтруктураПериода;
	КонецЕсли;

КонецПроцедуры // СохранитьЗапросТекущейСтроки()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура ОчиститьЗначения()

	ДеревоЗапросов.Строки.Очистить();
	ЗадатьТекстЗапроса("");
	мФормаПараметров.Параметры.Очистить();

КонецПроцедуры // ОчиститьЗначения()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()

	СохранитьЗначение("КонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов_ИмяПути",  мИмяПути);

КонецПроцедуры // СохранитьИмяФайла()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура ВосстановитьИмяФайла()

	мИмяФайла = ВосстановитьЗначение("КонсольЗапросов_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("КонсольЗапросов_ИмяПути");

	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;

	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;

КонецПроцедуры // ВосстановитьИмяФайла()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура СкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево)

	НовоеДерево.Строки.Очистить();

	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл

		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока[0] = СтрокаДерева[0]; // Запрос
		НоваяСтрока[1] = СтрокаДерева[1]; // ТекстЗапроса
		НоваяСтрока[2] = СтрокаДерева[2]; // ПараметрыЗапроса
		НоваяСтрока[3] = СтрокаДерева[3]; // СпособВыгрузки
		Попытка
			НоваяСтрока[5] = СтрокаДерева[5]; // ВыборкаТекст	
			НоваяСтрока[6] = СтрокаДерева[6]; // ПередВыборкойТекст	
			НоваяСтрока[7] = СтрокаДерева[7]; // ПослеВыборкиТекст	
      Исключение
		КонецПопытки;
		
		Попытка
			
			НоваяСтрока[4] = СтрокаДерева[4]; // СтруктураПериода
			
		Исключение
			
			СтруктураПериода = Новый Структура;
			СтруктураПериода.Вставить("ЕстьПериодВПараметрах", Ложь);
			СтруктураПериода.Вставить("ДатаНачала", Дата("00010101000000")); 
			СтруктураПериода.Вставить("ДатаКонца", Дата("00010101000000")); 
			
			НоваяСтрока[4] = СтруктураПериода;
			
		КонецПопытки;
		
		СкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры // СкопироватьДеревоЗапросов()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура СоздатьНовыйФайлЗапросов()

	мИмяФайла = "";
	мИмяПути = "";
	СохранитьИмяФайла();

	ОчиститьЗначения();
	УстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;

	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Запрос = "Запросы";
	мТекущаяСтрока.ТекстЗапроса = "";
	
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьЗапросыИзФайла()

	//Проверим существование файла.
	ФайлЗначения = Новый Файл(мИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);

	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда

		ОчиститьЗначения();
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			НовСтрока[0] = СтрокаВремТаблицы[0]; // Запрос
			НовСтрока[1] = СтрокаВремТаблицы[1]; // ТекстЗапроса
			НовСтрока[2] = СтрокаВремТаблицы[2]; // ПараметрыЗапроса
			Попытка
				НовСтрока[5] = СтрокаВремТаблицы[5]; // ВыборкаТекст	
				НовСтрока[6] = СтрокаВремТаблицы[6]; // ПередВыборкойТекст	
				НовСтрока[7] = СтрокаВремТаблицы[7]; // ПослеВыборкиТекст	
   		Исключение
			КонецПопытки;
		
			Если ПолученноеЗначение.Колонки.Количество() > 3 Тогда
				НовСтрока[3] = СтрокаВремТаблицы[3]; // СпособВыгрузки
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Ложь;

	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда

		ОчиститьЗначения();
		СкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов);
		Модифицированность = Ложь;

	Иначе // Формат файла не опознан

		ОчиститьЗначения();
		мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
		мТекущаяСтрока.Запрос = "Запросы";
		мТекущаяСтрока.ТекстЗапроса = "";
		
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
					   |Выберите другой файл.", 10);

	КонецЕсли;

	УстановитьЗаголовокФормы();

КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция СохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)

	СохранитьЗапросТекущейСтроки();

	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(мИмяФайла) или ЗапрашиватьИмяФайла Тогда

		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;
   //(Антон
	ТекДата=ТекущаяДата();
	Если Найти(мТекущаяСтрока.Запрос,"#") = 0 тогда
		мТекущаяСтрока.Запрос=мТекущаяСтрока.Запрос+"   #"+ТекДата;
	иначе
		мТекущаяСтрока.Запрос=СОКРЛП(ЛЕВ(мТекущаяСтрока.Запрос,Найти(мТекущаяСтрока.Запрос,"#")-1))+"   #"+ТекДата;
	конецесли;
	//Антон)

	ЗначениеВФайл(мИмяФайла, ДеревоЗапросов);
	Модифицированность = Ложь;
	СохранитьИмяФайла();
	УстановитьЗаголовокФормы();

	Возврат Истина;

КонецФункции // СохранитьЗапросыВФайл()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьРезультат()
	
	ЭлементыФормы.КоличествоСтрок.Видимость = Ложь;
	ЭлементыФормы.НадписьКоличествоСтрок.Видимость = Ложь;

	Если мРезЗапроса <> Неопределено Тогда
		
		//Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Результат" Тогда
			Если мТаблицаЗагружена = Ложь Тогда
				
				ЭлементыФормы.ТаблицаРезультата.Колонки.Очистить();
				
				Если СпособВыгрузки = 2 Тогда // Дерево
					
					РезультатДерево = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					РезультатТаблица = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой); 
					ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатДерево";
					ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
					Если Шир>0 Тогда
						Для каждого к Из ЭлементыФормы.ТаблицаРезультата.Колонки Цикл
							к.Ширина=шир;
						КонецЦикла; // 
					КонецЕсли;

					
				ИначеЕсли СпособВыгрузки = 1 Тогда  // Список
					
					РезультатТаблица = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатТаблица";
					ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
					Если Шир>0 Тогда
						Для каждого к Из ЭлементыФормы.ТаблицаРезультата.Колонки Цикл
							к.Ширина=шир;
						КонецЦикла; // 
					КонецЕсли;

					
				Иначе // не выгружать 
					
					Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
					ЭлементыФормы.КоличествоСтрок.Видимость = Истина;
					ЭлементыФормы.НадписьКоличествоСтрок.Видимость = Истина;
					ЭлементыФормы.КоличествоСтрок.Значение =Выборка.Количество();
					
					Возврат;
					
				КонецЕсли;                                                                       
				
				Если РезультатТаблица.Количество() <> 0 Тогда
					
					ЭлементыФормы.КоличествоСтрок.Видимость = Истина;
					ЭлементыФормы.НадписьКоличествоСтрок.Видимость = Истина;
					ЭлементыФормы.КоличествоСтрок.Значение =РезультатТаблица.Количество();
					
					КоличествоКолонок = РезультатТаблица.Колонки.количество();
					Для НомерТекущейКолонки = 0 По КоличествоКолонок-1 Цикл
						Колонка = РезультатТаблица.Колонки.Получить(НомерТекущейКолонки);
						Если Колонка.ТипЗначения.СодержитТип(мТипЧисло) Тогда
							ЭлементыФормы.ТаблицаРезультата.Колонки[НомерТекущейКолонки].Формат ="ЧН=0";
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;	

				мТаблицаЗагружена = Истина;
				
			КонецЕсли;
			                               
		//ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "СводнаяТаблица" Тогда
		//	Если мСводнаяТаблицаЗагружена = Ложь Тогда
		//		Попытка
		//			ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезЗапроса;
		//		Исключение
		//		КонецПопытки;
		//		мСводнаяТаблицаЗагружена = Истина;
		//	КонецЕсли;
		//КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры // ЗагрузитьРезультат()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Добавляет строки при копировании строки дерева запросов
//
// Параметры:
//  ТекСтрока - текущая строка
//	ДобСтрока - добавляемая строка
//	Дерево - дерево значений.
//
Процедура ДобавитьСтроки(ТекСтрока, ДобСтрока, Дерево)

	Для Каждого Кол Из Дерево.Колонки Цикл
		ДобСтрока[Кол.Имя] = ТекСтрока[Кол.Имя];
	КонецЦикла; 
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		НоваяСтрока = ДобСтрока.Строки.Добавить();
		ДобавитьСтроки(Строка, НоваяСтрока, Дерево);
	КонецЦикла;

КонецПроцедуры // ДобавитьСтроки()

//----------------------------------------------------------------------------------------------------------------------------------------------

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура ОбработкаАвтосохранения()

	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("Сохранить", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("Сохранить");
	КонецЕсли;

КонецПроцедуры // ОбработкаАвтосохранения()

//----------------------------------------------------------------------------------------------------------------------------------------------

//Добавляет/убирает символы "|" из запроса
Функция ОбработатьТекстЗапроса(пТекстЗапроса, пТолькоДобавлятьСимволы = Ложь)
	
	Номер = Найти(пТекстЗапроса, "|");
	ЕстьСимволы = (Номер > 0);
	
	Если пТолькоДобавлятьСимволы И ЕстьСимволы Тогда
		Возврат пТекстЗапроса;
	КонецЕсли;
	
	//Очищаем символы "|"
	пТекстЗапроса = СтрЗаменить(пТекстЗапроса, "|", "");
	
	Если ЕстьСимволы Тогда
		//Вернем текст запроса с заменой двойных кавычек на одинарные
		Возврат СтрЗаменить(пТекстЗапроса, """" + """", """");
	Иначе
		//Заменим одинарные кавычки на двойные
		ТекстЗапроса = СтрЗаменить(пТекстЗапроса, """", """" + """");
		
		//Вернем текст запроса с символами "|" в начале каждой строки
		Возврат "|" + СтрЗаменить(ТекстЗапроса, Символы.ПС, Символы.ПС + "|");
	КонецЕсли;	
	
КонецФункции //ОбработатьТекстЗапроса

//----------------------------------------------------------------------------------------------------------------------------------------------

//Формирует текст алгоритма в обработку или отчет, копирует его в буфер и открывает в текстовом виде
Процедура КоманднаяПанельФормыСоздатьТекстДляОбработки(Кнопка)
	
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Текст = "Запрос = Новый Запрос(" + """" + Символы.ПС + ОбработатьТекстЗапроса(ТекстЗапроса, Истина);
	Текст = Текст + Символы.ПС + "|" + """" + ");";
	
	Текст = Текст + Символы.ПС;
	
	//Добавляем параметры
	Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "|", ""));
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Текст = Текст + Символы.ПС + "Запрос.УстановитьПараметр(" + """" + Параметр.Имя + """" + ", );";
	КонецЦикла; 
	
	Текст = Текст + Символы.ПС;
	
	Текст = Текст + "
	//+ SP Иванов А.Б. 2014-01-31
	//|Выборка = Запрос.Выполнить().Выбрать();
	|РезультатЗапроса = Запрос.Выполнить(); 
	|Если РезультатЗапроса.Пустой() Тогда
	|	Возврат;
	|Конецесли;
	|Выборка = РезультатЗапроса.Выбрать();
	//- SP Иванов А.Б. 2014-01-31
	|Пока Выборка.Следующий() Цикл
	|
	|КонецЦикла;
	|";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст); 
	
	//Копируем этот текст в буфер обмена
	Попытка
		ЭлементыФормы.HTMLКопирование.Документ.ParentWindow.ClipboardData.SetData("Text", Текст);
		БылоКопирование = Истина;
	Исключение
		БылоКопирование = Ложь;
	КонецПопытки;
	
	ТекстовыйДокумент.Показать("Текст в обработку или отчет" + ?(БылоКопирование, " (одновременно текст помещен в буфер обмена)", ""));
	
КонецПроцедуры //КоманднаяПанельФормыСоздатьТекстДляОбработки

//----------------------------------------------------------------------------------------------------------------------------------------------

Процедура КоманднаяПанельФормыВУниверсальныйОтчет(Кнопка)
	
	ТекущаяСтрокаДерева = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	ОбъектУниверсальнвйОтчет = Отчеты.УниверсальныйОтчет.Создать();
	ФормаУниверсальногоОтчета = ОбъектУниверсальнвйОтчет.ПолучитьФорму("Форма");
	
	ОбъектНастройкаОтчета = Справочники.НастройкиОтчетов.СоздатьЭлемент();
	
	ОбъектНастройкаОтчета.Наименование 			= ТекущаяСтрокаДерева.Запрос;
	ОбъектНастройкаОтчета.ИдентификаторОтчета 	= "УниверсальныйОтчет";
	ОбъектНастройкаОтчета.НаименованиеОтчета 	= "Универсальный отчет";
	
	// очищаем свойство Отчета объекта "СсылкаНастройкаОтчета" чтобы при получении настроек система выдала настройки по умолчанию
	ОбъектУниверсальнвйОтчет.СсылкаНастройкаОтчета = Неопределено;
	
	СтруктураПередаваемыхПараметров = Новый Структура;
	СтруктураПередаваемыхПараметров.Вставить("НастройкаОтчетаОбъект",	ОбъектНастройкаОтчета);
	СтруктураПередаваемыхПараметров.Вставить("ОбработкаОбъект", 		ОбъектУниверсальнвйОтчет);
	
	ФормаНастройкиПостроителя = ПолучитьОбщуюФорму("ФормаНастройкиОтчета", ФормаУниверсальногоОтчета, "НастройкаОтчета_" + ОбъектНастройкаОтчета.Код);
	ФормаНастройкиПостроителя.НачальноеЗначениеВыбора = СтруктураПередаваемыхПараметров;
	
	
	ФормаУниверсальногоОтчета.Открыть();
	ФормаНастройкиПостроителя.Открыть();
	
	
	ТекстЗапроса = ТекущаяСтрокаДерева.ТекстЗапроса;
	ФормаНастройкиПостроителя.ТекстЗапроса = ТекстЗапроса;
	ФормаНастройкиПостроителя.ЭлементыФормы.ПолеТекстовогоДокументаЗапрос.УстановитьТекст(ТекстЗапроса);
	
	
	ТаблицаПараметровПолей = ФормаНастройкиПостроителя.ТаблицаПараметровПолей;
	Для каждого СтрокаТаблицыПараметров Из мФормаПараметров.Параметры Цикл
		НоваяСтрока = ТаблицаПараметровПолей.Добавить();
		НоваяСтрока.Имя = СтрокаТаблицыПараметров.ИмяПараметра;
		НоваяСтрока.Вычисляемый = Ложь;
		НоваяСтрока.Значение = СтрокаТаблицыПараметров.ЗначениеПараметра;
	КонецЦикла; 
	
	
	Если мФормаПараметров.ЕстьПериодВПараметрах Тогда
		ФормаУниверсальногоОтчета.ЭлементыФормы.ПанельВыбораПериода.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаУниверсальногоОтчета.ДатаНачала = мФормаПараметров.ДатаНачала;
		ФормаУниверсальногоОтчета.ДатаКонца = мФормаПараметров.ДатаКонца;
	Иначе
		ФормаУниверсальногоОтчета.ЭлементыФормы.ПанельВыбораПериода.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельФормыВыполнить(Кнопка)
	Форма = ЭтотОбъект.ПолучитьФорму("ОбработкаВыборки", ЭтаФорма);
	//Форма.ЭтотОбъект = ЭлементыФормы;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ШирПриИзменении(Элемент)
	ТЧ = ЭлементыФормы.ТаблицаРезультата.Колонки;
	Для каждого ТекСтрока Из ТЧ Цикл
		ТекСтрока.ширина = Элемент.Значение;
	КонецЦикла; //  
КонецПроцедуры


//OLE
Процедура КоманднаяПанельФормыOLE(Кнопка)
	//Если ЭтаФорма.Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать Тогда
		ЭтаФорма.Панель.ОтображениеЗакладок = ОтображениеЗакладок.СправаВертикально;
		ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Страница1;
	//Иначе
	//	ЭтаФорма.Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	//	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Страница0;
	//КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьOLEНажатие(Элемент)
	//ЭтаФорма.Панель.Страницы.Панель.Видимость = Истина;
	ЭтаФорма.Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Страница0;
КонецПроцедуры

Процедура КонсольНажатие(Элемент)
	ЭтаФорма.Панель.ТекущаяСтраница = ЭтаФорма.Панель.Страницы.Страница0;
КонецПроцедуры


Процедура ПодключитьНажатие(Элемент)
	 Соединение = Новый COMОбъект("V81.Application");
	 
	 Путь = "Srvr=" + СокрЛП(ПутьСервер) + ";ref=" + СокрЛП(База);
	 Путь = "File=" + СокрЛП(Файл);
	 ПутьБазы = Путь + "; Usr=" + СокрЛП(Пользователь) + ";Pwd=" + СокрЛП(Пароль);
	 Состояние("Инициализация базы, подождите...");
	 
	 Попытка
		 База80 = Соединение.Connect(ПутьБазы);
		 Сообщить("Подключение прошло успешно!!!", СтатусСообщения.ОченьВажное);
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьOLEНажатие(Элемент)
	
	Попытка
		Выполнить(ЭлементыФормы.ПолеТекстовогоДокумента2.ПолучитьТекст());
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	 //Документы.Приход.НайтиПоНомеру(
	//ОбъектЗапрос = База80.NewObject("Запрос");
	//ОбъектЗапрос.Текст = ЭлементыФормы.ПолеТекстовогоДокумента1.ПолучитьТекст();
	//

	//Для каждого СтрокаПараметров Из мФормаПараметров.Параметры Цикл
	//	Если СтрокаПараметров.ЭтоВыражение Тогда
	//		Если Найти(ВРЕГ(СтрокаПараметров.ЗначениеПараметра),"РЕЗУЛЬТАТ") > 0 Тогда
	//			Результат = "";
	//			Выполнить(СтрокаПараметров.ЗначениеПараметра);
	//			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Результат);
	//		Иначе
	//			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
	//		КонецЕсли; 
	//	Иначе
	//		ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
	//	КонецЕсли;
	//КонецЦикла;

	//Если мФормаПараметров.ЕстьПериодВПараметрах Тогда
	//	ОбъектЗапрос.УстановитьПараметр("ДатаНачала", мФормаПараметров.ДатаНачала);
	//	ОбъектЗапрос.УстановитьПараметр("ДатаКонца", мФормаПараметров.ДатаКонца);
	//КонецЕсли; 
	//
	//
	//Если ПустаяСтрока(ОбъектЗапрос.Текст) Тогда
	//	Предупреждение("Не заполнен текст запроса!", 30);
	//	Возврат;
	//КонецЕсли;
	//
	//ДатаНачала = ТекущаяДата();
	//мРезЗапроса = ОбъектЗапрос.Выполнить();
	//   

	//ДатаКонцаВыполнения = ТекущаяДата();
	// ЭлементыФормы.ВремяВыполнения.Значение = Формат('00010101' + (ДатаКонцаВыполнения - ДатаНачала), "ДЛФ=В; ДП=0:00:00");

	//мТаблицаЗагружена = Ложь;
	////мСводнаяТаблицаЗагружена = Ложь;

	//РезультатТаблица.Колонки.Очистить();
	//Для Каждого ТекСтрока Из мРезЗапроса.Колонки Цикл
	//	РезультатТаблица.Колонки.Добавить(ТекСтрока.имя);
	//КонецЦикла;
	//
	//
	//Выборка = мРезЗапроса.Выбрать();
	//	
	//Пока Выборка.Следующий() Цикл
	//	ТекСтрока = РезультатТаблица.Добавить();
	//	Для Каждого Стр Из мРезЗапроса.Колонки Цикл
	//		ТекСтрока[Стр.Имя] = Выборка[Стр.Имя];
	//	КонецЦикла;
	//	//ТекСтрока.Установить(
	//КонецЦикла;
	//ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатТаблица";
	//ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();

	////ЗагрузитьРезультат();
	//ДатаКонца = ТекущаяДата();


	//Мета = База80.Метаданные;
КонецПроцедуры


//==============================================================================================================================================
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//==============================================================================================================================================
 
мИмяФайла = "";
мИмяПути = "";

мЗаголовокФормы = Заголовок;

мТекущаяСтрока = НеОпределено;
мИдетДобавление = Ложь;
мАктивизированаДобавляемаяЗапись = Ложь;

мФормаПараметров = Обработка.ПолучитьФорму("ФормаПараметров", ЭтаФорма);
мФормаПараметров.РазрешитьСостояниеПрикрепленное = Истина;
мФормаПараметров.РазрешитьСостояниеПрячущееся = Ложь;
мФормаПараметров.РазрешитьСостояниеСвободное = Истина;
мТаблицаЗагружена = Ложь;
//мСводнаяТаблицаЗагружена = Ложь;
мТипЧисло = Тип("число");

Дерево = ЭлементыФормы.ДеревоЗапросов;
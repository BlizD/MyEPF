Перем ПТД_Титульный;
Перем ПТД_Раздел1;
Перем ПТД_Раздел2;

Перем мСтруктураМногостраничныхРазделов Экспорт;

Перем мСтруктураМногострочныхРазделов Экспорт;
Перем ИдМСЧ_Раздел1; // Идентификатор многострочной части раздела 1.
Перем ИдМСЧ_Раздел2; // Идентификатор многострочной части раздела 2.
Перем мСтруктураИсхКолвоСтрокРазделов Экспорт;

Перем мСвойстваРазделовДекларации Экспорт;
Перем мДеревоВыбранныхСтраниц Экспорт; // Список выводимых на печать страниц
Перем мСтруктураЦветовРаскраски Экспорт; // Цвета раскраски автоматически заполняемых ячеек табличного документа
Перем мПечатныеФормы Экспорт;
Перем мПечатаемыеРазделы Экспорт;
Перем СвойстваПоказателей Экспорт; // Таблицы выбора значений из списка
Перем СоответствиеЕдиницыИзмеренияДелителю;

// Переменные управляющие вариантами открытия формы.
Перем мБезОткрытияФормы Экспорт;
Перем мРежимПечати Экспорт;

Перем мОписаниеТиповЧислоЕ Экспорт; // Тип данных для хранения денежных показателей
Перем мСтрокаФормата Экспорт;
Перем мСоставПоказателей Экспорт;

Перем ТаблицаСообщений Экспорт; // Сообщения об ошибках при выгрузке электронного представления
Перем мДанныеОтчета Экспорт; // Сохраненные данные отчета

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередОткрытиемФормыРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетность.ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура КнопкаОткрытьПротоколОтправкиНажатие(Элемент)
	
	КонтекстЭДО.ОткрытьПротоколОтправки(ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаОбновитьСостояниеОтправкиНажатие(Элемент)
	
	КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	ЗаполнитьДатуПодписи();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.роПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	ВывестиНомерКорректировкиНаТитульныйЛист();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	ВывестиНомерКорректировкиНаТитульныйЛист();
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	ОбработкаВыбораПодразделения();
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если ОбособленноеПодразделение.Метаданные().Реквизиты.Найти("ОбособленноеПодразделение") <> Неопределено Тогда
		ЗапросПоПодразделениям = Новый Запрос;
		ЗапросПоПодразделениям.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                               |	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		                               |	ПодразделенияОрганизаций.Наименование КАК Наименование
		                               |ИЗ
		                               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                               |ГДЕ
									   |	ПодразделенияОрганизаций.Владелец = &Организация
									   |УПОРЯДОЧИТЬ ПО
									   |	ПодразделенияОрганизаций.Наименование
									   |";
		
		ЗапросПоПодразделениям.УстановитьПараметр("Организация", Организация);
		Выборка = ЗапросПоПодразделениям.Выполнить().Выбрать();
		
		СписокВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
		Если СписокВыбора.Количество() = 0 Тогда
			СписокВыбора.Добавить(НезаполненноеПоздразделение(), "<нет обособленных подразделений>");
		КонецЕсли;
		
		ЭлементыФормы.ОбособленноеПодразделение.СписокВыбора = СписокВыбора;
		
	ИначеЕсли ОбособленноеПодразделение.Метаданные().Реквизиты.Найти("КодПоОКТМО") <> Неопределено Тогда
		ЗапросПоПодразделениям = Новый Запрос;
		ЗапросПоПодразделениям.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                               |	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		                               |	ПодразделенияОрганизаций.Наименование КАК Наименование,
		                               |	ПодразделенияОрганизаций.КодПоОКТМО КАК ОКТМО
		                               |ИЗ
		                               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                               |ГДЕ
		                               |	ПодразделенияОрганизаций.Владелец = &Организация
									   |УПОРЯДОЧИТЬ ПО
									   |	ПодразделенияОрганизаций.Наименование
									   |";
		
		ЗапросПоПодразделениям.УстановитьПараметр("Организация", Организация);
		Выборка = ЗапросПоПодразделениям.Выполнить().Выбрать();
		
		СписокВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ОКТМО) Тогда
				СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЕсли;
			СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
		Если СписокВыбора.Количество() = 0 Тогда
			СписокВыбора.Добавить(НезаполненноеПоздразделение(), "<нет обособленных подразделений>");
		КонецЕсли;
		
		ЭлементыФормы.ОбособленноеПодразделение.СписокВыбора = СписокВыбора;
		
	Иначе
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(НезаполненноеПоздразделение(), "<нет обособленных подразделений>");
		ЭлементыФормы.ОбособленноеПодразделение.СписокВыбора = СписокВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьОбособленноеПодразделение();
	ЗаполнитьРеквизитыОрганизации();
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	Перем ТекущаяОбласть;
	
	РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
	
	ИмяТекущейСтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница].Имя;
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногостраничностьВРазделе") Тогда
		РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда
		ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
		РегламентированнаяОтчетность.роВывестиЭлементыВариантаЗаполнения(ЭтаФорма, ТекущаяОбласть);
	КонецЕсли;
	
КонецПроцедуры

// Титульный Лист.

Процедура ПолеТабличногоДокументаТитульныйВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТитульныйПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

// Раздел 1.

Процедура ПолеТабличногоДокументаРаздел1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел1");
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел1ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел1ПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел1ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел1Нажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел1Нажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

// Раздел 2.

Процедура ПолеТабличногоДокументаРаздел2Выбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриАктивизацииОбласти(Элемент)
	
	РегламентированнаяОтчетность.роПриАктивизацииОбластиРегламентированногоОтчета(ЭтаФорма, Элемент, "Раздел2");
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаРаздел2ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
	//+ Иванов А.Б. 2016-04-18
	ивОбновитьИтоги();
	//- Иванов А.Б. 2016-04-18
	
КонецПроцедуры

Процедура ПолеВыбораВариантЗаполненияРаздел2ПриИзменении(Элемент)
	
	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);
	
КонецПроцедуры

Процедура ПолеВводаЗначениеКорректировкиРаздел2ПриИзменении(Элемент)
	
	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеВводаКомментарийРаздел2ПриИзменении(Элемент)
	
	Перем Комментарий;
	
	Комментарий = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Комментарий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиРаздел2Нажатие(Элемент)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиРаздел2Нажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетность.НачалоВыбораСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СтатусПриИзменении(Элемент)
	
	РегламентированнаяОтчетность.ПриИзмененииСтатусаВРегламентированномОтчете(ЭтаФорма, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура КоманднаяПанельФормыЗаполнить(Кнопка)
	
	ЗаполнитьАвто();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыбратьВариантОчисткиОтчета(Кнопка)
	
	РегламентированнаяОтчетность.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыгрузить(Кнопка)
	
	Выгрузить();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	НовыйДок.ПолучитьФорму(, ЭтаФорма).Проверить(СпДокОсн);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)
	
	ОткрытьФормуВыбораСтраниц();
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоиск(Кнопка)
	
	РегламентированнаяОтчетность.роПоискВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаЗаполнитьСведенияОбОрганизацииНажатие(Элемент)
	
	Если НЕ ПодразделениеОбособленное(ОбособленноеПодразделение) Тогда
		ОчиститьОбособленноеПодразделение();
	КонецЕсли;
	
	ЗаполнитьСведенияОбОрганизации();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРасшифровать(Кнопка)
	
	Если СвойстваЗаполненияОтчета <> Неопределено Тогда
		СвойстваЗаполненияОтчета.ИсточникЗаполнения.ВывестиОтчетРасшифровку("РегламентированныйОтчет6НДФЛ", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьФормы(Кнопка)
	
	Если Кнопка <> Неопределено Тогда
		Печать(Кнопка.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДействийПечатьМашиночитаемогоБланка(Кнопка)
	
	РегламентированнаяОтчетность.ВывестиМашиночитаемуюФорму(ЭтаФорма, Кнопка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельДействийСохранитьИЗакрыть(Кнопка)
	
	Если Сохранить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДействийЗаписать(Кнопка)
	
	Сохранить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьПоляТабличныхДокументов();
	
	ИнициализироватьСвойстваРазделовОтчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ВидДокумента = 0;
	НомерКорректировки = 1;
	ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1);
	
	мАвтоВыборКодов = Ложь;
	мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетность.СформироватьСоставКнопкиОчиститьДляРегОтчетов(ЭтаФорма);
		ИнициализироватьЭУВыбораОбособленныхПодразделений();
	КонецЕсли;
	
	Если мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
		ТочностьЕдиницыИзмерения = 0;
		
		ЗаполнитьСведенияОбОрганизации();
		
		ВывестиНомерКорректировкиНаТитульныйЛист();
		УстановитьФорматВыводаВПоляхВвода();
		ЗаполнитьЗначенияВНовомЭкземпляреОтчета();
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		
		Если ЗначениеЗаполнено(мСкопированаФорма) Тогда
			// Действия при копировании формы.
			Если Организация <> мСохраненныйДок.Организация Тогда
				ЗаполнитьСведенияОбОрганизации();
				ЗаполнитьКодПериода();
				ЗаполнитьКодПоМесту();
				ОбособленноеПодразделение = Неопределено;
			КонецЕсли;
			
			ИсходныйПериод = КонецДня(мСохраненныйДок.ДатаОкончания);
			Если ИсходныйПериод <> мДатаКонцаПериодаОтчета Тогда
				ЗаполнитьКодПериода();
			КонецЕсли;
			
			ОтчетныйГод = Год(мДатаКонцаПериодаОтчета);
			РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, Формат(ОтчетныйГод, "ЧГ="));
			
			ДатаПодписи = РабочаяДата;
			ЗаполнитьДатуПодписи();
		КонецЕсли;
		
	КонецЕсли;
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета), "ФП = Истина");
	Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + " (за " + СтрПериодОтчета + ")";
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногострочныхРазделов(ЭтаФорма);
	
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		УстановитьЦветФонаЯчейки( , , Страница.Имя);
	КонецЦикла;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетность.роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.роДоступностьКнопокДобавитьУдалить(ЭтаФорма);
		СформироватьПодменюПечать();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	//+ Иванов А.Б. 2016-04-18
	ивОбновитьИтоги();
	//- Иванов А.Б. 2016-04-18
	
КонецПроцедуры

Процедура ИнициализироватьПоляТабличныхДокументов()
	
	ПрефиксИменМакетов = "ФормаОтчета2016Кв1_";
	
	Макет = ПолучитьМакет(ПрефиксИменМакетов + "Титульный");
	ПТД_Титульный = ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	ПТД_Титульный.Очистить();
	ПТД_Титульный.Вывести(Макет);
	
	Макет = ПолучитьМакет(ПрефиксИменМакетов + "Раздел1");
	ПТД_Раздел1 = ЭлементыФормы.ПолеТабличногоДокументаРаздел1;
	ПТД_Раздел1.Очистить();
	ПТД_Раздел1.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел1);
	
	Макет = ПолучитьМакет(ПрефиксИменМакетов + "Раздел2");
	ПТД_Раздел2 = ЭлементыФормы.ПолеТабличногоДокументаРаздел2;
	ПТД_Раздел2.Очистить();
	ПТД_Раздел2.Вывести(Макет);
	ОбнулитьОбластиЧисловыхЗначений(ПТД_Раздел2);
	
	ИнициализироватьПоляВводаТабличныхДокументов();
	
КонецПроцедуры

Процедура ОбнулитьОбластиЧисловыхЗначений(ПолеТабличногоДокумента)
	
	Для Каждого Область Из ПолеТабличногоДокумента.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Если Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Число") Тогда
				ИсходныйФормат = Область.Формат;
				Область.Формат = ИсходныйФормат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьПоляВводаТабличныхДокументов()
	
	МаскаОКТМО = "99999999999";
	
	ПТД_Титульный.Области.Период1.ЭлементУправления.Маска = "9";
	ПТД_Титульный.Области.Период2.ЭлементУправления.Маска = "9";
	
	Для Инд = 1 По 4 Цикл
		ПТД_Титульный.Области["НалоговыйОрган" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	Для Инд = 1 По 3 Цикл
		ПТД_Титульный.Области["СоставленаНа" + Инд].ЭлементУправления.Маска = "9";
		ПТД_Титульный.Области["Прил" + Инд].ЭлементУправления.Маска = "9";
	КонецЦикла;
	
	ПТД_Титульный.Области.ОКТМО.ЭлементУправления.Маска = МаскаОКТМО;
	
КонецПроцедуры

Процедура ИнициализироватьСвойстваРазделовОтчета()
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	ОписаниеТиповСтрока100 = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповСтрока50  = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповЧисло1    = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(1);
	
	мСвойстваРазделовДекларации = Новый ДеревоЗначений;
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяСтраницы", ОписаниеТиповСтрока100);
	
	// Наличие многострочности в разделе:
	// 0 - нет;
	// 1 и более - точное кол-во число многострочных частей на листе.
	мСвойстваРазделовДекларации.Колонки.Добавить("МногострочностьВРазделе", ОписаниеТиповЧисло1);
	
	// Записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру.
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// (только для многостраничных документов).
	мСвойстваРазделовДекларации.Колонки.Добавить("СохранятьМногострКакТЗ",  ОписаниеТиповБулево);
	
	// Наличие многостраничности в разделе.
	мСвойстваРазделовДекларации.Колонки.Добавить("МногостраничностьВРазделе",  ОписаниеТиповБулево);
	
	// Будет ли очищаться раздел по кнопке "Очистить".
	мСвойстваРазделовДекларации.Колонки.Добавить("ОчищатьРаздел",  ОписаниеТиповБулево);
	
	// Если раздел многостраничный (параметр МногостраничностьВРазделе = Истина), тогда указывается
	// имя поля, по которому будет формироваться представление дополнительной страницы.
	мСвойстваРазделовДекларации.Колонки.Добавить("ИмяПредставления",  ОписаниеТиповСтрока50);
	
	// Есть ли в разделе значения, разбиваемые по квадратам.
	мСвойстваРазделовДекларации.Колонки.Добавить("ПредставлениеДанных",  ОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделОбязателенДляВыгрузки",  ОписаниеТиповБулево);
	мСвойстваРазделовДекларации.Колонки.Добавить("НазваниеПанелиТабличногоПоляРаздела",  ОписаниеТиповСтрока50);
	мСвойстваРазделовДекларации.Колонки.Добавить("РазделЯвляетсяАвтозаполняемым", ОписаниеТиповБулево);
	
	мСвойстваРазделовДекларации.Строки.Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногострочностьВРазделе              = 1;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ИнициализироватьНастройкиПечатиСтраниц();
	СформироватьСоставПоказателей();
	
	ИнициализироватьМеханизмыАвтозаполнения();
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиПечатиСтраниц()
	
	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);
	
	мДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

Процедура СформироватьСоставПоказателей()
	
	МакетСоставаПоказателей = ПолучитьМакет(ИмяМакетаСоставаПоказателей());
	
	ОписаниеТиповСтрока15  = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(15);
	ОписаниеТиповСтрока50  = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(50);
	ОписаниеТиповСтрока100 = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(100);
	ОписаниеТиповЧисло1    = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(1);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",            ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",        ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",             мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",                   мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",              ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяМакетаСоставаПоказателей()
	
	Возврат "СоставПоказателей2016Кв1";
	
КонецФункции

Процедура ЗаполнитьЗначенияВНовомЭкземпляреОтчета()
	
	ЗаполнитьКодПериода();
	
	ОтчетныйГод = Формат(Год(мДатаКонцаПериодаОтчета), "ЧГ=");
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ОтчетГод", 4, ОтчетныйГод);
	
	ЗаполнитьКодПоМесту();
	
	ЗаполнитьДатуПодписи();
	
КонецПроцедуры

Процедура ЗаполнитьКодПериода()
	
	КодыПериодовПоКварталам = Новый Соответствие;
	КодыПериодовПоКварталам.Вставить(1, "21");
	КодыПериодовПоКварталам.Вставить(2, "31");
	КодыПериодовПоКварталам.Вставить(3, "33");
	КодыПериодовПоКварталам.Вставить(4, "34");
	
	Квартал = Месяц(КонецКвартала(мДатаКонцаПериодаОтчета)) / 3;
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "Период", 2, КодыПериодовПоКварталам[Квартал]);
	
КонецПроцедуры

Процедура ЗаполнитьКодПоМесту()
	
	СтрокаСведений = "ТипНП";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	
	ПоМесту = "   ";
	Если СведенияОбОрганизации.ТипНП = 1 Тогда
		ПоМесту = "212";
	ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
		ПоМесту = "120";
	КонецЕсли;
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ПоМесту", 3, ПоМесту);
	
КонецПроцедуры

Процедура УстановитьФорматВыводаВПоляхВвода() Экспорт
	Перем СтруктураГруппы;
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мСтрокаФормата = "ЧЦ = 14; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл
		
		ИмяПоляТаблДокумента     = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя            = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность     = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме     = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя      = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя            = ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПодменюПечать()
	
	РегламентированнаяОтчетность.ПрорисоватьПодменюПечать(ЭтаФорма, Новый Действие("КоманднаяПанельДействийПечатьФормы"), Новый Действие("КоманднаяПанельДействийПечатьМашиночитаемогоБланка"));
	
КонецПроцедуры

Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ПолучитьМакет(ИмяМакетаСписковВыбора());
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей = Новый ТаблицаЗначений;
	СвойстваПоказателей.Колонки.Добавить("Показатель");
	СвойстваПоказателей.Колонки.Добавить("Длина");
	СвойстваПоказателей.Колонки.Добавить("Тип");
	СвойстваПоказателей.Колонки.Добавить("ТекстПриВыборе");
	СвойстваПоказателей.Колонки.Добавить("ТаблицаЗначений");
	
	СвойстваПоказателей.Индексы.Добавить("Показатель");
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["КодыНалоговыхПериодов"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор кода по месту нахождения (учета)", КоллекцияСписковВыбора["КодыПоМестуПредставления"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001001", 2, , "Выбор ставки налога", КоллекцияСписковВыбора["СтавкиНалога"]);
	
КонецПроцедуры

Функция ИмяМакетаСписковВыбора()
	
	Возврат "СпискиВыбора2016Кв1";
	
КонецФункции

Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	НовСтр.ТаблицаЗначений = Значения;
	
КонецФункции

Процедура ВывестиНомерКорректировкиНаТитульныйЛист()
	
	НомерКорр = ВидДокумента * НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
	Для Инд = 1 По 3 Цикл
		ПТД_Титульный.Области["НомерКорректировки" + Инд].Значение = Сред(НомерКорректировкиСтрока, Инд, 1);
	КонецЦикла;
	
Конецпроцедуры

Процедура ЗаполнитьДатуПодписи()
	
	ПроставитьНаВсехЛистах("ДатаПодписи", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ = 'ддММгггг'"), "        "), Истина);
	ПроставитьНаВсехЛистах("ДатаПодписиПолная", ?(ЗначениеЗаполнено(ДатаПодписи), Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"), ""), Ложь);
	
КонецПроцедуры

Процедура ПроставитьНаВсехЛистах(Показатель, Знач ЗначениеПоказателя, Посимвольно = Истина)
	
	ТипЗначенияПоказателя = ТипЗнч(ЗначениеПоказателя);
	Если ТипЗначенияПоказателя = Тип("Число") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
	ИначеЕсли ТипЗначенияПоказателя = Тип("Дата") Тогда
		ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	// Одностраничные разделы.
	Для Каждого Раздел Из мСвойстваРазделовДекларации.Строки Цикл
		ТаблДок = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.ИмяСтраницы];
		Если НЕ Посимвольно Тогда
			Если ТаблДок.Области.Найти(Показатель) <> Неопределено Тогда
				ТаблДок.Области[Показатель].Значение = ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
				ТекОбласть = ТаблДок.Области.Найти(Показатель + Формат(Инд, "ЧГ="));
				Если ТекОбласть <> Неопределено Тогда
					ТекОбласть.Значение = Сред(ЗначениеПоказателя, Инд, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Многостраничные разделы.
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		СтраницыРаздела = Раздел.Значение;
		ТаблДокРаздела = ЭлементыФормы["ПолеТабличногоДокумента" + Раздел.Ключ];
		Если НЕ Посимвольно Тогда
			Если ТаблДокРаздела.Области.Найти(Показатель) <> Неопределено Тогда
				Для Каждого Стр Из СтраницыРаздела Цикл
					ДанныеСтраницы = Стр.Данные;
					Если ДанныеСтраницы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДанныеСтраницы.Вставить(Показатель, ЗначениеПоказателя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого Стр Из СтраницыРаздела Цикл
				ДанныеСтраницы = Стр.Данные;
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Инд = 1 По СтрДлина(ЗначениеПоказателя) Цикл
					Если ТаблДокРаздела.Области.Найти(Показатель + Формат(Инд, "ЧГ=")) <> Неопределено Тогда
						ДанныеСтраницы.Вставить(Показатель + Формат(Инд, "ЧГ="), Сред(ЗначениеПоказателя, Инд, 1));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработчикСобытияПоТаймеру()
	
	Если РегламентированнаяОтчетность.АвтосохранениеВозможно(ЭтаФорма) Тогда
		Сохранить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	Если мБезОткрытияФормы ИЛИ мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяЯчейки = Неопределено Тогда
		ИмяСтраницыПанели = РегламентированнаяОтчетность.роОпределитьСтраницуПанелиПоКодуПоказателя(ЭтаФорма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЗначениеВКвадратах = РегламентированнаяОтчетность.роОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// Цвет фона всех автозаполняемых ячеек активной страницы.
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
				
				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетность.роСвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетность.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	
	Если Найти(Область.Имя, "НалоговыйОрган") = 1 Тогда
		ОбработкаВыбораИФНС();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяОбласти);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		// Удаление вариантов, не проходящих по условиям.
		КодПоказателя = ПараметрВводаПоля.Показатель;
		ТЗВыбора = ПараметрВводаПоля.ТаблицаЗначений.Скопировать();
		
		ТребРезультат = УсловияОтбораВСпискеВыбора(КодПоказателя);
		
		Если ТребРезультат <> 0 Тогда
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.РезультатПроверки = "", 0, Число(ЭлементТЗ.РезультатПроверки));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// Удаление служебной колонки перед интерактивным выбором.
		ТЗВыбора.Колонки.Удалить(2);
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ТекущийЭлемент.Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	ИсходнаяСтрока = ТаблицаВыбора.Найти(ИсходноеЗначение, КолонкаПоиска);
	
	ФормаВыбора = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.Заголовок = ТекстВыбора;
	ФормаВыбора.СписокКодов = ТаблицаВыбора;
	Если ИсходнаяСтрока <> Неопределено Тогда
		ФормаВыбора.КодИсходнойСтроки = ИсходнаяСтрока.Код;
	КонецЕсли;
	
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетность.роПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ТекущийЭлемент.Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

Процедура ОбработкаВыбораИФНС()
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	
	ЕдинственноеОКТМО = (Метаданные.Справочники.РегистрацияВИФНС.Реквизиты.Найти("КодПоОКТМО") = Неопределено);
	
	Запрос = Новый Запрос;
	Если ЕдинственноеОКТМО Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СправочникИФНС.Ссылка КАК Ссылка,
		               |	СправочникИФНС.КПП КАК КПП,
		               |	СправочникИФНС.Код КАК КодНО,
		               |	СправочникИФНС.Представитель КАК Представитель
		               |ИЗ
		               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
		               |ГДЕ
		               |	СправочникИФНС.Владелец = &Владелец
		               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	КодНО,
		               |	КПП";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СправочникИФНС.Ссылка КАК Ссылка,
		               |	СправочникИФНС.КПП КАК КПП,
		               |	СправочникИФНС.Код КАК КодНО,
		               |	СправочникИФНС.Представитель КАК Представитель,
		               |	СправочникИФНС.КодПоОКТМО КАК ОКТМО
		               |ИЗ
		               |	Справочник.РегистрацияВИФНС КАК СправочникИФНС
		               |ГДЕ
		               |	СправочникИФНС.Владелец = &Владелец
		               |	И СправочникИФНС.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	КодНО,
		               |	КПП";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	ТаблицаВыбора = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВыбора.Колонки.КПП.Ширина = 10;
	ТаблицаВыбора.Колонки.КодНО.Ширина = 7;
	ТаблицаВыбора.Колонки.КодНО.Заголовок = "ИФНС";
	ТаблицаВыбора.Колонки.Представитель.Ширина = 42;
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НалоговыйОрган");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	КПП = СтрЗаменить(КПП, "-", "");
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	Ссылки = ТаблицаВыбора.ВыгрузитьКолонку("Ссылка");
	ТаблицаВыбора.Колонки.Удалить("Ссылка");
	
	Если ТаблицаВыбора.Количество() <> 0 Тогда
		// Определение первоначального значения.
		Строки = ТаблицаВыбора.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			РезультатВыбора = ТаблицаВыбора.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			ВыбранныйКодНО = РезультатВыбора.КодНО;
			
			// Доработка результата выбора.
			ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
			Для Инд = ДлинаКодаНО + 1 По 4 Цикл
				ВыбранныйКодНО = "0" + ВыбранныйКодНО;
			КонецЦикла;
			
			// Заполнение отчета данными выбора.
			Для Инд = 1 По 4 Цикл
				ПТД_Титульный.Области["НалоговыйОрган" + Инд].Значение = Сред(ВыбранныйКодНО, Инд, 1);
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				Для Сч = 1 По 9 Цикл
					ПроставитьНаВсехЛистах("КПП" + Сч + "_", РезультатВыбора.КПП);
				КонецЦикла;
				
				Если НЕ ЕдинственноеОКТМО Тогда
					ПТД_Титульный.Области.ОКТМО.Значение = СокрЛП(РезультатВыбора.ОКТМО);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСведенияОПодписантах();
			
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
		
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораПодразделения()
	
	Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
		
		Если НЕ ПодразделениеОбособленное(ОбособленноеПодразделение) Тогда
			
			ОбщегоНазначенияЗК.СообщитьИнформациюПользователю("Выбранное подразделение не зарегистрировано как обособленное. Значение очищено.");
			ОчиститьОбособленноеПодразделение();
			
			ЗаполнитьРеквизитыОрганизации();
			Возврат;
		КонецЕсли;
		
		ПТД_Титульный.Области.ОКТМО.Значение = ОбособленноеПодразделение.КодПоОКТМО;
		Для Инд = 1 По 9 Цикл
			ПроставитьНаВсехЛистах("КПП" + Инд + "_", ОбособленноеПодразделение.КПП);
		КонецЦикла;		
		
		РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ПоМесту", 3, "220");
		
	Иначе
		ЗаполнитьРеквизитыОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодразделениеОбособленное(Подразделение)
	
	ЭтоОП = Ложь;
	
	Если Подразделение.Метаданные().Реквизиты.Найти("ОбособленноеПодразделение") <> Неопределено Тогда
		ЭтоОП = Подразделение.ОбособленноеПодразделение;
		
	ИначеЕсли Подразделение.Метаданные().Реквизиты.Найти("КодПоОКТМО") <> Неопределено Тогда
		ЭтоОП = ЗначениеЗаполнено(Подразделение.КодПоОКТМО);
		
	КонецЕсли;
	
	Возврат ЭтоОП;
	
КонецФункции

Процедура ОчиститьОбособленноеПодразделение()
	
	ЭлементыФормы.ОбособленноеПодразделение.Значение = НезаполненноеПоздразделение();
	
	РегламентированнаяОтчетность.роПроставитьВКвадратыЗначения(ЭтаФорма, "Титульный", "ПоМесту", 3, "   ");
	
КонецПроцедуры

Функция НезаполненноеПоздразделение()
	
	Возврат ЭлементыФормы.ОбособленноеПодразделение.ОграничениеТипа.ПривестиЗначение(Неопределено);
	
КонецФункции

Процедура ЗаполнитьРеквизитыОрганизации()
	
	СтрокаСведений = "КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИО, ОКТМО, КодНО";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	
	КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
		КПП = КПП + "-";
	КонецЦикла;
	
	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
	КонецЕсли;
	
	КодНО = СведенияОбОрганизации.КодНО;
	Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
		КодНО = " " + КодНО;
	КонецЦикла;
	
	Для Сч=1 По 9 Цикл
		ПроставитьНаВсехЛистах("КПП" + Сч + "_", КПП);
	КонецЦикла;
	
	Для Инд = 1 По 4 Цикл
		ПТД_Титульный.Области["НалоговыйОрган" + Инд].Значение = Сред(КодНО, Инд, 1);
	КонецЦикла;
	
	ПТД_Титульный.Области.НаимОрг.Значение = НаименованиеОрганизации;
	ПТД_Титульный.Области.ОКТМО.Значение = СокрЛП(СведенияОбОрганизации.ОКТМО);
	
КонецПроцедуры

Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.Найти(КодПоказателя, "Показатель");
	Если СвойстваПоказателя = Неопределено Тогда
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СвойстваПоказателя;
	
КонецФункции

Функция УсловияОтбораВСпискеВыбора(КодПоказателя)
	
	УсловиеОтбора = 0;
	
	Если КодПоказателя = "Период" Тогда
		НомерКвартала = Число(Формат(мДатаКонцаПериодаОтчета, "ДФ=к"));
		УсловиеОтбора = НомерКвартала;
	КонецЕсли;
	
	Возврат УсловиеОтбора;
	
КонецФункции

Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	ИмяРаздела = Сред(Элемент.Имя, 24);
	ИмяПоказателя = Область.Имя;
	
	Модифицированность = Истина;
	
	ПараметрВводаПоля = СвойстваПоказателей.Найти(ИмяПоказателя, "Показатель");
	Если ПараметрВводаПоля <> Неопределено Тогда
		Если ПараметрВводаПоля.Тип = "ОКТМО" И ЗначениеЗаполнено(Область.Значение) Тогда
			ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
			Для Инд = ДлинаЗначения По 11 Цикл
				Область.Значение = СокрЛП(Область.Значение) + "0";
			КонецЦикла;
		КонецЕсли;
		
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщить("Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьДополнительнуюСтроку(ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем СтруктураГруппы;
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	// Последняя строка многострочной части.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;
	
	// Область первой ячейки последней строки многострочной части.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	ВысотаСтроки = ВысотаСтрокиМногострочнойЧасти(ИмяГруппы);
	СмещениеСтроки = СмещениеНачалаМногострочнойЧасти(ИмяГруппы);
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - СмещениеСтроки;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх - СмещениеСтроки + ВысотаСтроки - 1;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	Если СпециальноеДобавление Тогда
		// Особый режим не предусмотрен.
	Иначе
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
	
		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		
		// Границы ячейки исходной области.
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;
		
		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяГруппыБлока = Неопределено Тогда
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;
		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;
	
	СтруктураГруппы.Добавить();
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура УдалитьДополнительнуюСтроку(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетность.роРазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;
	
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		ВысотаСтроки = ВысотаСтрокиМногострочнойЧасти(ИмяГруппы);
		СмещениеСтроки = СмещениеНачалаМногострочнойЧасти(ИмяГруппы);
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх - СмещениеСтроки;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх - СмещениеСтроки + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		
		// Координаты области, для последующего восстановления.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;
		
		Если СпециальноеДобавление Тогда
			// Особый режим не предусмотрен.
		Иначе
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
					
					ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
							
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Удаление сдвигом строк.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Порядковые номера строк.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;
				
				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;
	
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	ТекущийЭлемент = ТекТабличноеПоле;
	
	Модифицированность = Истина;
	Расчет();
	
КонецПроцедуры

// Определяет многострочный раздел табличного документа на активной странице основной панели формы.
//
// Возвращаемое значение:
//  Строка - имя многострочного раздела.
//
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено) Экспорт
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдМСЧ_Раздел1;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдМСЧ_Раздел2;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

// Определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдМСЧ_Раздел1 Тогда
		ТекТабличноеПоле = ПТД_Раздел1;
	КонецЕсли;
	
	Если ИдГруппы = ИдМСЧ_Раздел2 Тогда
		ТекТабличноеПоле = ПТД_Раздел2;
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

Функция ВысотаСтрокиМногострочнойЧасти(ИдМногострочнойЧасти)
	
	Если ИдМногострочнойЧасти = ИдМСЧ_Раздел1 Тогда
		Возврат 9;
	ИначеЕсли ИдМногострочнойЧасти = ИдМСЧ_Раздел2 Тогда
		Возврат 6;
	Иначе
		ВызватьИсключение "Неподдерживаемый идентификатор " + ИдМногострочнойЧасти + " многострочной части";
	КонецЕсли;
	
КонецФункции

Функция СмещениеНачалаМногострочнойЧасти(ИдМногострочнойЧасти)
	
	Если ИдМногострочнойЧасти = ИдМСЧ_Раздел1 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	// Защита от случая, когда передают многострочную часть с количеством строк менее чем исходное.
	Если ИсходноеКоличествоСтрокГруппы > ТекущееКоличествоСтрокГруппы Тогда
		Для Инд = 1 По (ИсходноеКоличествоСтрокГруппы - ТекущееКоличествоСтрокГруппы) Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
		ОбластьЯчейкиПоследнейСтроки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
		
		ВысотаСтроки = ВысотаСтрокиМногострочнойЧасти(ИмяГруппы);
		СмещениеСтроки = СмещениеНачалаМногострочнойЧасти(ИмяГруппы);
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейкиПоследнейСтроки.Верх - СмещениеСтроки;
		НомерНижнЯчейкиОбласти = ОбластьЯчейкиПоследнейСтроки.Верх - СмещениеСтроки + ВысотаСтроки - 1;
		
		ПрототипДобавляемойОбласти = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
		ПомежуточныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для НомерНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
			ПомежуточныйТабличныйДокумент.Вывести(ПрототипДобавляемойОбласти);
			
			// Переопределение имен областей вставленной строки.
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				ИмяОбластиПрототипа = ИмяКолонки + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
				НазначаемоеИмяОбластиДобавленнойСтроки = ИмяКолонки + "_" + Формат(НомерНовойСтроки, "ЧГ=0");
				
				ОбластьДобавленнойСтроки = ПомежуточныйТабличныйДокумент.Области[ИмяОбластиПрототипа];
				ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
				
				Если ОбластьДобавленнойСтроки.СодержитЗначение = Истина Тогда
					ОбластьДобавленнойСтроки.Очистить();
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ВставляемаяОбласть = ПомежуточныйТабличныйДокумент.Область(1, , ПомежуточныйТабличныйДокумент.ВысотаТаблицы, );
		ПозицияВставки = ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + 1, );
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ПозицияВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	// Вывод значений показателей по строкам.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
			
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
			ИмяЯчейки                = КолонкаТаблицы.Имя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
			
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	мСтруктураМногострочныхРазделов[ИмяГруппы] = СтруктураГруппы.Скопировать();
	
КонецПроцедуры

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяЯчейки = ИмяКолонки + "_" + Формат(НСтр, "ЧГ=0");
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Расчет(ПерересчитываемыйРаздел = "") Экспорт
	
	ЭтоЭлементСлужебногоИнтерфейсаФормы = Истина;
	
КонецПроцедуры

Процедура Очистить() Экспорт
	
	Если ОчиститьОтчет() Тогда
		РегламентированнаяОтчетность.роОчиститьВариантыЗаполнения(ЭтаФорма);
		РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
		РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

//+ Иванов А.Б. 2016-04-15
//Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина)
Функция ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина, ивИмяСтраницы = Неопределено)
//- Иванов А.Б. 2016-04-15

	
	Если ЗапрашиватьПодтверждение Тогда
		Ответ = Вопрос("Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.Строки Цикл
		//+ Иванов А.Б. 2016-04-15
		Если ЗначениеЗаполнено(ивИмяСтраницы) 
			И СтрокаУровня1.ИмяСтраницы <> ивИмяСтраницы Тогда
			Продолжить;
		Конецесли;
		//- Иванов А.Б. 2016-04-15
		
		Если СтрокаУровня1.ИмяСтраницы <> "Титульный" Тогда
			ОчиститьТабличноеПоле(ЭлементыФормы["ПолеТабличногоДокумента" + СтрокаУровня1.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;
		Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
		КонецЕсли;
		ПанельРаздела = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
		Если ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
			РегламентированнаяОтчетность.роПоказатьСтатикСтраницРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	ЗаполнитьДатуПодписи();
	
	Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции

// Очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле) Экспорт
	
	ИмяРаздела = Сред(ВыбТабличноеПоле.Имя, 24);
	
	ЦветЗаполняетсяАвтоАрифметика = мСтруктураЦветовРаскраски._4;
	
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.роОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПоле);
	
	Для Каждого МногострочнаяЧасть Из мСтруктураМногострочныхРазделов Цикл
		ИдМСЧ = МногострочнаяЧасть.Ключ;
		РасположениеМСЧ = Неопределено;
		РасположениеМСЧ = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдМСЧ);
		ОчищатьМногострочнуюЧасть = (РасположениеМСЧ = ВыбТабличноеПоле);
		
		Если ОчищатьМногострочнуюЧасть Тогда
			СтруктураМногострочнойЧасти = МногострочнаяЧасть.Значение;
			ИсходноеКоличествоСтрок = мСтруктураИсхКолвоСтрокРазделов[ИдМСЧ];
			
			Если СтруктураМногострочнойЧасти.Количество() > ИсходноеКоличествоСтрок Тогда
				
				ВысотаСтроки = ВысотаСтрокиМногострочнойЧасти(ИдМСЧ);
				СмещениеСтроки = СмещениеНачалаМногострочнойЧасти(ИдМСЧ);
				
				КоличествоСтрокКУдалению = СтруктураМногострочнойЧасти.Количество() - ИсходноеКоличествоСтрок;
				
				Для Инд = 0 По (КоличествоСтрокКУдалению - 1) Цикл
					Постфикс = "_" + Формат(СтруктураМногострочнойЧасти.Количество() - Инд, "ЧГ=0");
					
					ИмяПервойЯчейкиУдаляемойСтроки = СтруктураМногострочнойЧасти.Колонки[0].Имя + Постфикс;
					
					УдаляемаяОбластьВерх = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки].Верх - СмещениеСтроки;
					УдаляемаяОбластьНиз  = УдаляемаяОбластьВерх + ВысотаСтроки - 1;
					
					УдаляемаяОбласть = ВыбТабличноеПоле.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
					
					ВыбТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураМногострочнойЧасти.Очистить();
			Для Инд = 1 По ИсходноеКоличествоСтрок Цикл
				СтруктураМногострочнойЧасти.Добавить();
			КонецЦикла;
			ВывестиРазделВТабличныйДокумент(ИдМСЧ, СтруктураМногострочнойЧасти);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя = ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраниц()
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("НастройкиОтчета", ЭтаФорма, "дляВыбораСтраницОтчета");
	
	мДеревоВыбранныхСтраниц = "";
	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();
	
	ФормаНастройкиОтчета.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиОтчета.мПараметры.РазрешитьВстроеннуюПечать = Истина;
	ФормаНастройкиОтчета.мПараметры.ПроверкаСоотношений = Истина;
	
	РезультатВыбора = ФормаНастройкиОтчета.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = РезультатВыбора;
		СформироватьПодменюПечать();
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Для Инд = СтрДлина(ИНН) + 1 По 12 Цикл
			ИНН = ИНН + "-";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
			КПП = СокрЛП(ОбособленноеПодразделение.КПП);
			ПТД_Титульный.Области.ОКТМО.Значение = СокрЛП(ОбособленноеПодразделение.КодПоОКТМО);
			
		Иначе
			КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
			
			КодНО = СведенияОбОрганизации.КодНО;
			Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
				КодНО = " " + КодНО;
			КонецЦикла;
			Для Инд = 1 По 4 Цикл
				ПТД_Титульный.Области["НалоговыйОрган" + Инд].Значение = Сред(КодНО, Инд, 1);
			КонецЦикла;
			
			ПТД_Титульный.Области.ОКТМО.Значение = СокрЛП(СведенияОбОрганизации.ОКТМО);
			
		КонецЕсли;
		
		Для Инд = СтрДлина(КПП) + 1 По 9 Цикл
			КПП = КПП + "-";
		КонецЦикла;
		
		Для Сч=1 По 9 Цикл
			ПроставитьНаВсехЛистах("ИНН" + Сч + "_", ИНН);
			ПроставитьНаВсехЛистах("КПП" + Сч + "_", КПП);
		КонецЦикла;
		
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
		Иначе
			Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
			Иначе
				НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			КонецЕсли;
		КонецЕсли;
		
		ПТД_Титульный.Области.НаимОрг.Значение = НаименованиеОрганизации;
		
		ПТД_Титульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах()
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НалоговыйОрган");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	КПП = СтрЗаменить(КПП, "-", "");
	
	СведенияОПредставителе = РегламентированнаяОтчетность.ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			// Поле подписанта остается пустым.
		Иначе
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
		Подписант                            = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя                = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ПТД_Титульный.Области.ПрПодп.Значение = ТипПодписанта;
	ПТД_Титульный.Области.ОргПодписант.Значение = Подписант;
	ПТД_Титульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ПТД_Титульный.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить(Автосохранение = Ложь) Экспорт
	
	Вариант = ВидДокумента * НомерКорректировки;
	
	КодИФНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "НалоговыйОрган");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма, КодИФНС, Автосохранение, Вариант, , КПП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мСохраненныйДок.КПП                        = КПП;
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.Периодичность              = мПериодичность;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	мСохраненныйДок.КодИМНС                    = КодИФНС;
	мСохраненныйДок.Вид                        = Вариант;
	
	мВариант = Вариант;
	
	мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	РегламентированнаяОтчетность.роОбновитьСтруктуруМногостраничныхРазделов(ЭтаФорма);
	
	ПоказателиОтчета = Новый Структура;
	
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если Не мСтруктураМногостраничныхРазделов.Свойство(СтраницаПанели.Имя) Тогда
			ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
			ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличногоПоля];
			
			ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
			ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
		КонецЕсли;
	КонецЦикла;
	
	СписокСохранения = Новый Структура;
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", мСтруктураМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", мАвтоВыборКодов);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	
	СписокСохранения.Вставить("ОкружениеСохранения", "РО");
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	ХранилищеДереваНастройкиСтраниц = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДереваНастройкиСтраниц;
	
	Попытка
		мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Предупреждение(ОбщегоНазначенияЗК.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		РегламентированнаяОтчетность.СкрытьКартинкуСохранение(ЭтаФорма);
		Возврат Ложь;
	КонецПопытки;
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	КлючУникальности = мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции

Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из ТабличноеПоле.Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = мСохраненныйДок.Комментарий;
	
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	Если ДанныеМногострочныхРазделов <> Неопределено Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИдМСЧ = ЭлементСтруктуры.Ключ;
			ДанныеМСЧ = ЭлементСтруктуры.Значение;
			ВывестиРазделВТабличныйДокумент(ИдМСЧ, ДанныеМСЧ);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
			АктивнаяСтраница = ТаблицаМногостраничногоДокумента.Найти(Истина, "АктивнаяСтраница");
			ИндАктивнаяСтраница = ТаблицаМногостраничногоДокумента.Индекс(АктивнаяСтраница);
			РегламентированнаяОтчетность.роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(ЭтаФорма, ИндАктивнаяСтраница, ЭлементСтруктуры.Ключ, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	мПроверятьСоотношенияПриПечатиИВыгрузки = ?(мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь,
		мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", мАвтоВыборКодов);
	мАвтоВыборКодов = ?(мАвтоВыборКодов = Неопределено, Ложь, мАвтоВыборКодов);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	ФлажокОтклАвтоРасчет = Автозаполнение;
	
	ОбособПодразделение = Неопределено;
	Если СписокСохранения.Свойство("ОбособленноеПодразделение", ОбособПодразделение) Тогда
		ЭлементыФормы.ОбособленноеПодразделение.Значение = ЭлементыФормы.ОбособленноеПодразделение.ОграничениеТипа.ПривестиЗначение(ОбособПодразделение);
	КонецЕсли;
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		ПредставлениеДанных = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекТабличноеПоле, "ПредставлениеДанных");
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			ИмяСтраницыПанели   = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");
			
			Если мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаМногостраничногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекТабличноеПоле.Области.Найти(ИмяПоказателя) <> Неопределено Тогда
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", мПечатьБезШтрихкодаРазрешена) Тогда
		мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	
	УстановитьФорматВыводаВПоляхВвода();
	
	ВывестиНомерКорректировкиНаТитульныйЛист();
	
	РегламентированнаяОтчетность.роПоказатьСтраницыОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

Процедура Выгрузить() Экспорт
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь);
	КонецЕсли;
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	
	ВыгрузкаУспешна = НовыйДок.ПолучитьФорму(, ЭтаФорма).СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередВыгрузкойРегламентированногоОтчета(ЭтаФорма, Отказ, ПроверятьБлокировки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед выгрузкой отчета требуется сохранить введеную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если ЕдиницаИзмерения <> Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
			Сообщить("Перед выгрузкой необходимо установить единицу измерения ""в рублях"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
		Если ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщить("Перед выгрузкой необходимо установить точность ""0"".", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	Параметры = ПараметрыЭлектронногоПредставления();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ВыгрузкаВозможна(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, Параметры);
	
	Если НЕ ДанныеВыгрузкиКорректны(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры);
	
	Возврат Истина;
	
КонецФункции

Процедура ИзвлечьСохраненныеПоказателиОтчета()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	мСтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЭлектронногоПредставления()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	Параметры = Новый Структура;
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Параметры.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	Параметры.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	
	Параметры.Вставить("ДатаДок",  Формат(РабочаяДата, "ДФ=дд.ММ.гггг"));
	Параметры.Вставить("Период",   СокрЛП(Титульный.Период));
	Параметры.Вставить("ОтчетГод", СокрЛП(Титульный.ОтчетГод));
	
	Параметры.Вставить("КодНО",   СокрЛП(Титульный.НалоговыйОрган));
	Параметры.Вставить("НомКорр", Строка(мСохраненныйДок.Вид));
	Параметры.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	Параметры.Вставить("ОКТМО", СокрЛП(Титульный.ОКТМО));
	Параметры.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	Если ЭтоПБОЮЛ Тогда
		Параметры.Вставить("ИННФЛ", СокрЛП(Организация.ИНН));
		
		ФИО = РазложитьФИО(Титульный.НаимОрг);
		Параметры.Вставить("ФЛФамилия",  ФИО.Фамилия);
		Параметры.Вставить("ФЛИмя",      ФИО.Имя);
		Параметры.Вставить("ФЛОтчество", ФИО.Отчество);
	Иначе
		Параметры.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
		Параметры.Вставить("ИННОрг",  СокрЛП(Организация.ИНН));
		Параметры.Вставить("КППОрг",  СокрЛП(Титульный.КПП1));
	КонецЕсли;
	
	Параметры.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РазложитьФИО(Титульный.ОргПодписант);
	Параметры.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	Параметры.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	Параметры.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	Параметры.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	Параметры.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	
	Параметры.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДФЛ6");
	Параметры.Вставить("ДатаНачалаНалоговогоПериода", НачалоГода(мСохраненныйДок.ДатаОкончания));
	Параметры.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDFL6");
	Параметры.Вставить("КодИФНСПосредника", СокрЛП(Организация.КодИФНСПолучателя));
	Параметры.Вставить("ИдФайл", СформироватьИдФайл(Параметры));
	
	Возврат Параметры;
	
КонецФункции

Функция СформироватьИдФайл(Параметры)
	
	Возврат Параметры.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПосредника), Параметры.КодИФНСПосредника, Параметры.КодНО)
			+ "_" + Параметры.КодНО
			+ "_" + ?(Параметры.Свойство("ЭтоПБОЮЛ") И Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННФЛ), СокрЛП(Параметры.ИННОрг) + СокрЛП(Параметры.КППОрг))
			+ "_" + Формат(РабочаяДата, "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	Параметры = ПараметрыЭлектронногоПредставления();
	Если НЕ ВыгрузкаВозможна(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, Параметры);
	
	Если НЕ ДанныеВыгрузкиКорректны(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки());
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ИмяМакетаСтруктурыВыгрузки()
	
	Возврат "СхемаВыгрузки501";
	
КонецФункции

Функция ВыгрузкаВозможна(Параметры)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(Параметры, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел2(Параметры, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист(Параметры, СтатусПроверки)
	
	ЭтоПБОЮЛ = Параметры.ЭтоПБОЮЛ;
	
	РазрешенныеКодыПериода = "21,31,33,34,51,52,53,90"; // ограничено форматом выгрузки
	РазрешенныеКодыПоМесту = "120,125,126,212,213,220,320,335"; // ограничено форматом выгрузки
	
	Если НЕ ЗначениеЗаполнено(Параметры.Период) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указан код налогового периода", "Титульный", "Период1");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(Параметры.Период, РазрешенныеКодыПериода) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе указан код налогового периода, не предусмотренный порядком заполнения", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	КодНО = СокрЛП(Параметры.КодНО);
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указан код налогового органа", "Титульный", "НалоговыйОрган1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(КодНО) <> 4 ИЛИ НЕ ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(КодНО) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе указан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган1");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указан код места, по которому представляется расчет", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(Параметры.ПоМесту, РазрешенныеКодыПоМесту) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе указан код места, по которому представляется расчет, не предусмотренный порядком заполнения", "Титульный", "ПоМесту1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ОКТМО = СокрЛП(Параметры.ОКТМО);
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		ОписаниеОшибки = "На титульном листе не указан код по ОКТМО.";
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Титульный", "ОКТМО");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
		ОписаниеОшибки = "На титульном листе указан код по ОКТМО, не соответствующий Общероссийскому классификатору территорий муниципальных образований.";
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Титульный", "ОКТМО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.ИННФЛ) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указан ИНН индивидуального предпринимателя", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.ИННФЛ) <> 12 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе неверно указан ИНН индивидуального предпринимателя", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ФЛФамилия) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указана фамилия индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Параметры.ФЛИмя) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указано имя индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Параметры.ИННОрг) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указан ИНН организации", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.ИННОрг) <> 10 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе неверно указан ИНН организации", "Титульный", "ИНН1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.КППОрг) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указан КПП организации", "Титульный", "КПП1_1");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе неверно указан КПП организации", "Титульный", "КПП1_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.НаимОрг) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указано наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ЭтоПБОЮЛ И Параметры.ПрПодп = "1");
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(Параметры.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Параметры.ПодпИмя) Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПрПодп = "2" И ПустаяСтрока(Параметры.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не указано наименование документа, удостоверяющего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел2(Параметры, СтатусПроверки)
	
	ДанныеРаздела = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	Инд = 1;
	Пока ДанныеРаздела.Свойство("П000020010001_" + СтрокаЧГ0(Инд)) Цикл
		
		НомерСтроки = СтрокаЧГ0(Инд);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000020010001_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000020011001_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000020012001_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000020013001_" + НомерСтроки])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000020014001_" + НомерСтроки]);
		
		Если СтрокаЗаполнена Тогда
			Строка100 = ДанныеРаздела["П000020010001_" + НомерСтроки];
			Если НЕ ЗначениеЗаполнено(Строка100) Тогда
				ОписаниеОшибки = "В группе строк " + НомерСтроки + " раздела 2 в строке 100 не указана дата фактического получения дохода";
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел2", "П000020010001_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка100 < '1900-01-01' ИЛИ Строка100 > '2099-12-31' Тогда
				ОписаниеОшибки = "В группе строк " + НомерСтроки + " раздела 2 в строке 100 указана дата, выходящая за пределы периода с 01.01.1900 по 31.12.2099";
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел2", "П000020010001_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка110 = ДанныеРаздела["П000020011001_" + НомерСтроки];
			Если НЕ ЗначениеЗаполнено(Строка110) Тогда
				ОписаниеОшибки = "В группе строк " + НомерСтроки + " раздела 2 в строке 110 не указана дата удержания налога";
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел2", "П000020011001_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка110 < '1900-01-01' ИЛИ Строка110 > '2099-12-31' Тогда
				ОписаниеОшибки = "В группе строк " + НомерСтроки + " раздела 2 в строке 110 указана дата, выходящая за пределы периода с 01.01.1900 по 31.12.2099";
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел2", "П000020011001_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка120 = ДанныеРаздела["П000020012001_" + НомерСтроки];
			Если НЕ ЗначениеЗаполнено(Строка120) Тогда
				ОписаниеОшибки = "В группе строк " + НомерСтроки + " раздела 2 в строке 120 не указан срок перечисления налога";
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел2", "П000020012001_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли Строка120 < '1900-01-01' ИЛИ Строка120 > '2099-12-31' Тогда
				ОписаниеОшибки = "В группе строк " + НомерСтроки + " раздела 2 в строке 120 указана дата, выходящая за пределы периода с 01.01.1900 по 31.12.2099";
				РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, ОписаниеОшибки, "Раздел2", "П000020012001_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(Параметры, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция ДанныеВыгрузкиКорректны(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ДанныеВыгрузкиКорректны(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетность.СвойствоОпределено(Параметры, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = Параметры.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Параметры, Стр);
			Иначе
				ЗаполнитьДаннымиУзел(Параметры, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетность.СвойствоОпределено(Параметры, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетность.СвойствоОпределено(Параметры, Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(Параметры, УзелРодитель)
	
	Раздел1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	Узел_ОбобщПоказ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОбобщПоказ");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_ОбобщПоказ);
	
	ПрототипУзла_СумСтавка = ПолучитьПодчиненныйЭлемент(Узел_ОбобщПоказ, "СумСтавка");
	ЕстьСведенияПоСтавкам = Ложь;
	
	Инд = 1;
	Пока РегламентированнаяОтчетность.СвойствоОпределено(Раздел1, "П000010001001_" + Формат(Инд, "ЧГ=0")) Цикл
		Постфикс = "_" + СтрокаЧГ0(Инд);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(Раздел1["П000010001001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел1["П000010002001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел1["П000010002501" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел1["П000010003001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел1["П000010004001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел1["П000010004501" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел1["П000010005001" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			ЕстьСведенияПоСтавкам = Истина;
			
			Узел_СумСтавка = НовыйУзелИзПрототипа(ПрототипУзла_СумСтавка);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "Ставка",       Раздел1["П000010001001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "НачислДох",    Раздел1["П000010002001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "НачислДохДив", Раздел1["П000010002501" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "ВычетНал",     Раздел1["П000010003001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "ИсчислНал",    Раздел1["П000010004001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "ИсчислНалДив", Раздел1["П000010004501" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумСтавка, "АвансПлат",    Раздел1["П000010005001" + Постфикс]);
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	Если ЕстьСведенияПоСтавкам Тогда
		УдалитьУзел(ПрототипУзла_СумСтавка);
	Иначе
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "Ставка",       0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "НачислДох",    0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "НачислДохДив", 0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "ВычетНал",     0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "ИсчислНал",    0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "ИсчислНалДив", 0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумСтавка, "АвансПлат",    0);
	КонецЕсли;
	
	Раздел2 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2;
	
	Узел_ДохНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохНал");
	
	ПрототипУзла_СумДата = ПолучитьПодчиненныйЭлемент(Узел_ДохНал, "СумДата");
	ЕстьСведенияПоДатам = Ложь;
	
	Инд = 1;
	Пока РегламентированнаяОтчетность.СвойствоОпределено(Раздел2, "П000020010001_" + Формат(Инд, "ЧГ=0")) Цикл
		Постфикс = "_" + СтрокаЧГ0(Инд);
		
		СтрокаЗаполнена = ЗначениеЗаполнено(Раздел2["П000020010001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел2["П000020011001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел2["П000020012001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел2["П000020013001" + Постфикс])
		              ИЛИ ЗначениеЗаполнено(Раздел2["П000020014001" + Постфикс]);
		
		Если СтрокаЗаполнена Тогда
			ЕстьСведенияПоДатам = Истина;
			
			Узел_СумДата = НовыйУзелИзПрототипа(ПрототипУзла_СумДата);
			УстановитьЗначениеЭлемента(Узел_СумДата, "ДатаФактДох",  Раздел2["П000020010001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумДата, "ДатаУдержНал", Раздел2["П000020011001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумДата, "СрокПрчслНал", Раздел2["П000020012001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумДата, "ФактДоход",    Раздел2["П000020013001" + Постфикс]);
			УстановитьЗначениеЭлемента(Узел_СумДата, "УдержНал",     Раздел2["П000020014001" + Постфикс]);
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
	Если ЕстьСведенияПоДатам Тогда
		УдалитьУзел(ПрототипУзла_СумДата);
	Иначе
		УстановитьЗначениеЭлемента(ПрототипУзла_СумДата, "ДатаФактДох",  Параметры.ДатаНачалаНалоговогоПериода);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумДата, "ДатаУдержНал", Параметры.ДатаНачалаНалоговогоПериода);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумДата, "СрокПрчслНал", Параметры.ДатаНачалаНалоговогоПериода);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумДата, "ФактДоход",    0);
		УстановитьЗначениеЭлемента(ПрототипУзла_СумДата, "УдержНал",     0);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + ПредставлениеПоказателя(Стр) + """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ЕстьАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	Если ЗначениеЗаполнено(Узел.ЗначениеПоУмолчанию) И Лев(Узел.ЗначениеПоУмолчанию, 1) <> "&" Тогда
		Результат = Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение)
		ИЛИ НЕ ЗначениеЗаполнено(Число(Узел.Значение));
		
	Иначе
		Результат = НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		КонецЕсли;
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		РегламентированнаяОтчетность.роСообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось вычислить выражение-условие: """ + Условие + """!", "Титульный", "");
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции
 
Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Функция ЕстьАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазложитьФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

// Активизирует область поля табличного документа формы,
// соответствующей заданному показателю. При необходимости,
// процедура устанавливает в качестве активной ту страницу раздела, на которой
// находится показатель.
//
// Параметры:
//	Ячейка - СтрокаТаблицыЗначений с "координатами" показателя
//
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетность.роАктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

Процедура Печать(Знач ВидПечати, ЧтоИскать = Неопределено) Экспорт
	
	Если ЧтоИскать = Неопределено Тогда
		Отказ = Ложь;
		РегламентированнаяОтчетность.ПередПечатьюРегламентированногоОтчета(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтоИскать = Неопределено И НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Предупреждение("Перед формированием печатных форм необходимо определить в системе принтер и
		               |задать его в качестве используемого по умолчанию!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, мБезОткрытияФормы);
	КонецЕсли;
	
	мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	мРежимПечати = Истина;
	
	ПечататьРаздел1 = Ложь;
	ПечататьРаздел2 = Ложь;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Если ЧтоИскать <> Неопределено Тогда
			Пометка = 1;
		Иначе
			Пометка = СтрокаУровня1.ВыводНаПечать;
		КонецЕсли;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если ЧтоИскать = Неопределено Тогда
			Если ИмяСтраницыПанели = "Раздел1" Тогда
				ПечататьРаздел1 = (Пометка <> 0);
				Продолжить;
			ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
				ПечататьРаздел2 = (Пометка <> 0);
				Продолжить;
			ИначеЕсли Пометка = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
		
		ВывестиНаПечатьРаздел(СтруктураПараметров);
	КонецЦикла;
	
	Если ПечататьРаздел1 ИЛИ ПечататьРаздел2 Тогда
		СтрокаНастроек = мДеревоВыбранныхСтраниц.Строки.Найти("Раздел1", "ИмяСтраницы");
		
		ИмяСтраницыПанели  = СтрокаНастроек.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаНастроек.Представление;
		ОриентацияЛиста    = СтрокаНастроек.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаНастроек.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаНастроек.ИмяОбластиТабличногоПоля;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЧтоИскать",          ЧтоИскать);
		
		ВывестиНаПечатьБланк_Раздел12(СтруктураПараметров, ПечататьРаздел1, ПечататьРаздел2);
		
	КонецЕсли;
	
	Если ЧтоИскать = Неопределено Тогда
		РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати);
	КонецЕсли;
	
	мРежимПечати = Ложь;
	
КонецПроцедуры

Процедура ВывестиНаПечатьРаздел(ПараметрыПечати)
	
	ИмяРаздела = Сред(ПараметрыПечати.ИмяТабличногоПоля, 24);
	
	Если ПараметрыПечати.ЧтоИскать <> Неопределено Тогда
		РегламентированнаяОтчетность.роНайтиЗначение(ЭтаФорма, ПараметрыПечати);
	Иначе
		ВывестиНаПечатьБланк(ПараметрыПечати, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНаПечатьБланк(ПараметрыПечати, ИмяРаздела)
	
	Перем ТаблицаСтраницРаздела;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	ИмяМакета = ПрефиксИмениМакетаПечатногоБланка() + ИмяРаздела;
	ПечатьНаМашиночитаемомБланке = ЭтотОбъект.Метаданные().Макеты.Найти(ПрефиксИмениМакетаПечатногоБланка() + ИмяРаздела) <> Неопределено;
	
	Если ПечатьНаМашиночитаемомБланке Тогда
		ЗаполняемыйМакет = ПолучитьМакет(ИмяМакета);
		ЗаполнитьМакетМЧБ(ПараметрыПечати, ЗаполняемыйМакет);
		СписокПечатныхФорм.Добавить(ЗаполняемыйМакет);
	Иначе
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, ПараметрыПечати);
	КонецЕсли;
	
	ТабличныйДокументРаздела = ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].ПолучитьОбласть();
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Очистить();
		ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Вывести(СформированныйЛист.Значение);
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, ПараметрыПечати);
	КонецЦикла;
	
	ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Вывести(ТабличныйДокументРаздела);
	
КонецПроцедуры

Процедура ВывестиНаПечатьБланк_Раздел12(ПараметрыПечати, ВыводитьРаздел1, ВыводитьРаздел2)
	
	// Подготовка макета.
	ИмяМакета = "ПечатныйБланк2016Кв1_Раздел12";
	ИсходныйМакет = ПолучитьМакет(ИмяМакета);
	Для Каждого ОбластьМакета Из ИсходныйМакет.Области Цикл
		Если ОбластьМакета.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Если ОбластьМакета.СодержитЗначение = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьМакета.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбластьМакета.ГраницаСверху.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
				ОбластьМакета.Текст = "-";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 1 По 12 Цикл
		ИсходныйМакет.Области["ИНН1_" + Инд].Текст = ПТД_Раздел2.Области["ИНН1_" + Инд].Значение;
	КонецЦикла;
	
	Для Инд = 1 По 9 Цикл
		ИсходныйМакет.Области["КПП1_" + Инд].Текст = ПТД_Раздел2.Области["КПП1_" + Инд].Значение;
	КонецЦикла;
	
	ИсходныйМакет.Области.ДатаПодписиПолная.Текст = ПТД_Раздел2.Области.ДатаПодписиПолная.Значение;
	
	// Подготовка сведений разделов.
	СведенияРаздела1 = СведенияЗаполненнойМногострочнойЧасти(ИдМСЧ_Раздел1);
	СведенияРаздела2 = СведенияЗаполненнойМногострочнойЧасти(ИдМСЧ_Раздел2);
	
	КоличествоСтрок_Раздел1 = СведенияРаздела1.Количество();
	КоличествоСтрок_Раздел2 = СведенияРаздела2.Количество();
	
	КоличествоСтрокНаЛист_Раздел1 = 1;
	КоличествоСтрокНаЛист_Раздел2 = 5;
	
	КоличествоЛистов_Раздел1 = ?(ВыводитьРаздел1, Цел((КоличествоСтрок_Раздел1 - 1) / КоличествоСтрокНаЛист_Раздел1) + 1, 0);
	КоличествоЛистов_Раздел2 = ?(ВыводитьРаздел2, Цел((КоличествоСтрок_Раздел2 - 1) / КоличествоСтрокНаЛист_Раздел2) + 1, 0);
	
	ОбщееКоличествоЛистов = Макс(КоличествоЛистов_Раздел1, КоличествоЛистов_Раздел2);
	
	// Заполнение бланков.
	СписокПечатныхФорм = Новый СписокЗначений;
	ВыведеныИтоги = Ложь;
	
	Для НомерСтраницы = 1 По ОбщееКоличествоЛистов Цикл
		ЗаполняемыйМакет = ИсходныйМакет.ПолучитьОбласть();
		
		Если ВыводитьРаздел1 Тогда
			Если НЕ ВыведеныИтоги Тогда
				ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010006001", ПТД_Раздел1.Области.П000010006001.Значение);
				ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010007001", ПТД_Раздел1.Области.П000010007001.Значение);
				ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010008001", ПТД_Раздел1.Области.П000010008001.Значение);
				ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010009001", ПТД_Раздел1.Области.П000010009001.Значение);
				ВыведеныИтоги = Истина;
			КонецЕсли;
			
			Для Инд = 1 По КоличествоСтрокНаЛист_Раздел1 Цикл
				ИндексСтроки = (НомерСтраницы - 1) * КоличествоСтрокНаЛист_Раздел1 + Инд - 1;
				Если ИндексСтроки < КоличествоСтрок_Раздел1 Тогда
					Постфикс = "_" + СтрокаЧГ0(Инд);
					ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010001001" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010001001);
					ВывестиДробноеЧислоН_2(ЗаполняемыйМакет, "П000010002001" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010002001);
					ВывестиДробноеЧислоН_2(ЗаполняемыйМакет, "П000010002501" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010002501);
					ВывестиДробноеЧислоН_2(ЗаполняемыйМакет, "П000010003001" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010003001);
					ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010004001" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010004001);
					ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010004501" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010004501);
					ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000010005001" + Постфикс, СведенияРаздела1[ИндексСтроки].П000010005001);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВыводитьРаздел2 Тогда
			Для Инд = 1 По КоличествоСтрокНаЛист_Раздел2 Цикл
				ИндексСтроки = (НомерСтраницы - 1) * КоличествоСтрокНаЛист_Раздел2 + Инд - 1;
				Если ИндексСтроки < КоличествоСтрок_Раздел2 Тогда
					Постфикс = "_" + СтрокаЧГ0(Инд);
					ВывестиДату(ЗаполняемыйМакет, "П000020010001" + Постфикс, СведенияРаздела2[ИндексСтроки].П000020010001);
					ВывестиДату(ЗаполняемыйМакет, "П000020011001" + Постфикс, СведенияРаздела2[ИндексСтроки].П000020011001);
					ВывестиДату(ЗаполняемыйМакет, "П000020012001" + Постфикс, СведенияРаздела2[ИндексСтроки].П000020012001);
					ВывестиДробноеЧислоН_2(ЗаполняемыйМакет, "П000020013001" + Постфикс, СведенияРаздела2[ИндексСтроки].П000020013001);
					ВывестиЦелоеЧисло(ЗаполняемыйМакет, "П000020014001" + Постфикс, СведенияРаздела2[ИндексСтроки].П000020014001);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПреобразоватьБланкДляExcel(ЗаполняемыйМакет);
		
		СписокПечатныхФорм.Добавить(ЗаполняемыйМакет);
	КонецЦикла;
	
	// Вывод бланка на печать.
	ТабличныйДокументРаздела = ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].ПолучитьОбласть();
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Очистить();
		ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Вывести(СформированныйЛист.Значение);
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма, ПараметрыПечати);
	КонецЦикла;
	
	ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Очистить();
	ЭлементыФормы[ПараметрыПечати.ИмяТабличногоПоля].Вывести(ТабличныйДокументРаздела);
	
КонецПроцедуры

Функция СведенияЗаполненнойМногострочнойЧасти(ИдМСЧ)
	
	ТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдМСЧ);
	СведенияРаздела = мСтруктураМногострочныхРазделов[ИдМСЧ].СкопироватьКолонки();
	
	ИмяОпорногоПоказателя = СведенияРаздела.Колонки[0].Имя;
	
	НомерСтроки = 1;
	Пока ТабличноеПоле.Области.Найти(ИмяОпорногоПоказателя + "_" + СтрокаЧГ0(НомерСтроки)) <> Неопределено Цикл
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаЗаполнена = Ложь;
		Для Каждого Колонка Из СведенияРаздела.Колонки Цикл
			ИмяПоказателя = Колонка.Имя;
			Если ЗначениеЗаполнено(ТабличноеПоле.Области[ИмяПоказателя + Постфикс].Значение) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаЗаполнена Тогда
			СтрокаСведений = СведенияРаздела.Добавить();
			Для Каждого Колонка Из СведенияРаздела.Колонки Цикл
				ИмяПоказателя = Колонка.Имя;
				СтрокаСведений[ИмяПоказателя] = ТабличноеПоле.Области[ИмяПоказателя + Постфикс].Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СведенияРаздела;
	
КонецФункции

Процедура ВывестиЦелоеЧисло(ЗаполняемыйМакет, ИмяПоказателя, Значение)
	
	ПредставлениеЧисла = Формат(Значение, "ЧН=; ЧГ=0");
	
	Для Инд = 1 По СтрДлина(ПредставлениеЧисла) Цикл
		Постфикс = "_" + СтрокаЧГ0(Инд);
		ВыводимыйСимвол = Сред(ПредставлениеЧисла, Инд, 1);
		
		ЗаполняемыйМакет.Области[ИмяПоказателя + Постфикс].Текст = ВыводимыйСимвол;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДробноеЧислоН_2(ЗаполняемыйМакет, ИмяПоказателя, Значение)
	
	ПредставлениеЧисла = Формат(Значение, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	
	ПредставлениеЦелойЧасти = Лев(ПредставлениеЧисла, СтрДлина(ПредставлениеЧисла) - 3);
	Если ЗначениеЗаполнено(Значение) Тогда
		ПредставлениеДробнойЧасти = Прав(ПредставлениеЧисла, 2);
	Иначе
		ПредставлениеДробнойЧасти = "";
	КонецЕсли;
	
	Для Инд = 1 По СтрДлина(ПредставлениеЦелойЧасти) Цикл
		Постфикс = "_" + СтрокаЧГ0(Инд);
		ВыводимыйСимвол = Сред(ПредставлениеЦелойЧасти, Инд, 1);
		ЗаполняемыйМакет.Области[ИмяПоказателя + Постфикс].Текст = ВыводимыйСимвол;
	КонецЦикла;
	
	ПозицияТочки = 0;
	ПозицияПоказателя = 1;
	Пока ЗаполняемыйМакет.Области.Найти(ИмяПоказателя + "_" + СтрокаЧГ0(ПозицияПоказателя)) <> Неопределено Цикл
		Если ЗаполняемыйМакет.Области[ИмяПоказателя + "_" + СтрокаЧГ0(ПозицияПоказателя)].Текст = "." Тогда
			ПозицияТочки = ПозицияПоказателя;
			Прервать;
		КонецЕсли;
		ПозицияПоказателя = ПозицияПоказателя + 1;
	КонецЦикла;
	
	Для Инд = 1 По СтрДлина(ПредставлениеДробнойЧасти) Цикл
		Постфикс = "_" + СтрокаЧГ0(ПозицияТочки + Инд);
		ВыводимыйСимвол = Сред(ПредставлениеДробнойЧасти, Инд, 1);
		ЗаполняемыйМакет.Области[ИмяПоказателя + Постфикс].Текст = ВыводимыйСимвол;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДату(ЗаполняемыйМакет, ИмяПоказателя, Значение)
	
	ПредставлениеЗначения = Формат(Значение, "ЧН=; ЧГ=0; ДФ=dd.MM.yyyy");
	
	Для Инд = 1 По СтрДлина(ПредставлениеЗначения) Цикл
		Постфикс = "_" + СтрокаЧГ0(Инд);
		ВыводимыйСимвол = Сред(ПредставлениеЗначения, Инд, 1);
		
		ЗаполняемыйМакет.Области[ИмяПоказателя + Постфикс].Текст = ВыводимыйСимвол;
	КонецЦикла;
	
КонецПроцедуры

Функция ПрефиксИмениМакетаПечатногоБланка()
	
	Возврат "ПечатныйБланк2016Кв1_";
	
КонецФункции

Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Если Область.Имя = "Приказ" Тогда
			Область.Значение = Значение;
		Иначе
			Область.Значение = ВРЕГ(Значение);
		КонецЕсли;
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМакетМЧБ(Параметры, МакетМЧБ, ПоказателиРаздела = Неопределено)
	
	Если ПоказателиРаздела = Неопределено Тогда
		Показатели = ПоказателиТабличногоДокумента(ЭлементыФормы[Параметры.ИмяТабличногоПоля]);
	Иначе
		Показатели = ПоказателиРаздела.Скопировать();
	КонецЕсли;
	
	// Особая обработка показателей титульного листа.
	Если Параметры.ИмяТабличногоПоля = "ПолеТабличногоДокументаТитульный" Тогда
		
		// ФИО подписанта.
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// ОКВЭД.
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// ИНН.
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение) = Тип("Число") Тогда
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = Формат(Цел(РезультатПоиска.Значение), "ЧГ=0");
							СтрДообнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть), 3);
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа < ИндексТочкиЧислаНаМЧБ Тогда
									// Целая часть.
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-", "-", СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Дробная часть.
									ПрисвоитьЗначениеОбласти(Область, СтрДообнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Точка (присуствует на макете).
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
					Сообщить("Не удалось заполнить область """ + ИмяОбласти + """!");
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПреобразоватьБланкДляExcel(МакетМЧБ);
	
КонецПроцедуры

Функция ПоказателиТабличногоДокумента(ИсходныйМакет)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Процедура ИнициализироватьМеханизмыАвтозаполнения()
	
	СвойстваЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьСвойстваЗаполненияОтчета(ЭтотОбъект, мВыбраннаяФорма);
	
	РегламентированнаяОтчетность.ПрименитьСвойстваЗаполненияОтчета(ЭтаФорма, СвойстваЗаполненияОтчета);
	
КонецПроцедуры

Процедура ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИД, МинимальноеКоличествоСтрок, ТекущееКоличествоСтрок, ИмяРаздела)
	
	НовСтр = СвойстваМногострочныхЧастей.Добавить();
	НовСтр.ИД = ИД;
	НовСтр.МинимальноеКоличествоСтрок = МинимальноеКоличествоСтрок;
	НовСтр.ТекущееКоличествоСтрок = ТекущееКоличествоСтрок;
	НовСтр.Раздел = ИмяРаздела;
	
КонецПроцедуры

Процедура ЗаполнитьАвто(ВсеДанные = Истина) Экспорт
	
	Отказ = Ложь;
	РегламентированнаяОтчетность.ПередЗаполнениемРегламентированногоОтчета(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполненияОтчета) Тогда
		Предупреждение("Заполнение по данным информационной базы не предусмотрено");
		Возврат;
	КонецЕсли;
	
	// Подтверждение автоматического заполнения.
	ПрерватьАвтоЗаполнение = РегламентированнаяОтчетность.ПрерватьАвтоЗаполнениеПоДаннымИБ(ЭтаФорма);
	Если ПрерватьАвтоЗаполнение Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьОтчет();
	
	// формируем таблицу свойств многострочных частей отчета (необходима для заполнения)
	СвойстваМногострочныхЧастей = Новый ТаблицаЗначений;
	СвойстваМногострочныхЧастей.Колонки.Добавить("ИД");
	СвойстваМногострочныхЧастей.Колонки.Добавить("МинимальноеКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("ТекущееКоличествоСтрок");
	СвойстваМногострочныхЧастей.Колонки.Добавить("Раздел");
	
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИдМСЧ_Раздел1, мСтруктураИсхКолвоСтрокРазделов[ИдМСЧ_Раздел1], 0, "Раздел1");
	ОпределитьСтрокуВТаблицеСвойствМногострочныхЧастей(СвойстваМногострочныхЧастей, ИдМСЧ_Раздел2, мСтруктураИсхКолвоСтрокРазделов[ИдМСЧ_Раздел2], 0, "Раздел2");
	
	ПараметрыОтчета = РегламентированнаяОтчетность.СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ЭтаФорма);
	ПараметрыОтчета.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	ДанныеЗаполненияОтчета = РегламентированнаяОтчетность.ПолучитьДанныеЗаполненияОтчета(ЭтаФорма, , мВыбраннаяФорма, , ПараметрыОтчета);
	Если ТипЗнч(ДанныеЗаполненияОтчета) = Тип("ДеревоЗначений") Тогда
		Для Каждого СтрУровня1 Из ДанныеЗаполненияОтчета.Строки Цикл
			Для Каждого СтрУровня2 Из СтрУровня1.Строки Цикл
				СтрУровня2Имя = СтрУровня2.Имя;
				СвойстваМнЧ = СвойстваМногострочныхЧастей.Найти(СтрУровня2Имя, "ИД");
				Если СвойстваМнЧ <> Неопределено Тогда // это определение многострочного раздела
					Если СвойстваМнЧ.ТекущееКоличествоСтрок >= СвойстваМнЧ.МинимальноеКоличествоСтрок Тогда
						ВставитьДополнительнуюСтроку(СвойстваМнЧ.ИД);
					КонецЕсли;
					СвойстваМнЧ.ТекущееКоличествоСтрок = СвойстваМнЧ.ТекущееКоличествоСтрок + 1;
					НомерСтрокиСтр = Формат(СвойстваМнЧ.ТекущееКоличествоСтрок,"ЧГ=0");
					Для Каждого СтрУровня3 Из СтрУровня2.Строки Цикл
						УстановитьЗначениеПоказателя(СтрУровня3.Имя + "_" + НомерСтрокиСтр, СтрУровня3.Значение, СтрУровня1.Имя);
					КонецЦикла;
					ОбновитьСтруктуруМногострочногоРаздела(СвойстваМнЧ.ИД);
				Иначе
					// Показатель.
					Если Найти(СтрУровня2Имя, "ЧислРаботников") > 0 
						ИЛИ Найти(СтрУровня2Имя, "ЧислЖенщин") > 0
						ИЛИ Найти(СтрУровня2Имя, "ЧислИнвалидов") > 0
						ИЛИ Найти(СтрУровня2Имя, "ЧислВред") > 0 Тогда
						
						ОбластиТитульногоЛиста = ЭлементыФормы.ПолеТабличногоДокументаТитульный.Области;
						Если ОбластиТитульногоЛиста.Найти(СтрУровня2Имя) <> Неопределено Тогда
							ОбластиТитульногоЛиста[СтрУровня2Имя].Значение = СтрУровня2.Значение
						КонецЕсли;
						
					Иначе
						УстановитьЗначениеПоказателя(СтрУровня2Имя, СтрУровня2.Значение, СтрУровня1.Имя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Расчет();
	
	Модифицированность = Истина;
	
	РегламентированнаяОтчетность.ОтключитьОбработчикАвтосохранения(ЭтаФорма);
	РегламентированнаяОтчетность.ВключитьОбработчикАвтосохранения(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, Знач Значение, ИмяРаздела = Неопределено) Экспорт
	
	РегламентированнаяОтчетность.роУстановитьЗначениеПоказателя(ЭтаФорма, ИмяПоказателя, Значение);
	
КонецПроцедуры

// Устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;
	
	Если НовыйВариант = 1 Тогда
		
		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		
	ИначеЕсли НовыйВариант = 2 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;
		
		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;
		
		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		
	ИначеЕсли НовыйВариант = 3 Тогда
		
		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;
		
		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";
		
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий" + ИмяТекущейСтраницыПанели].Значение = "";
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	РегламентированнаяОтчетность.роДоступностьЭлементовВариантаЗаполнения(ЭтаФорма, НовыйВариант);
	
КонецПроцедуры

// Устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя  = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;
		
		Расчет(ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Комментарий1)
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	
	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя  = ТекущаяОбласть.Имя;
	
	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Комментарий1;
	КонецЕсли;
	
	ТекущаяОбласть.Примечание.Текст = Комментарий1;
	
КонецПроцедуры

Процедура ИнициализироватьЭУВыбораОбособленныхПодразделений()
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
		ЭлементыФормы.ОбособленноеПодразделение.Видимость = Ложь;
		ЭлементыФормы.НадписьОбособленноеПодразделение.Видимость = Ложь;
		ИмяСправочникаОбособленныхПодразделений = "Подразделения";
	Иначе
		ИмяСправочникаОбособленныхПодразделений = "ПодразделенияОрганизаций";
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти(ИмяСправочникаОбособленныхПодразделений) <> Неопределено Тогда
		ЭлементыФормы.ОбособленноеПодразделение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаОбособленныхПодразделений);
	КонецЕсли;
	ЭлементыФормы.ОбособленноеПодразделение.Значение = НезаполненноеПоздразделение();
	
КонецПроцедуры

Процедура ИнициализироватьСтруктурыДанных()
	
	мСоставПоказателей = ИмяМакетаСоставаПоказателей();
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 1000000);
	
	ИнициализироватьОписаниеМногострочныхРазделов();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);
	
	// Цвета раскраски ячеек отчета;
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	ТаблицаСтраницыРаздела = РегламентированнаяОтчетность.ПолучитьТаблицуМногостраничногоРаздела();
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мОписаниеТиповЧислоЕ = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(14, 2);
	
	мПечатныеформы = Новый СписокЗначений;
	мПечатаемыеРазделы = Новый СписокЗначений;
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("Раздел");
	ТаблицаСообщений.Колонки.Добавить("Графа");
	ТаблицаСообщений.Колонки.Добавить("Строка");
	ТаблицаСообщений.Колонки.Добавить("Страница");
	ТаблицаСообщений.Колонки.Добавить("СтрокаПП");
	ТаблицаСообщений.Колонки.Добавить("ИмяЯчейки");
	ТаблицаСообщений.Колонки.Добавить("Описание");
	
КонецПроцедуры

Процедура ИнициализироватьОписаниеМногострочныхРазделов()
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	ОписаниеТиповДата    = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповЧисло2    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0));
	ОписаниеТиповЧисло17_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	ИдМСЧ_Раздел1 = "П0000100010";
	
	КолИсхСтрокМСЧ_Раздел1 = 1; // Исходное количество строк в многострочной части раздела 1
	
	СтруктураМСЧ_Раздел1 = Новый ТаблицаЗначений;
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010001001", ОписаниеТиповЧисло2);
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010002001", ОписаниеТиповЧисло17_2);
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010002501", ОписаниеТиповЧисло17_2);
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010003001", ОписаниеТиповЧисло17_2);
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010004001", ОписаниеТиповЧисло15);
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010004501", ОписаниеТиповЧисло15);
	СтруктураМСЧ_Раздел1.Колонки.Добавить("П000010005001", ОписаниеТиповЧисло15);
	
	мСтруктураМногострочныхРазделов.Вставить(ИдМСЧ_Раздел1, СтруктураМСЧ_Раздел1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(ИдМСЧ_Раздел1, КолИсхСтрокМСЧ_Раздел1);
	
	ИдМСЧ_Раздел2 = "П0000200100";
	
	КолИсхСтрокМСЧ_Раздел2 = 3; // Исходное количество строк в многострочной части раздела 1
	
	СтруктураМСЧ_Раздел2 = Новый ТаблицаЗначений;
	СтруктураМСЧ_Раздел2.Колонки.Добавить("П000020010001", ОписаниеТиповДата);
	СтруктураМСЧ_Раздел2.Колонки.Добавить("П000020011001", ОписаниеТиповДата);
	СтруктураМСЧ_Раздел2.Колонки.Добавить("П000020012001", ОписаниеТиповДата);
	СтруктураМСЧ_Раздел2.Колонки.Добавить("П000020013001", ОписаниеТиповЧисло17_2);
	СтруктураМСЧ_Раздел2.Колонки.Добавить("П000020014001", ОписаниеТиповЧисло15);
	
	мСтруктураМногострочныхРазделов.Вставить(ИдМСЧ_Раздел2, СтруктураМСЧ_Раздел2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(ИдМСЧ_Раздел2, КолИсхСтрокМСЧ_Раздел2);
	
	// Инициализация таблиц моногострочных частей.
	Для Каждого МногострочнаяЧасть Из мСтруктураМногострочныхРазделов Цикл
		ИдМСЧ = МногострочнаяЧасть.Ключ;
		СтруктураМСЧ = МногострочнаяЧасть.Значение;
		
		ИсходноеКоличествоСтрок = Неопределено;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдМСЧ, ИсходноеКоличествоСтрок);
		
		Для Инд = 1 По ИсходноеКоличествоСтрок Цикл
			СтруктураМСЧ.Добавить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	
	Возврат РегламентированнаяОтчетность.роПолучитьТаблицуВариантовЗаполнения(ЭтаФорма, ИмяСтраницыПанели, ПолучитьЭталонную);
	
КонецФункции

Процедура КоманднаяПанельФормыПроверкаПоказателей(Кнопка)
	РегламентированнаяОтчетность.ПроверитьКонтрольныеСоотношенияВОтчете(ЭтаФорма, мСохраненныйДок, Ложь, Истина);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

Функция ПроверитьСоотношенияПоказателей(НазваниеОбработки, ОбъектКС, СтруктураПараметров) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	
	Результат = СтруктураРезультата;
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	Если НазваниеОбработки = "ПроверкаКС_1_1" Тогда
		Результат = ВыполняетсяКС_1_1(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаКС_1_2" Тогда
		Результат = ВыполняетсяКС_1_2(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаКС_1_3" Тогда
		Результат = ВыполняетсяКС_1_3(ОбъектКС, СтруктураПараметров);
	ИначеЕсли НазваниеОбработки = "ПроверкаКС_1_4" Тогда
		Результат = ВыполняетсяКС_1_4(ОбъектКС, СтруктураПараметров);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполняетсяКС_1_1(ОбработкаКС, СтруктураПараметров)
	
	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;
	
	СтруктураРезультата = НоваяСтруктураРезультатаКС();
	
	ОбщееЧислоОшибок = 0;
	ОбщееЧислоБезОшибок = 0;
	
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы    = НСтр("ru='Раздел 1 (КС 1.1)'");
	Если Месяц(мДатаКонцаПериодаОтчета) = 12 Тогда
		ОписаниеКС = НСтр("ru='Дата представления Расчета должна быть не позднее 1 апреля года, следующего за истекшим налоговым периодом'");
	Иначе
		ОписаниеКС = НСтр("ru='Дата представления Расчета должна быть не позднее последнего дня месяца, следующего за отчетным периодом'");
	КонецЕсли;
	Нарушение = НСтр("ru='п. 1.2 ст. 126, п. 2 ст. 230 НК РФ'");
	ОписаниеОшибки  = НСтр("ru='Возможно непредставление в установленный НК РФ срок Расчета'");
	
	ТитульныйДатаПодписи = ПоказательПоСтроке("ТитульныйДатаПодписи");
	
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		СсылкаНаДокумент = Стр.СсылкаНаРО;
		СведенияДокумента = СтруктураСведенийДокумента(СсылкаНаДокумент);
		
		Титульный = СведенияДокумента.ПолеТабличногоДокументаТитульный;
		ВставитьЗначениеПоказателя(Титульный, ТитульныйДатаПодписи);
		
		ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС, ОписаниеКС);
		
		ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, ТитульныйДатаПодписи, "Титульный");
		
		КС = ПоказателиКС(ДатаИзСтроки(ТитульныйДатаПодписи.Значение), СрокРасчета(), Ложь, Ложь);
		Расшифровка = ПредставлениеДляРасшифровки(КС.ЛеваяЧасть) + " <= " + ПредставлениеДляРасшифровки(КС.ПраваяЧасть);
		
		Если КС.ЛеваяЧасть <= КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ИндексПроверки = СтрокаЧГ0(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок);
		ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
		СтруктураОшибок.Вставить("Описание" + ИндексПроверки, ОписаниеОшибки);
		СтруктураОшибок.Вставить("Расшифровка" + ИндексПроверки, Расшифровка);
		СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + ИндексПроверки, ОбработкаКС.мСчетчикФормулДляРасшифровок);
		СтруктураОшибок.Вставить("ЭтоОшибка" + ИндексПроверки, ЭтоОшибка);
		СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндексПроверки, ТекстовоеПредставлениеФормулы);
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВыполняетсяКС_1_2(ОбработкаКС, СтруктураПараметров)
	
	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;
	
	СтруктураРезультата = НоваяСтруктураРезультатаКС();
	
	ОбщееЧислоОшибок = 0;
	ОбщееЧислоБезОшибок = 0;
	
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы    = НСтр("ru='Раздел 1 (КС 1.2)'");
	ОписаниеКС      = НСтр("ru='Сумма начисленного дохода (строка 020 Раздела 1) должна быть больше или равна сумме налоговых вычетов (строка 030 Раздела 1)'");
	Нарушение = НСтр("ru='ст. 126.1, ст. 210, ст. 23 НК РФ, ст. 24 НК РФ'");
	ОписаниеОшибки  = НСтр("ru='Завышена сумма налоговых вычетов'");
	
	Р1Ст20Гр01 = ПоказательПоСтроке("Р1Ст20Гр01");
	Р1Ст30Гр01 = ПоказательПоСтроке("Р1Ст30Гр01");
	
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		СсылкаНаДокумент = Стр.СсылкаНаРО;
		СведенияДокумента = СтруктураСведенийДокумента(СсылкаНаДокумент);
		
		Раздел1 = СведенияДокумента.ПолеТабличногоДокументаРаздел1;
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000010001001_");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			
			ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС, ОписаниеКС);
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст20Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст20Гр01, "Раздел1", );
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст30Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст30Гр01, "Раздел1", );
			
			КС = ПоказателиКС(Р1Ст20Гр01.Значение, Р1Ст30Гр01.Значение);
			Расшифровка = КС.ЛеваяЧастьСтр + " >= " + КС.ПраваяЧастьСтр;
			
			Если КС.ЛеваяЧасть >= КС.ПраваяЧасть Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
				Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
			
			
			ИндексПроверки = СтрокаЧГ0(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок);
			ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
			СтруктураОшибок.Вставить("Описание" + ИндексПроверки, ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + ИндексПроверки, Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + ИндексПроверки, ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + ИндексПроверки, ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндексПроверки, ТекстовоеПредставлениеФормулы);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВыполняетсяКС_1_3(ОбработкаКС, СтруктураПараметров)
	
	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;
	
	СтруктураРезультата = НоваяСтруктураРезультатаКС();
	
	ОбщееЧислоОшибок = 0;
	ОбщееЧислоБезОшибок = 0;
	
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы    = НСтр("ru='Раздел 1 (КС 1.3)'");
	ОписаниеКС      = НСтр("ru='Сумма исчисленного налога (строка 040 Раздела 1) должна быть равна разнице Суммы начисленного дохода (строка 020 Раздела 1) и Суммы налоговых вычетов (строка 030 Раздела 1) / 100 * Ставка налога (строка 010 Раздела 1), если Сумма начисленного дохода (строка 020 Раздела 1) больше или равна сумме налоговых вычетов (строка 030 Раздела 1)'");
	Нарушение = НСтр("ru='ст. 126.1, ст. 210, ст. 23 НК РФ, ст. 24 НК РФ'");
	ОписаниеОшибки1 = НСтр("ru='Завышена сумма исчисленного налога'");
	ОписаниеОшибки2 = НСтр("ru='Занижена сумма исчисленного налога'");
	
	Р1Ст40Гр01 = ПоказательПоСтроке("Р1Ст40Гр01");
	Р1Ст20Гр01 = ПоказательПоСтроке("Р1Ст20Гр01");
	Р1Ст30Гр01 = ПоказательПоСтроке("Р1Ст30Гр01");
	Р1Ст10Гр01 = ПоказательПоСтроке("Р1Ст10Гр01");
	Р1Ст60Гр01 = ПоказательПоСтроке("Р1Ст60Гр01");
	
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		СсылкаНаДокумент = Стр.СсылкаНаРО;
		СведенияДокумента = СтруктураСведенийДокумента(СсылкаНаДокумент);
		
		Раздел1 = СведенияДокумента.ПолеТабличногоДокументаРаздел1;
		Раздел2 = СведенияДокумента.ПолеТабличногоДокументаРаздел2;
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000010001001_");
		КоличествоСтрок100 = КоличествоСтрок(Раздел2, "П000020010001_");
		
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			
			ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС, ОписаниеКС);
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст40Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст40Гр01, "Раздел1", );
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст20Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст20Гр01, "Раздел1", );
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст30Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст30Гр01, "Раздел1", );
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст10Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст10Гр01, "Раздел1", );
			
			ВставитьЗначениеПоказателя(Раздел1, Р1Ст60Гр01);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст60Гр01, "Раздел1", );
		
			Погрешность = Р1Ст60Гр01.Значение * КоличествоСтрок100;
			ПогрешностьСтр = Формат(Погрешность, "ЧРД=,; ЧН=");
			
			КС = ПоказателиКС(Р1Ст40Гр01.Значение, (Р1Ст20Гр01.Значение - Р1Ст30Гр01.Значение) / 100 * Р1Ст10Гр01.Значение, 0, 0);
			Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р1Ст20Гр01.ЗначениеСтр + " - " + Р1Ст30Гр01.ЗначениеСтр + ") / 100 * "
				+ Р1Ст10Гр01.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "] (±" + ПогрешностьСтр + "), когда " + Р1Ст20Гр01.ЗначениеСтр
				+ " >= " + Р1Ст30Гр01.ЗначениеСтр;
				
			УсловиеВыполнено = (Р1Ст20Гр01.Значение >= Р1Ст30Гр01.Значение);
			КСВыполнено = КССучетомОтклонения(КС.ЛеваяЧасть, КС.ПраваяЧасть, Погрешность);
			Если УсловиеВыполнено И НЕ КСВыполнено Тогда
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			Иначе
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			КонецЕсли;
			
			Если ЭтоОшибка = Ложь Тогда
				ОписаниеОшибки = "";
				
			ИначеЕсли КС.ЛеваяЧасть > КС.ПраваяЧасть Тогда
				ОписаниеОшибки = ОписаниеОшибки1;
				
			ИначеЕсли КС.ЛеваяЧасть < КС.ПраваяЧасть Тогда
				ОписаниеОшибки = ОписаниеОшибки2;
			
			КонецЕсли;
			
			ИндексПроверки = СтрокаЧГ0(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок);
			ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
			СтруктураОшибок.Вставить("Описание" + ИндексПроверки, ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + ИндексПроверки, Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + ИндексПроверки, ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + ИндексПроверки, ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндексПроверки, ТекстовоеПредставлениеФормулы);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВыполняетсяКС_1_4(ОбработкаКС, СтруктураПараметров)
	
	ТаблицаПодходящихДокументов = СтруктураПараметров.ТаблицаПодходящихДокументов;
	СтрокаНастройки = СтруктураПараметров.СтрокаНастройки;
	Формула = СтруктураПараметров.Формула;
	ОписаниеОшибки = СтруктураПараметров.ОписаниеОшибки;
	
	СтруктураРезультата = НоваяСтруктураРезультатаКС();
	
	ОбщееЧислоОшибок = 0;
	ОбщееЧислоБезОшибок = 0;
	
	СтруктураОшибок = Новый Структура;
	
	ТекстФормулы    = НСтр("ru='Раздел 1 (КС 1.4)'");
	ОписаниеКС      = НСтр("ru='Сумма исчисленного налога (строка 040 Раздела 1) должна быть больше или равна cумме фиксированного авансового платежа (строка 050 Раздел 1)'");
	Нарушение = НСтр("ru='ст. 126.1, ст. 227.1. ст. 23 НК РФ, ст. 24 НК РФ'");
	ОписаниеОшибки  = НСтр("ru='Завышена сумма фиксированного авансового платежа'");
	
	Р1Ст40Гр01 = ПоказательПоСтроке("Р1Ст40Гр01");
	Р1Ст50Гр01 = ПоказательПоСтроке("Р1Ст50Гр01");
	
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		СсылкаНаДокумент = Стр.СсылкаНаРО;
		СведенияДокумента = СтруктураСведенийДокумента(СсылкаНаДокумент);
		
		Раздел1 = СведенияДокумента.ПолеТабличногоДокументаРаздел1;
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000010001001_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС, ОписаниеКС);
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст40Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст40Гр01, "Раздел1", );
			
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст50Гр01, Инд);
			ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Р1Ст50Гр01, "Раздел1", );
			
			КС = ПоказателиКС(Р1Ст40Гр01.Значение, Р1Ст50Гр01.Значение, 0, 0);
			Расшифровка = КС.ЛеваяЧастьСтр + " >= " + КС.ПраваяЧастьСтр;
			
			Если КС.ЛеваяЧасть >= КС.ПраваяЧасть Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			ИндексПроверки = СтрокаЧГ0(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок);
			ТекстовоеПредставлениеФормулы = ?(ТекстФормулы = "", "", ТекстФормулы + ". ") + ОписаниеКС;
			СтруктураОшибок.Вставить("Описание" + ИндексПроверки, ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + ИндексПроверки, Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + ИндексПроверки, ОбработкаКС.мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + ИндексПроверки, ЭтоОшибка);
			СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндексПроверки, ТекстовоеПредставлениеФормулы);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "ТитульныйДатаПодписи" Тогда
		Результат.Вставить("Имя", "ДатаПодписи");
		Результат.Вставить("Представление", Нстр("ru='Дата подписи'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст20Гр01" Тогда
		Результат.Вставить("Имя", "П000010002001_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст30Гр01" Тогда
		Результат.Вставить("Имя", "П000010003001_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст40Гр01" Тогда
		Результат.Вставить("Имя", "П000010004001_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст10Гр01" Тогда
		Результат.Вставить("Имя", "П000010001001_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст45Гр01" Тогда
		Результат.Вставить("Имя", "П000010004501_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст25Гр01" Тогда
		Результат.Вставить("Имя", "П000010002501_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст50Гр01" Тогда
		Результат.Вставить("Имя", "П000010005001_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст60Гр01" Тогда
		Результат.Вставить("Имя", "П000010006001");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст70Гр01" Тогда
		Результат.Вставить("Имя", "П000010007001");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст140Гр01" Тогда
		Результат.Вставить("Имя", "П000020014001_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	КонецЕсли;
	
	Если Результат.Представление = "" Тогда
		Результат.Вставить("Представление", ПредставлениеПоказателяКС(Результат.Имя));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеПоказателяКС(ИмяПоказателя)
	
	Раздел = Новый Структура();
	Раздел.Вставить("П00001", "Раздела 1");
	Раздел.Вставить("П00002", "Раздела 2");
	
	ПодстрокаРаздела = Раздел[Лев(ИмяПоказателя, 6)];
	ПодстрокаСтроки = Сред(ИмяПоказателя, 9, 3);
	Если Прав(ИмяПоказателя,2) = "%1" Тогда
		ПодстрокаГрафы = Сред(ИмяПоказателя, 12, 2);
	Иначе
		ПодстрокаГрафы = Прав(ИмяПоказателя,2);
	КонецЕсли;
	
	Возврат ПодставитьПараметрыВСтроку(Нстр("ru='Графа %1 строка %2 %3'"), ПодстрокаГрафы,
		ПодстрокаСтроки, ПодстрокаРаздела);
	
КонецФункции

Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
		ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = Окр(ЗначениеПоказателя, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
		ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
	Иначе
		ЗначениеПоказателя = 0;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = Окр(ЗначениеПоказателя, 2);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
КонецПроцедуры

Функция НоваяСтруктураРезультатаКС() Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура ЗарегистрироватьФормулуДляРасшифровки(ОбработкаКС, ОписаниеКС) Экспорт
	
	ОбработкаКС.мСчетчикФормулДляРасшифровок = ОбработкаКС.мСчетчикФормулДляРасшифровок + 1;
	ОбработкаКС.ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
КонецПроцедуры

Процедура ЗарегистрироватьПоказательДляРасшифровки(ОбработкаКС, СсылкаНаДокумент, Показатель, Раздел, НомерСтраницы = "") Экспорт
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	ОбработкаКС.ЗарегистрироватьПоказательДляРасшифровки(
	ИмяПоказателя,
	ПодставитьПараметрыВСтроку(Показатель.Представление, ?(ЗначениеЗаполнено(НомерСтраницы), " листа №" + НомерСтраницы, "")),
	Показатель.ЗначениеСтр,
	"",
	СсылкаНаДокумент,
	Раздел,
	Неопределено,
	НомерСтраницы);
	
КонецПроцедуры

Функция ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = 2, РазмерПрав = 2)
	
	ПоказателиКС = Новый Структура();
	
	Если ТипЗнч(ЛеваяЧасть) = Тип("Число") Тогда
		Если РазмерЛев = Истина Тогда
			ЛеваяЧасть = Окр(ЛеваяЧасть, 2);
			
		ИначеЕсли ТипЗнч(РазмерЛев) = Тип("Число") Тогда
			ЛеваяЧасть = Окр(ЛеваяЧасть, РазмерЛев);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ПраваяЧасть) = Тип("Число") Тогда
		Если РазмерПрав = Истина Тогда
			ПраваяЧасть = Окр(ПраваяЧасть, 2);
			
		ИначеЕсли ТипЗнч(РазмерПрав) = Тип("Число") Тогда
			ПраваяЧасть = Окр(ПраваяЧасть, РазмерПрав);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	
	Возврат ПоказателиКС;
	
КонецФункции

Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок,
	ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено,
	Коммент = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Коммент);
	
КонецПроцедуры

Функция КоличествоСтрок(Данные, Показатель)
	Инд = 1; Количество = 0;
	Пока Данные.Свойство(Показатель + СтрокаЧГ0(Инд)) Цикл
		Количество = Количество + 1;
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Функция СрокРасчета()
	
	ОкончаниеПериодаОтчета = мДатаКонцаПериодаОтчета;
	Если Месяц(ОкончаниеПериодаОтчета) = 12 Тогда
		Возврат Дата(Год(ОкончаниеПериодаОтчета)+1, 4, 1);
	Иначе
		Возврат КонецМесяца(ДобавитьМесяц(ОкончаниеПериодаОтчета, 1));
	КонецЕсли;
	
КонецФункции

Функция ДатаИзСтроки(СтрДата)
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

Функция ПредставлениеДляРасшифровки(ЗначениеПредставления)
	
	ТипПредставления = ТипЗнч(ЗначениеПредставления);
	ПредставлениеПустого = "";
	Если ТипПредставления = Тип("Строка") Тогда
		Представление = ЗначениеПредставления;
		ПредставлениеПустого = "«»";
	ИначеЕсли ТипПредставления = Тип("Дата") Тогда
		Представление = Формат(ЗначениеПредставления, "ДЛФ=D");
		ПредставлениеПустого = "« . . »";
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеПредставления), Представление, ПредставлениеПустого);
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

Функция СтруктураСведенийДокумента(СохраненныйДокумент)
	
	Результат = Неопределено;
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныйДокумент.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		ДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	СтруктураМногостраничныхРазделов = СохрСтруктура.ДанныеМногостраничныхРазделов;
	Для Каждого Раздел Из СтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = Раздел.Значение;
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
		КонецЦикла;
		ДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
	КонецЦикла;
	Результат = ДанныеОтчета;
	Возврат Результат;
	
КонецФункции

Функция КССучетомОтклонения(ЛеваяЧасть, ПраваяЧасть, Отклонение)
	
	Возврат (ЛеваяЧасть >= ПраваяЧасть - Отклонение И ЛеваяЧасть <= ПраваяЧасть + Отклонение);
	
КонецФункции

//+ Иванов А.Б. 2016-04-15
Процедура КоманднаяПанельФормыивЗаполнитьИзПеречисленийНДФЛ(Кнопка)
	ИмяРаздела2 = "Раздел2";
	
	ОчиститьОтчет(Ложь,ИмяРаздела2);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Организация",Организация);
	ДопПараметры.Вставить("ПодразделениеОрганизации",ОбособленноеПодразделение);
	ДопПараметры.Вставить("ДатаНачалаКвартала",мДатаНачалаПериодаОтчета);
	ДопПараметры.Вставить("ДатаОкончанияКвартала",мДатаКонцаПериодаОтчета);
	
	//+ Иванов А.Б. 2016-07-11
	ДатаОкончанияКварталаПлюс30Дней = мДатаКонцаПериодаОтчета + 86400*30;
	ДопПараметры.Вставить("ДатаОкончанияКварталаПлюс30Дней",ДатаОкончанияКварталаПлюс30Дней);
	Отказ = Ложь;
	
	ивПроверимЕстьЛиЗаписиВПроизводственномКалендаре(ДопПараметры,Отказ);
	Если Отказ Тогда
		Возврат;
	Конецесли;
	//- Иванов А.Б. 2016-07-11	
	
	Запрос = ивПолучитЗапросДанныеДляЗаполнения(ДопПараметры);
	
	#Если Тромбон тогда
		Запрос = Новый Запрос();
	#Конецесли
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для заполнения");
		Возврат;
	Конецесли;
	
	пТЗЗначениеОбластей = ПолучитьТЗЗначениеОбластей();
	
	МассивПоказателей = Новый Массив();
	МассивПоказателей.Добавить("ДатаФактическогоПолученияДохода");
	МассивПоказателей.Добавить("ДатаУдержанияНалога");
	МассивПоказателей.Добавить("СрокПеречислениеНалога");
	МассивПоказателей.Добавить("СуммаФактическиПолученногоДохода");
	МассивПоказателей.Добавить("CуммаУдержанногоНалога");
	
	пНомерСтрокиРаздел2 = 1;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если пНомерСтрокиРаздел2 > 3 Тогда
			ВставитьДополнительнуюСтроку();	
		Конецесли;
		
		Для каждого ИмяПоказателя из МассивПоказателей цикл
			ЗначениеОбласти = Выборка[ИмяПоказателя];
			
			ИмяОбласти = ПолучитьИмяОбластиИзТЗЗначениеОбластей(ИмяПоказателя,пТЗЗначениеОбластей);
			ИмяОбласти = ИмяОбласти + "_"+пНомерСтрокиРаздел2;
			//ПТД_Раздел2.Области[ИмяОбласти].Значение = ЗначениеОбласти;	
			УстановитьЗначениеПоказателя(ИмяОбласти, ЗначениеОбласти, ИмяРаздела2);
		Конеццикла;
		
		//МесяцНалоговогоПериода	ДатаФактическогоПолученияДохода	ДатаУдержанияНалога	СрокПеречислениеНалога	ПеречислениеЗП	
		//CуммаУдержанногоНалога	СуммаФактическиПолученногоДохода	СуммаСтандартныхВычетов	СуммаИмущественныхВычетов
		
		пНомерСтрокиРаздел2 = пНомерСтрокиРаздел2 + 1;
	Конеццикла;
	
	
	ВывестиТабДокументРасшифровки(Запрос);
	
	//+ Иванов А.Б. 2016-04-18
	ивОбновитьИтоги();
	//- Иванов А.Б. 2016-04-18
	
КонецПроцедуры
//- Иванов А.Б. 2016-04-15



//+ Иванов А.Б. 2016-04-15
Процедура ВывестиТабДокументРасшифровки(Запрос) Экспорт
	мТабДокументРасшифровка = Новый ТабличныйДокумент;
	
	ВТРезультат = ивВыполнитьЗапрос(Запрос,"ВТРезультат");	
	ДобавитьВмТабДокументРасшифровка("Результат",мТабДокументРасшифровка,ВТРезультат);
	
	ВТПеречислениеНДФЛВБюджетПредв = ивВыполнитьЗапрос(Запрос,"ВТПеречислениеНДФЛВБюджетПредв");	
	ДобавитьВмТабДокументРасшифровка("Перечисление НДФЛ в бюджет",мТабДокументРасшифровка,ВТПеречислениеНДФЛВБюджетПредв);
	
	ВТСтандартныеВычетыПредв = ивВыполнитьЗапрос(Запрос,"ВТСтандартныеВычетыПредв");	
	ДобавитьВмТабДокументРасшифровка("Стандартные вычеты",мТабДокументРасшифровка,ВТСтандартныеВычетыПредв);
	
	ВТИмущественныеВычетыПредв = ивВыполнитьЗапрос(Запрос,"ВТИмущественныеВычетыПредв");	
	ДобавитьВмТабДокументРасшифровка("Имущественные вычеты",мТабДокументРасшифровка,ВТИмущественныеВычетыПредв);
	
	мТабДокументРасшифровка.Показать("Расшифровка показателей для "+ОбособленноеПодразделение +"_"+Формат(ТекущаяДата(),"ДФ=ddMMyyyy"));
КонецПроцедуры //ВывестиТабДокументРасшифровки(Запрос)
//- Иванов А.Б. 2016-04-15

//+ Иванов А.Б. 2016-04-15
Процедура ДобавитьВмТабДокументРасшифровка(Заголовок,мТабДокументРасшифровка,ТЗДанныеРасшифровки) Экспорт
	//Сообщить("ДобавитьВМакетРасшифровку(ТЗДанныеРасшифровки)");	
	Если мТабДокументРасшифровка = Неопределено Тогда
		мТабДокументРасшифровка = Новый ТабличныйДокумент();	
	Конецесли;
	
	Макет = ПолучитьМакет("ивМакетРасшифровки");
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЗаголовок|КолонкаЗаголовок");
	ОбластьМакета.Параметры.Заголовок=Заголовок+" данные сформированы: "+ТекущаяДата();
	мТабДокументРасшифровка.Вывести(ОбластьМакета);	
	
	мТабДокументРасшифровка.НачатьГруппуСтрок();
	
	ПерваяКолонка=Истина;
	Для каждого Колонка из ТЗДанныеРасшифровки.Колонки цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Колонка");
		ОбластьМакета.Параметры.ИмяКолонки=""+СтрЗаменить(Колонка.Имя,"COM","");
		Если ПерваяКолонка Тогда
			мТабДокументРасшифровка.Вывести(ОбластьМакета);			
			ПерваяКолонка=Ложь;
		Иначе
			мТабДокументРасшифровка.Присоединить(ОбластьМакета);
		Конецесли;
	Конеццикла;
	
	СтрокаДляГруппировкиИтогов = "";
	ЗаполненаСтрокаДляГруппировкиИтогов = Ложь;
	
	Для каждого СтрокаТЗДанныеРасшифровки из ТЗДанныеРасшифровки цикл	
		ПерваяКолонка=Истина;
		Для каждого Колонка из ТЗДанныеРасшифровки.Колонки цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
			пЗначениеЯчейки = СтрокаТЗДанныеРасшифровки[Колонка.Имя];
			Если ТипЗнч(пЗначениеЯчейки) = Тип("Число") Тогда
				ОбластьМакета.Параметры.Значение=Окр(пЗначениеЯчейки,2);
				Если НЕ ЗаполненаСтрокаДляГруппировкиИтогов Тогда
					СтрокаДляГруппировкиИтогов = СтрокаДляГруппировкиИтогов+", "+Колонка.Имя;
				Конецесли;
			Иначе
				ОбластьМакета.Параметры.Значение=пЗначениеЯчейки;
			Конецесли;
			
			Если ПерваяКолонка Тогда
				мТабДокументРасшифровка.Вывести(ОбластьМакета);			
				ПерваяКолонка=Ложь;
			Иначе
				мТабДокументРасшифровка.Присоединить(ОбластьМакета);
			Конецесли;
		Конеццикла;
		ЗаполненаСтрокаДляГруппировкиИтогов = Истина;
	Конеццикла;
	
	ТЗДанныеРасшифровкиИтоги = ТЗДанныеРасшифровки.Скопировать();
	ТЗДанныеРасшифровкиИтоги.Свернуть(,СтрокаДляГруппировкиИтогов);
	ТЗДанныеРасшифровкиИтоги_Колонки = ТЗДанныеРасшифровкиИтоги.Колонки;
	
	Для каждого СтрокаТЗДанныеРасшифровкиИтоги из ТЗДанныеРасшифровкиИтоги цикл
		ПерваяКолонка=Истина;
		Для каждого Колонка из ТЗДанныеРасшифровки.Колонки цикл
			ИмяКолонки = Колонка.Имя;
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал|Колонка");
			пЗначениеЯчейки = Неопределено;
			Если ТЗДанныеРасшифровкиИтоги_Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				пЗначениеЯчейки = СтрокаТЗДанныеРасшифровкиИтоги[ИмяКолонки];
				пЗначениеЯчейки = Окр(пЗначениеЯчейки,2);
			Конецесли;
			ОбластьМакета.Параметры.Значение = пЗначениеЯчейки;
			
			Если ПерваяКолонка Тогда
				мТабДокументРасшифровка.Вывести(ОбластьМакета);			
				ПерваяКолонка=Ложь;
			Иначе
				мТабДокументРасшифровка.Присоединить(ОбластьМакета);
			Конецесли;			
		Конеццикла;	
	Конеццикла;
	
	мТабДокументРасшифровка.ОтображатьЗаголовки = Ложь;
	мТабДокументРасшифровка.ОтображатьСетку = Ложь;
	мТабДокументРасшифровка.ТолькоПросмотр = Истина;
	мТабДокументРасшифровка.ЗакончитьГруппуСтрок();
	//мТабДокументРасшифровка.ИмяСохраненияПоложенияОкна=""+ПараметрыСеанса.ТекущийПользователь+ВидДокумента;
	//мТабДокументРасшифровка.Показать();		
КонецПроцедуры //ДобавитьВМакетРасшифровку(ТЗДанныеРасшифровки)
//- Иванов А.Б. 2016-04-15


//+ Иванов А.Б. 2016-04-15
Функция ПолучитьИмяОбластиИзТЗЗначениеОбластей(ИмяПоказателя,пТЗЗначениеОбластей) Экспорт 
	пИмяОбласти = Неопределено;
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить("ИмяПоказателя",ИмяПоказателя);
	НайденныеСтроки = пТЗЗначениеОбластей.НайтиСтроки(ПараметрыОтбора);
	ВсегоНайденныеСтроки = НайденныеСтроки.Количество();
	ТекстОшибки = "";
	Если ВсегоНайденныеСтроки = 1 тогда
		СтрокаНайденныеСтроки = НайденныеСтроки[0];	
		пИмяОбласти = СтрокаНайденныеСтроки.ИмяОбласти;
	ИначеЕсли ВсегоНайденныеСтроки > 1 Тогда
		ТекстОшибки = "Ошибка! Найдено более 1 строки";
	Иначе
		ТекстОшибки = "Ошибка! Не найдена строка";
	Конецесли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки  
			+" в пТЗЗначениеОбластей для "
			+" ИмяПоказателя ["+ИмяПоказателя+"]"
			;
		Сообщить(ТекстОшибки);	
	Конецесли;
	Возврат пИмяОбласти;		
КонецФункции //ПолучитьИмяОбластиИзТЗЗначениеОбластей(ИмяПоказателя)
//- Иванов А.Б. 2016-04-15


//+ Иванов А.Б. 2016-04-15
Функция ПолучитьТЗЗначениеОбластей() Экспорт 
	пТЗЗначениеОбластей = Новый ТаблицаЗначений();
	пТЗЗначениеОбластей.Колонки.Добавить("ИмяПоказателя",Новый ОписаниеТипов("Строка"));
	пТЗЗначениеОбластей.Колонки.Добавить("ПредставлениеПоказателя",Новый ОписаниеТипов("Строка"));
	пТЗЗначениеОбластей.Колонки.Добавить("КодСтроки",Новый ОписаниеТипов("Строка"));
	пТЗЗначениеОбластей.Колонки.Добавить("ИмяОбласти",Новый ОписаниеТипов("Строка"));
	
	ДобавитьВТЗЗначениеОбластей(пТЗЗначениеОбластей,"ДатаФактическогоПолученияДохода","Дата фактического получения дохода","100","П000020010001");
	ДобавитьВТЗЗначениеОбластей(пТЗЗначениеОбластей,"ДатаУдержанияНалога","Дата удержания налога","110","П000020011001");
	ДобавитьВТЗЗначениеОбластей(пТЗЗначениеОбластей,"СрокПеречислениеНалога","Срок перечисления налога","120","П000020012001");
	ДобавитьВТЗЗначениеОбластей(пТЗЗначениеОбластей,"СуммаФактическиПолученногоДохода","Сумма фактически полученного дохода","130","П000020013001");
	ДобавитьВТЗЗначениеОбластей(пТЗЗначениеОбластей,"CуммаУдержанногоНалога","Cумма удержанного налога","140","П000020014001");
	
	
	
	Возврат пТЗЗначениеОбластей;	
КонецФункции //ПолучитьТЗЗначениеОбластей()
//- Иванов А.Б. 2016-04-15

//+ Иванов А.Б. 2016-04-15
Процедура ДобавитьВТЗЗначениеОбластей(пТЗЗначениеОбластей,ИмяПоказателя,ПредставлениеПоказателя,КодСтроки,ИмяОбласти) Экспорт
	СтрокапТЗЗначениеОбластей = пТЗЗначениеОбластей.Добавить();
	СтрокапТЗЗначениеОбластей.ИмяПоказателя = ИмяПоказателя;
	СтрокапТЗЗначениеОбластей.ПредставлениеПоказателя = ПредставлениеПоказателя;
	СтрокапТЗЗначениеОбластей.КодСтроки = КодСтроки;
	СтрокапТЗЗначениеОбластей.ИмяОбласти = ИмяОбласти;
	
КонецПроцедуры //ДобавитьВпТЗЗначениеОбластей();
//- Иванов А.Б. 2016-04-15

//+ Иванов А.Б. 2016-04-18
Процедура ивОбновитьИтоги() Экспорт
	ивИтогоСуммаФактическогоПолученногоДохода = 0;
	ивИтогоСуммаУдержанногоНалога = 0;
	
	ИмяГруппы = "П0000200100";
	
	ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	
	ТЗП0000200100 = мСтруктураМногострочныхРазделов.П0000200100;
	
	ивИтогоСуммаФактическогоПолученногоДохода = ТЗП0000200100.Итог("П000020013001");
	ивИтогоСуммаУдержанногоНалога = ТЗП0000200100.Итог("П000020014001");
	
КонецПроцедуры //ОбновитьИтоги
//- Иванов А.Б. 2016-04-18




//+ Иванов А.Б. 2016-04-15
//В командную панель добавлена кнопка ивЗаполнитьИзПеречисленийНДФЛ, справа от "Заполнить"
//Добавлены реквизиты ивИтогоСуммаФактическогоПолученногоДохода,ивИтогоСуммаУдержанногоНалога
//- Иванов А.Б. 2016-04-15

мВерсияФормы = "01/01/2016";

ИнициализироватьСтруктурыДанных();
